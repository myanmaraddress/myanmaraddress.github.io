<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1919.htm" />
    <title>React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<h2 id="一前言">一、前言</h2> <p><strong>先交代一下整个Demo项目结构：</strong></p> <ul> <li><strong>一个认证服务（端口5000）</strong><code>IdentityServer4.Authentication</code></li> <li><strong>五个授权模式（两个控制台程序，三个MVC项目端口5001）文件夹</strong><code>GrantClient</code></li> <li><strong>两个资源服务（WebApi：UserApiResource端口8000，ProductApiResource端口9000）文件夹</strong><code>ApiResource</code></li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/db86f832f523f0e658f6f51e5e32d8a6.jpg" alt="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式"></p> <h2 id="二准备认证服务--资源服务">二、准备认证服务 + 资源服务</h2> <h3 id="1认证服务">1、认证服务</h3> <p><strong>（1）新建一个MVC项目，安装 IdentityServer4 ，注册五种授权模式客户端，代码如下</strong></p> <pre><code class="language-C#">public class Startup {     public Startup(IConfiguration configuration)     {         Configuration = configuration;     }      public IConfiguration Configuration { get; }      // This method gets called by the runtime. Use this method to add services to the container.     public void ConfigureServices(IServiceCollection services)     {         services.AddControllersWithViews();          services.AddIdentityServer()         .AddDeveloperSigningCredential()                            //临时证书         .AddInMemoryClients(InMemoryConfig.GetClients())            //客户端模式，InMemory内存数据         .AddInMemoryApiScopes(InMemoryConfig.GetApiScopes())        //作用域         .AddInMemoryApiResources(InMemoryConfig.GetApiResources())  //资源         .AddTestUsers(InMemoryConfig.GetTestUser())                 //用户         .AddInMemoryIdentityResources(InMemoryConfig.IdentityResources);     }      // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.     public void Configure(IApplicationBuilder app, IWebHostEnvironment env)     {         if (env.IsDevelopment())         {             app.UseDeveloperExceptionPage();         }         else         {             app.UseExceptionHandler("/Home/Error");         }          app.UseIdentityServer(); //使用IdentityServer4          app.UseStaticFiles();          app.UseRouting();          app.UseAuthorization();          app.UseEndpoints(endpoints =&gt;         {             endpoints.MapControllerRoute(                 name: "default",                 pattern: "{controller=Home}/{action=Index}/{id?}");         });     } }</code></pre> <pre><code class="language-C#">public class InMemoryConfig {     public static IEnumerable&lt;IdentityResource&gt; IdentityResources =&gt;     new IdentityResource[]     {         new IdentityResources.OpenId(),         new IdentityResources.Profile(),         //new IdentityResources.Email(),         //new IdentityResources.Address(),         //new IdentityResources.Phone()     };     /// &lt;summary&gt;     /// ApiResource 资源列表     /// &lt;/summary&gt;     public static IEnumerable&lt;ApiResource&gt; GetApiResources()     {         return new[]         {             new ApiResource("UserApiResource", "获取用户信息API")             {                 Scopes={ "UserScope" }             },             new ApiResource("ProductApiResource", "获取商品信息API")             {                 Scopes={ "ProductScope" }             }         };     }     /// &lt;summary&gt;     /// ApiScopes 作用域     /// &lt;/summary&gt;     public static IEnumerable&lt;ApiScope&gt; GetApiScopes()     {         return new ApiScope[]         {             new ApiScope("UserScope"),             new ApiScope("ProductScope")         };     }     /// &lt;summary&gt;     /// Client 客户端     /// &lt;/summary&gt;     public static IEnumerable&lt;Client&gt; GetClients()     {         return new[]         {             //客户端模式             new Client             {                 ClientId = "ClientCredentials",                 ClientName = "ClientCredentials",                 ClientSecrets = new [] { new Secret("ClientCredentials".Sha256()) },                 AllowedGrantTypes = GrantTypes.ClientCredentials,                 AllowedScopes = new [] { "UserScope" }             },             //密码模式             new Client             {                 ClientId = "ResourceOwnerPasswordCredentials",                 ClientName = "ResourceOwnerPasswordCredentials",                 ClientSecrets = new [] { new Secret("ResourceOwnerPasswordCredentials".Sha256()) },                 AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,                 AllowedScopes = new []                 {                     "ProductScope",                     IdentityServerConstants.StandardScopes.OpenId,                     IdentityServerConstants.StandardScopes.Profile,                 }             },             //简化模式             new Client             {                 ClientId = "Implicit",                 ClientName = "Implicit",                 AllowedGrantTypes = GrantTypes.Implicit,                 RedirectUris = { "https://localhost:5001/signin-oidc" },                 PostLogoutRedirectUris = { "https://localhost:5001/signout-callback-oidc" },                 RequireConsent = true,                 AllowedScopes = new []{                     "UserScope",                     "ProductScope",                     IdentityServerConstants.StandardScopes.OpenId,                     IdentityServerConstants.StandardScopes.Profile,                 }             },             //授权码模式             new Client             {                 ClientId = "AuthorizationCode",                 ClientName = "AuthorizationCode",                 ClientSecrets = new [] { new Secret("AuthorizationCode".Sha256()) },                 AllowedGrantTypes = GrantTypes.Code,                 RedirectUris = { "https://localhost:5001/signin-oidc" },                 PostLogoutRedirectUris = { "https://localhost:5001/signout-callback-oidc" },                 RequireConsent = true,                 AllowedScopes = new []{                     "UserScope",                     "ProductScope",                     IdentityServerConstants.StandardScopes.OpenId,                     IdentityServerConstants.StandardScopes.Profile,                 }             },             //混合模式             new Client             {                 ClientId = "Hybrid",                 ClientName = "Hybrid",                 ClientSecrets = new [] { new Secret("Hybrid".Sha256()) },                 AllowedGrantTypes = GrantTypes.Hybrid,                 RedirectUris = { "https://localhost:5001/signin-oidc" },                 PostLogoutRedirectUris = { "https://localhost:5001/signout-callback-oidc" },                 RequireConsent = true,                 RequirePkce = false,                 AllowedScopes = new []{                     "UserScope",                     "ProductScope",                     IdentityServerConstants.StandardScopes.OpenId,                     IdentityServerConstants.StandardScopes.Profile,                     //IdentityServerConstants.StandardScopes.Email,                     //IdentityServerConstants.StandardScopes.Address,                     //IdentityServerConstants.StandardScopes.Phone                 }             },         };     }     public static List&lt;TestUser&gt; GetTestUser()     {         return new List&lt;TestUser&gt;(){             new TestUser             {                 SubjectId = "1",                 Username = "WinterSir",                 Password = "WinterSir",                 Claims =                 {                      new Claim(JwtClaimTypes.Name,"WinterSir"),                      new Claim(JwtClaimTypes.GivenName,"WinterSir"),                      new Claim(JwtClaimTypes.FamilyName,"WinterSir-FamilyName"),                      new Claim(JwtClaimTypes.Email,"641187567@qq.com"),                      new Claim(JwtClaimTypes.EmailVerified,"true", ClaimValueTypes.Boolean),                      new Claim(JwtClaimTypes.WebSite,"http://WinterSir.com"),                      new Claim(JwtClaimTypes.Address,@" [ 'street_address': 'Chang Ping', 'locality': 'BeiJing' ,'postal_code’: 102206,'country': 'China'}",                      IdentityServerConstants.ClaimValueTypes.Json)                 }             }         };     } }</code></pre> <p><strong>（2）cmd</strong><code>dotnet new is4ui</code><strong>安装</strong><code>Quickstart UI</code><strong>模板，删除原来 Controllers 中 HomeController 防止冲突，设置5000端口启动</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/62605c634a743a0217c454e9b39dc921.jpg" alt="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式"></p> <h3 id="2资源服务">2、资源服务</h3> <p><strong>新建两个WebApi项目，安装</strong><code>IdentityServer4.AccessTokenValidation</code><strong>，分别修改Startup、Controller，设置8000、9000端口启动</strong></p> <pre><code class="language-C#">public class Startup {     public Startup(IConfiguration configuration)     {         Configuration = configuration;     }      public IConfiguration Configuration { get; }      // This method gets called by the runtime. Use this method to add services to the container.     public void ConfigureServices(IServiceCollection services)     {          services.AddControllers();         services.AddSwaggerGen(c =&gt;         {             c.SwaggerDoc("v1", new OpenApiInfo { Title = "ProductApiResource", Version = "v1" });         });          //集成端口为5000的认证服务         services.AddAuthentication("Bearer")           .AddIdentityServerAuthentication(options =&gt;           {               options.Authority = "https://localhost:5000";               options.ApiName = "ProductApiResource";           });     }      // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.     public void Configure(IApplicationBuilder app, IWebHostEnvironment env)     {         if (env.IsDevelopment())         {             app.UseDeveloperExceptionPage();             app.UseSwagger();             app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint("/swagger/v1/swagger.json", "ProductApiResource v1"));         }          app.UseRouting();          app.UseAuthentication();//鉴权          app.UseAuthorization();//授权          app.UseEndpoints(endpoints =&gt;         {             endpoints.MapControllers();         });     } }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6e59faf2f48569f953cd686d873612e2.jpg" alt="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式"></p> <h2 id="三授权模式">三、授权模式</h2> <h3 id="1客户端授权模式">1、客户端授权模式</h3> <blockquote> <p><strong>客户端模式（Client Credentials）指客户端以自己的名义，而不是以用户的名义，向"认证服务"进行认证。如果是提前约束好的客户端，直接给你颁发令牌 token</strong></p> </blockquote> <p><strong>安装</strong><code>IdentityModel</code></p> <pre><code class="language-C#">class Program {     /// &lt;summary&gt;     /// 客户端模式（Client Credentials）     /// &lt;/summary&gt;     /// &lt;param name="args"&gt;&lt;/param&gt;     static void Main(string[] args)     {         Console.WriteLine("***************** 客户端模式（Client Credentials）*****************");         var client = new HttpClient();         var disco = client.GetDiscoveryDocumentAsync("https://localhost:5000/").Result;         if (disco.IsError)         {             Console.WriteLine(disco.Error);             return;         }         var tokenResponse = client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest         {             Address = disco.TokenEndpoint,             ClientId = "ClientCredentials",             ClientSecret = "ClientCredentials",             Scope = "UserScope"         }).Result;          if (tokenResponse.IsError)         {             Console.WriteLine(tokenResponse.Error);             return;         }          Console.WriteLine("\nToken: " + tokenResponse.AccessToken);          var apiClient = new HttpClient();         apiClient.SetBearerToken(tokenResponse.AccessToken);         var response = apiClient.GetAsync("https://localhost:8000/User/Get").Result;         if (!response.IsSuccessStatusCode)         {             Console.WriteLine(response.StatusCode);         }         else         {             var content = response.Content.ReadAsStringAsync().Result;             Console.WriteLine("\n结果: " + content);         }          Console.ReadLine();     } }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/abaf3a4c9fe02d4fd5d5e0621ee8a3ba.jpg" alt="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式"></p> <h3 id="2密码模式">2、密码模式</h3> <blockquote> <p><strong>密码模式（Resource Owner Password Credentials）中客户端使用用户提供的用户名和密码，向"认证服务"进行认证，有较高风险，通常只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。相较于客户端多了一个用户角色。</strong></p> </blockquote> <p><strong>安装</strong><code>IdentityModel</code></p> <pre><code class="language-C#">static void Main(string[] args) {     Console.WriteLine("***************** 密码模式（Resource Owner Password credentials）***************** ");     var client = new HttpClient();     var disco = client.GetDiscoveryDocumentAsync("https://localhost:5000/").Result;     if (disco.IsError)     {         Console.WriteLine(disco.Error);         return;     }     var tokenResponse = client.RequestPasswordTokenAsync(new PasswordTokenRequest()     {         Address = disco.TokenEndpoint,         ClientId = "ResourceOwnerPasswordCredentials",         ClientSecret = "ResourceOwnerPasswordCredentials",         UserName = "WinterSir",         Password = "WinterSir",         Scope = "ProductScope",     }).Result;      if (tokenResponse.IsError)     {         Console.WriteLine(tokenResponse.Error);         return;     }      Console.WriteLine("\nToken: " + tokenResponse.AccessToken);      var apiClient = new HttpClient();     apiClient.SetBearerToken(tokenResponse.AccessToken);     var response = apiClient.GetAsync("https://localhost:9000/Product/Get").Result;     if (!response.IsSuccessStatusCode)     {         Console.WriteLine(response.StatusCode);     }     else     {         var content = response.Content.ReadAsStringAsync().Result;         Console.WriteLine("\n结果: " + content);     }      Console.ReadLine(); }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/690b6ea480aafc8cb70668b1ccf8b1df.jpg" alt="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式"></p> <h3 id="3简化模式">3、简化模式</h3> <blockquote> <p><strong>简化模式（Implicit）比授权码模式少了code环节，所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证，该模式是很不安全的，且不支持refresh token，适用于 Web 安全要求不高的场景，设置较短时效的 token。</strong></p> </blockquote> <p><strong>（1）安装</strong><code>IdentityServer4.AccessTokenValidation、Microsoft.AspNetCore.Authentication.OpenIdConnect</code><strong>，修改Startup</strong></p> <pre><code class="language-C#">public class Startup {     public Startup(IConfiguration configuration)     {         Configuration = configuration;     }      public IConfiguration Configuration { get; }      // This method gets called by the runtime. Use this method to add services to the container.     public void ConfigureServices(IServiceCollection services)     {         //关闭Jwt映射         JwtSecurityTokenHandler.DefaultMapInboundClaims = false;         //注册授权         services.AddAuthentication(options =&gt;         {             options.DefaultScheme = "Cookies";             options.DefaultChallengeScheme = "oidc";         })         .AddCookie("Cookies")         .AddOpenIdConnect("oidc", options =&gt;         {             options.Authority = "https://localhost:5000";       //认证服务             options.RequireHttpsMetadata = true;                //必须使用Https，否则用户无法登录             options.ClientId = "Implicit";             options.ClientSecret = "Implicit";             options.SaveTokens = true; //表示Token要存储         });          services.AddControllersWithViews().AddRazorRuntimeCompilation();     }      // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.     public void Configure(IApplicationBuilder app, IWebHostEnvironment env)     {         if (env.IsDevelopment())         {             app.UseDeveloperExceptionPage();         }         else         {             app.UseExceptionHandler("/Home/Error");         }         app.UseStaticFiles();          app.UseRouting();          app.UseAuthentication();          app.UseAuthorization();          app.UseHttpsRedirection();          app.UseEndpoints(endpoints =&gt;         {             endpoints.MapControllerRoute(                 name: "default",                 pattern: "{controller=Home}/{action=Index}/{id?}");         });     } }</code></pre> <p><strong>（2）_Layout.cshtml添加 注销按钮</strong></p> <pre><code class="language-html">&lt;div class="navbar-collapse collapse d-sm-inline-flex justify-content-between"&gt;     &lt;ul class="navbar-nav flex-grow-1"&gt;         &lt;li class="nav-item"&gt;             &lt;a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index"&gt;Home&lt;/a&gt;         &lt;/li&gt;         &lt;li class="nav-item"&gt;             &lt;a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy"&gt;Privacy&lt;/a&gt;         &lt;/li&gt;     &lt;/ul&gt;     &lt;a class="nav-link text-dark float-right" asp-area="" asp-controller="Home" asp-action="Logout"&gt;Logout&lt;/a&gt; &lt;/div&gt;</code></pre> <p><strong>（3）HomeController添加对应功能，需要认证的方法加上特性</strong><code>[Authorize]</code></p> <pre><code class="language-C#">[Authorize] public IActionResult Privacy() {     return View(); }  //注销 public IActionResult Logout() {     return SignOut("Cookies", "oidc"); }</code></pre> <p><strong>（4）修改Privacy.cshtml</strong></p> <pre><code class="language-HTML">@{     ViewData["Title"] = "Privacy Policy"; } &lt;h1&gt;@ViewData["Title"]&lt;/h1&gt;  @using Microsoft.AspNetCore.Authentication  &lt;h2&gt;Claims&lt;/h2&gt;  &lt;dl&gt;     @foreach (var claim in User.Claims)     {         &lt;dt&gt;@claim.Type&lt;/dt&gt;         &lt;dd&gt;@claim.Value&lt;/dd&gt;     } &lt;/dl&gt;  &lt;h2&gt;Properties&lt;/h2&gt;  &lt;dl&gt;     @foreach (var prop in (await Context.AuthenticateAsync()).Properties.Items)     {         &lt;dt&gt;@prop.Key&lt;/dt&gt;         &lt;dd&gt;@prop.Value&lt;/dd&gt;     } &lt;/dl&gt;</code></pre> <p><strong>（5）效果图</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3e1cb408ec0748789dd66d3441538e65.jpg" alt="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式"></p> <h3 id="4授权码模式">4、授权码模式</h3> <blockquote> <p><strong>授权码模式（Authorization Code）不同于简化模式直接返回token，而是先返回一个授权码，再用授权码去请求token，然后携带访问Api资源。授权码模式是功能最完整、流程最严密的授权模式。</strong></p> </blockquote> <p><strong>（1）安装</strong><code>IdentityServer4.AccessTokenValidation、Microsoft.AspNetCore.Authentication.OpenIdConnect</code><strong>，修改Startup</strong></p> <pre><code class="language-C#">public class Startup {     public Startup(IConfiguration configuration)     {         Configuration = configuration;     }      public IConfiguration Configuration { get; }      // This method gets called by the runtime. Use this method to add services to the container.     public void ConfigureServices(IServiceCollection services)     {         //关闭Jwt映射         JwtSecurityTokenHandler.DefaultMapInboundClaims = false;         //注册授权         services.AddAuthentication(options =&gt;         {             options.DefaultScheme = "Cookies";             options.DefaultChallengeScheme = "oidc";         })         .AddCookie("Cookies")         .AddOpenIdConnect("oidc", options =&gt;         {             options.Authority = "https://localhost:5000";       //认证服务             options.RequireHttpsMetadata = true;                //必须使用Https，否则用户无法登录             options.ClientId = "AuthorizationCode";             options.ClientSecret = "AuthorizationCode";             options.ResponseType = "code";             options.Scope.Clear();             options.Scope.Add("UserScope");             options.Scope.Add("ProductScope");             options.Scope.Add(OidcConstants.StandardScopes.OpenId);             options.Scope.Add(OidcConstants.StandardScopes.Profile);             //options.Scope.Add(OidcConstants.StandardScopes.Email);             //options.Scope.Add(OidcConstants.StandardScopes.Phone);             //options.Scope.Add(OidcConstants.StandardScopes.Address);             options.SaveTokens = true; //表示Token要存储         });          services.AddControllersWithViews().AddRazorRuntimeCompilation();         services.AddControllers().AddJsonOptions(options =&gt;         {             options.JsonSerializerOptions.Encoder = JavaScriptEncoder.Create(UnicodeRanges.All);         });     }      // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.     public void Configure(IApplicationBuilder app, IWebHostEnvironment env)     {         if (env.IsDevelopment())         {             app.UseDeveloperExceptionPage();         }         else         {             app.UseExceptionHandler("/Home/Error");         }         app.UseStaticFiles();          app.UseRouting();          app.UseAuthentication();          app.UseAuthorization();          app.UseHttpsRedirection();          app.UseEndpoints(endpoints =&gt;         {             endpoints.MapControllerRoute(                 name: "default",                 pattern: "{controller=Home}/{action=Index}/{id?}");         });     } }</code></pre> <p><strong>（2）_Layout.cshtml添加 获取用户按钮、注销按钮</strong></p> <pre><code class="language-HTML">&lt;div class="navbar-collapse collapse d-sm-inline-flex justify-content-between"&gt;     &lt;ul class="navbar-nav flex-grow-1"&gt;         &lt;li class="nav-item"&gt;             &lt;a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index"&gt;Home&lt;/a&gt;         &lt;/li&gt;         &lt;li class="nav-item"&gt;             &lt;a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy"&gt;Privacy&lt;/a&gt;         &lt;/li&gt;         &lt;li class="nav-item"&gt;             &lt;a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="User"&gt;UserApi&lt;/a&gt;         &lt;/li&gt;     &lt;/ul&gt;     &lt;a class="nav-link text-dark float-right" asp-area="" asp-controller="Home" asp-action="Logout"&gt;Logout&lt;/a&gt; &lt;/div&gt;</code></pre> <p><strong>（3）HomeController添加对应功能，需要认证的方法加上特性</strong><code>[Authorize]</code></p> <pre><code class="language-C#">[Authorize] public IActionResult Privacy() {     return View(); }  [Authorize] public async Task&lt;IActionResult&gt; User() {     var client = new HttpClient();     var accessToken = await HttpContext.GetTokenAsync(OpenIdConnectParameterNames.AccessToken);     if (string.IsNullOrEmpty(accessToken))     {         return Json(new { msg = "accesstoken 获取失败" });     }     client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);     var httpResponse = await client.GetAsync("https://localhost:8000/User/Get");     var result = await httpResponse.Content.ReadAsStringAsync();     if (!httpResponse.IsSuccessStatusCode)     {         ViewBag.Result = new { msg = "请求 User/Get 失败", error = result };     }     ViewBag.Result = new { msg = "成功", data = result };     return View(); }  //注销 public IActionResult Logout() {     return SignOut("Cookies", "oidc"); }</code></pre> <p><strong>（4）修改Privacy.cshtml</strong></p> <pre><code class="language-HTML">@{     ViewData["Title"] = "Privacy Policy"; } &lt;h1&gt;@ViewData["Title"]&lt;/h1&gt;  @using Microsoft.AspNetCore.Authentication  &lt;h2&gt;Claims&lt;/h2&gt;  &lt;dl&gt;     @foreach (var claim in User.Claims)     {         &lt;dt&gt;@claim.Type&lt;/dt&gt;         &lt;dd&gt;@claim.Value&lt;/dd&gt;     } &lt;/dl&gt;  &lt;h2&gt;Properties&lt;/h2&gt;  &lt;dl&gt;     @foreach (var prop in (await Context.AuthenticateAsync()).Properties.Items)     {         &lt;dt&gt;@prop.Key&lt;/dt&gt;         &lt;dd&gt;@prop.Value&lt;/dd&gt;     } &lt;/dl&gt;</code></pre> <p><strong>（5）效果图</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/1bcc4757cca29439733e63129163e119.jpg" alt="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式"></p> <h3 id="5混合模式">5、混合模式</h3> <p><strong>混合模式（Hybrid Flow）</strong></p> <blockquote> <p>它为我们提供了两全其美的优势，身份令牌通过浏览器传输，因此客户端可以在进行任何更多工作之前对其进行验证。如果验证成功，客户端会通过令牌服务的以获取访问令牌</p> </blockquote> <p><strong>（1）安装</strong><code>IdentityServer4.AccessTokenValidation、Microsoft.AspNetCore.Authentication.OpenIdConnect</code><strong>，修改Startup</strong></p> <pre><code class="language-C#">public class Startup {     public Startup(IConfiguration configuration)     {         Configuration = configuration;     }      public IConfiguration Configuration { get; }      // This method gets called by the runtime. Use this method to add services to the container.     public void ConfigureServices(IServiceCollection services)     {         //关闭Jwt映射         JwtSecurityTokenHandler.DefaultMapInboundClaims = false;         //注册授权         services.AddAuthentication(options =&gt;         {             options.DefaultScheme = "Cookies";             options.DefaultChallengeScheme = "oidc";         })         .AddCookie("Cookies")         .AddOpenIdConnect("oidc", options =&gt;         {             options.Authority = "https://localhost:5000";       //认证服务             options.RequireHttpsMetadata = true;                //必须使用Https，否则用户无法登录             options.ClientId = "Hybrid";             options.ClientSecret = "Hybrid";             options.ResponseType = "code id_token";             options.Scope.Clear();             options.Scope.Add("UserScope");             options.Scope.Add("ProductScope");             options.Scope.Add(OidcConstants.StandardScopes.OpenId);             options.Scope.Add(OidcConstants.StandardScopes.Profile);             //options.Scope.Add(OidcConstants.StandardScopes.Email);             //options.Scope.Add(OidcConstants.StandardScopes.Phone);             //options.Scope.Add(OidcConstants.StandardScopes.Address);             //options.Scope.Add(OidcConstants.StandardScopes.0fflineAccess);//获取到刷新Token             options.SaveTokens = true; //表示Token要存储         });          services.AddControllersWithViews().AddRazorRuntimeCompilation();     }      // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.     public void Configure(IApplicationBuilder app, IWebHostEnvironment env)     {         if (env.IsDevelopment())         {             app.UseDeveloperExceptionPage();         }         else         {             app.UseExceptionHandler("/Home/Error");         }         app.UseStaticFiles();          app.UseRouting();          app.UseAuthentication();          app.UseAuthorization();          app.UseHttpsRedirection();          app.UseEndpoints(endpoints =&gt;         {             endpoints.MapControllerRoute(                 name: "default",                 pattern: "{controller=Home}/{action=Index}/{id?}");         });     } }</code></pre> <p><strong>（2）_Layout.cshtml添加 获取产品、注销按钮</strong></p> <pre><code class="language-HTML">&lt;div class="navbar-collapse collapse d-sm-inline-flex justify-content-between"&gt;     &lt;ul class="navbar-nav flex-grow-1"&gt;         &lt;li class="nav-item"&gt;             &lt;a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index"&gt;Home&lt;/a&gt;         &lt;/li&gt;         &lt;li class="nav-item"&gt;             &lt;a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy"&gt;Privacy&lt;/a&gt;         &lt;/li&gt;         &lt;li class="nav-item"&gt;             &lt;a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Product"&gt;ProductApi&lt;/a&gt;         &lt;/li&gt;     &lt;/ul&gt;     &lt;a class="nav-link text-dark float-right" asp-area="" asp-controller="Home" asp-action="Logout"&gt;Logout&lt;/a&gt; &lt;/div&gt;</code></pre> <p><strong>（3）HomeController添加对应功能，需要认证的方法加上特性</strong><code>[Authorize]</code></p> <pre><code class="language-C#">[Authorize] public IActionResult Privacy() {     return View(); } [Authorize] public async Task&lt;IActionResult&gt; Product() {     var client = new HttpClient();     var accessToken = await HttpContext.GetTokenAsync(OpenIdConnectParameterNames.AccessToken);     if (string.IsNullOrEmpty(accessToken))     {         return Json(new { msg = "accesstoken 获取失败" });     }     client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);     var httpResponse = await client.GetAsync("https://localhost:9000/Product/Get");     var result = await httpResponse.Content.ReadAsStringAsync();     if (!httpResponse.IsSuccessStatusCode)     {         ViewBag.Result = new { msg = "请求 User/Get 失败", error = result };     }     ViewBag.Result = new { msg = "成功", data = result };     return View(); }  //注销 public IActionResult Logout() {     return SignOut("Cookies", "oidc"); }</code></pre> <p><strong>（4）修改Privacy.cshtml</strong></p> <pre><code class="language-HTML">@{     ViewData["Title"] = "Privacy Policy"; } &lt;h1&gt;@ViewData["Title"]&lt;/h1&gt;  @using Microsoft.AspNetCore.Authentication  &lt;h2&gt;Claims&lt;/h2&gt;  &lt;dl&gt;     @foreach (var claim in User.Claims)     {         &lt;dt&gt;@claim.Type&lt;/dt&gt;         &lt;dd&gt;@claim.Value&lt;/dd&gt;     } &lt;/dl&gt;  &lt;h2&gt;Properties&lt;/h2&gt;  &lt;dl&gt;     @foreach (var prop in (await Context.AuthenticateAsync()).Properties.Items)     {         &lt;dt&gt;@prop.Key&lt;/dt&gt;         &lt;dd&gt;@prop.Value&lt;/dd&gt;     } &lt;/dl&gt;</code></pre> <p><strong>（5）效果图</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f029bd6ff0f562b2c1707ac666b759b5.jpg" alt="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式"></p> <h2 id="四问题踩坑">四、问题踩坑</h2> <h3 id="1https">1、Https</h3> <p><strong>Demo全部用的Https，Mvc客户端配置</strong><code>RequireHttpsMetadata = true</code><strong>如果使用http遇到认证服无法务登录问题，可参考以下地址</strong><br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/i3yuan/p/14033016.html#autoid-20-0-0"  target="_blank" rel="nofollow">https://www.cnblogs.com/i3yuan/p/14033016.html#autoid-20-0-0</a></p> <h3 id="2responsetype">2、ResponseType</h3> <p><strong>授权码模式、混合模式需要修改客户端配置ResponseType，</strong><code>ResponseType = "code" 、 ResponseType = "code id_token"</code></p> <h3 id="3requirepkce">3、RequirePkce</h3> <p><strong>混合模式需要修改对应服务端注册客户端时配置</strong><code>RequirePkce = false</code><strong>，这样不需要客户端提供code challeng</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/10587f123d7e41d981598e2f68331ed8.jpg" alt="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式"></p> <h3 id="4其他error">4、其他Error</h3> <p><strong>出现错误大概率是客户端、服务端配置项问题，仔细对比一下就OK了</strong></p> <h2 id="五前人栽树后人乘凉">五、前人栽树，后人乘凉</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/i3yuan/category/1777690.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/i3yuan/category/1777690.html</a></p> <h2 id="六代码已上传">六、代码已上传</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/WinterSir/IdentityServer4.GrantTypesDemo"  target="_blank" rel="nofollow">https://github.com/WinterSir/IdentityServer4.GrantTypesDemo</a></p> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1638.htm">python之33个关键字详解_Python之33个关键字是哪些</a></p>
                                                        <p>下一个：<a href="/html/category/article-1920.htm">我们如何在Java中实现自定义HashSet</a></p>
                                                    </div>

                                                <div class="panel panel-default mt-5">
                            <div class="panel-heading">
                                <h3 class="m-0">推荐文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0">
                                                                        <li class="py-2"><a href="/html/category/article-1360.htm">Gin增删改查demo</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1292.htm">Flutter实现心动的动画特效_Android</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1262.htm">Linux里面磁盘文件咋删除呀,清理Linux磁盘空间的方法有哪些？</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1255.htm">将HTML5 SVG对准屏幕中心</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1249.htm">Java修饰符abstract与static及final的精华总结_java</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1237.htm">win11系统怎么查看硬盘型号</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1235.htm">Spring全家桶-Spring Security之自定义表单，认证，鉴权</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1133.htm">将eclipse里的springboot项目打包成jar包部署到服务器上</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1094.htm">Echarts在vue中的基本使用以及常用配置</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1073.htm">node.js &#8211; 路由、中间件、mysql</a></li>
                                                                    </ul>
                            </div>
                        </div>
                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1962.htm" title="记录detector2使用中的PyYAML报错">记录detector2使用中的PyYAML报错</a></li>
                        <li class="py-2"><a href="/html/category/article-1961.htm" title="python自动化测试工具selenium使用指南">python自动化测试工具selenium使用指南</a></li>
                        <li class="py-2"><a href="/html/category/article-2247.htm" title="Vue刷新当前页面几种方式">Vue刷新当前页面几种方式</a></li>
                        <li class="py-2"><a href="/html/category/article-2248.htm" title="vue 详情页返回列表，过滤查询条件保留">vue 详情页返回列表，过滤查询条件保留</a></li>
                        <li class="py-2"><a href="/html/category/article-1319.htm" title="Web前端：Ruby On Rails与JavaScript的主要差异">Web前端：Ruby On Rails与JavaScript的主要差异</a></li>
                        <li class="py-2"><a href="/html/category/article-1349.htm" title="父组件调用子组件的方法-子组件向父组件传值">父组件调用子组件的方法-子组件向父组件传值</a></li>
                        <li class="py-2"><a href="/html/category/article-2832.htm" title="pytorch 自动构建任意层的深度神经网络(DNN)">pytorch 自动构建任意层的深度神经网络(DNN)</a></li>
                        <li class="py-2"><a href="/html/category/article-1305.htm" title="Kafka delivery保证(kafka消息投递保证)">Kafka delivery保证(kafka消息投递保证)</a></li>
                        <li class="py-2"><a href="/html/category/article-1318.htm" title="vue项目中,如何实现excel的导入导出excel导入功能-组件封装">vue项目中,如何实现excel的导入导出excel导入功能-组件封装</a></li>
                        <li class="py-2"><a href="/html/category/article-2537.htm" title="基于全志A40i开发板Linux-RT内核应用开发教程">基于全志A40i开发板Linux-RT内核应用开发教程</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>