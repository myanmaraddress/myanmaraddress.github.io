<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1193.htm" />
    <title>Vert.X CompositeFuture 用法_在线工具 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>Vert.X CompositeFuture 用法_在线工具</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/xcblog/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<p>CompositeFuture 是一种特殊的 Future，它可以包装一个 Future 列表，从而让一组异步操作并行执行；然后协调这一组操作的结果，作为 CompositeFuture 的结果。本文将介绍 CompositeFuture 的用法以及几种协调方式，掌握这些内容有助于解决多个 Future 的整合问题。</p> <h2 id="1-概念">1. 概念</h2> <p>开发人员从两个方面关注一个 Future：状态和结果。CompositeFuture 是 Future，同样要从这两个方面关注它。</p> <p>CompositeFuture 的结果（消息）类型是 CompositeFuture 本身，也就是说<code>CompositeFuture#result()</code> 返回值类型固定是 CompositeFuture。它可以用来表示一组结果，可以通过<code>list()</code>或<code>causes()</code> 一次性读取一组结果或异常，也可以通过<code>resultAt(index)</code>或<code>cause(index)</code>读取单个结果或异常。</p> <pre><code class="language-java">CompositeFuture cf = CompositeFuture.all(future1, future2); cf.onSuccess(res -&gt; {     CompositeFuture result = cf.result(); // 它的结果也是 CompositeFuture 类型     List&lt;Double&gt; results = result.list(); // 一次性读取一组结果     List&lt;Throwable&gt; cause = result.causes(); // 一次性读取一组异常     Double r1 = result.resultAt(0); // 读取第 0 个 Future 的结果     Throwbale t1 = result.cause(0); // 读取第 0 个 Future 的异常 });</code></pre> <p>CompositeFuture 的状态随着列表中 Future 状态的变化而变化。例如：当列表中所有 Future 都成功完成时，CompositeFuture 才是成功完成；或者，当列表中只要有一个 Future 成功完成时，CompositeFuture 就是成功完成。</p> <p>CompositeFuture 作为 Future 协调器，提供了 all, any, join 三种协调方式。所谓协调，就是把一组 Future 包装成一个新的 Future，即 CompositeFuture，它的状态随着所包装列表中 Future 状态的变化而变化。</p> <p>下面通过几种场景示例详细介绍这几种协调方式。</p> <h2 id="2-all">2. all</h2> <p>假如有一个金融系统，它有一个功能是统计某个客户的银行存款总额，需要向各个不同的银行系统发送余额查询请求，然后把这些请求的返回结果相加作为最终结果。一种高效的方式是并行发送请求，然后在所有请求都有结果时将结果汇总。使用 CompositeFuture 的 all 操作可以很方便地达到这个目的。</p> <pre><code class="language-java">Future&lt;Double&gt; f1 = queryBalance("bank_a", "Robothy"); Future&lt;Double&gt; f2 = queryBalance("bank_b", "Robothy"); CompositeFuture future = CompositeFuture.all(f1, f2); future.map(results -&gt; { // results 是一个 CompositeFuture     Double balance1 = results.resultAt(0);     Double balance2 = results.resultAt(1);     return balance1 + balance2; }).onSuccess(totalBalance -&gt; System.out.println("Total balance is " + totalBalance))   .onFailure(Throwable::printStackTrace);</code></pre> <p>其中 queryBalance 的方法签名：</p> <pre><code class="language-java">Future&lt;Double&gt; queryBalance(String bank, String username);</code></pre> <p>queryBalance 返回的是 Future，<code>CompositeFuture#all()</code> 把两个 Future 包装了起来，返回一个 CompositeFuture，当两个 Future 都成功完成时，这个 CompositeFuture 才算成功完成；随后转换操作 map 所设置的同步函数得以执行，通过 resultAt 方法读取结果，并将结果相加，作为总余额返回。此外，两个 queryBalance 并行执行。</p> <p>上面这个例子只从 2 个银行获取余额，实际上，每个客户开会行的数量是不定的，一个客户通常对应着一个银行列表。对于这种情况，可以将多个 Future 放到一个 List 当中，再通过<code>CompositeFuture#all(List&lt;Future&gt; futures)</code>方法对一个 Future 列表进行包装。</p> <pre><code class="language-java">List&lt;String&gt; banks = Arrays.asList("bank1", "bank2", "bank3", ...); List&lt;Future&gt; futureList = banks.stream().map(bank -&gt; queryBalance(bank, "Robothy"))     .collect(Collectors.toList()); CompositeFuture.all(futureList)     .map(results -&gt; {         Double totalBalance = 0.0;         List&lt;Double&gt; balanceList = results.list();         for (Double balance : balanceList) {             totalBalance += balance;         }         return totalBalance;     })     .onSuccess(totalBalance -&gt; System.out.println("Total balance is " + totalBalance))   	.onFailure(Throwable::printStackTrace);</code></pre> <p>上面代码中，客户 "Robothy" 对应着一个银行列表，通过流操作把银行列表转化为<code>List&lt;Future&gt; futureList</code>。随后通过<code>CompositeFuture#all</code> 对这个 Future 列表进行包装，当列表中的 Future 全部成功完成时，all 返回的 CompositeFuture 才算成功完成。在读取结果的时候，这里使用了<code>list()</code>方法一次性读取所有 Future 的结果。</p> <p>CompositeFuture 不仅能够协调结果类型相同的多个 Future，还可以协调结果类型不同的 Future。例如：下面例子以并行的方式获取用户信息和账户信息。</p> <pre><code class="language-java">Future&lt;User&gt; f1 = getUserByName("Robothy"); Future&lt;Account&gt; f2 = getAccountByName("Robothy"); CompositeFuture.all(f1, f2)     .onSuccess(results -&gt; {         User user = resuts.resultAt(0);         Account account = results.resultAt(1);     })     .onFailure(Throwable::printStackTrace);</code></pre> <p>通过<code>CompositeFuture#all</code> 包装得到 Future 列表都已成功完成时，<code>all()</code> 返回的 CompositeFuture 才算完成；当其中一个 Future 失败时，CompositeFuture 立即失败。</p> <h2 id="3-join">3. join</h2> <p>join 是另一种协调方式，当它包装的所有 Future 都已成功完成时，<code>join()</code> 返回的 CompositeFuture 才算成功完成。当其中一个 Future 失败，CompositeFuture 在等待所有 Future 都（成功或失败）完成之后失败。</p> <p>下面这个例子的目的是找到网络延迟最小的服务器。</p> <pre><code class="language-java">List&lt;String&gt; hosts = Arrays.asList("10.0.1.123", "10.0.1.124", "10.0.1.125", ...); // 异步函数 ping 将 host 映射为 Future&lt;Long&gt; List&lt;Future&gt; futures = hosts.stream().map(host -&gt; ping(host)).collect(Collectors.toList()); CompositeFuture cf = CompositeFuture.join(futures); cf.onComplete(res -&gt; { // 这里是 onComplete，无论 cf 成功还是失败，都将执行。     CompositeFuture delays = res.result();     Long minDelay = Long.MAX_VALUE;     int minDelayIdx = -1;     for (int i=0; i&lt;delays.size(); i++) {         Long delay = delays.resultAt(i);         if (null != delay) { // 第 i 个 Future 成功完成（如果失败， delay 为 null）             if (delay &lt; minDelay) {                 minDelay = delay;                 minDelayIdx = i;             }         }     }          if (minDelayIdx != -1) {         System.out.println("Min delay: " + minDelay + ", server: " + hosts.get(minDelayIdx));     } else {         System.out.println("All servers are unreachable.");     } }) .onFailure(Throwable::printStackTrace);</code></pre> <p>join 和 all 的区别在于：当包装的 Future 列表中有 1 个失败时，<code>all()</code> 得到的 CompositeFuture 立即失败，而<code>join()</code>所包装的 CompositeFuture 会等待列表中的所有 Future 都完成时才失败。</p> <p>此外，CompositeFuture 包装了多个 Future，意味着可能会有多个失败的 Future，而<code>Future#onFailure</code> 只能够处理一个异常对象。这个异常对象是失败 Future 中，索引号最小的 Throwable 对象，并非最先失败的 Future 对应的 Throwable。例如下面这个例子总是输出 "f1 error"。</p> <pre><code class="language-java">CompositeFuture.join(         Future.future(promise -&gt; promise.fail(new RuntimeException("f1 error"))),         Future.future(promise -&gt; promise.fail(new RuntimeException("f2 error")))     )      .onFailure(cause -&gt; System.err.println(cause.getMessage())); // 总是输出 f1 error   }</code></pre> <p>要处理每个异常对象，需要在 onComplete 设置的处理器中进行操作。</p> <pre><code class="language-java">CompositeFuture.join(f1, f2, ...)     .onComplete(res -&gt; {         CompositeFuture results = res.result();         for (int i=0; i&lt;results.size(); i++) {             Throwbale cause = results.cause(i);             if (null != cause) { // 第 i 个 Future 失败了                 cause.printStackTrace();             }         }     });</code></pre> <h2 id="4-any">4. any</h2> <p>all 和 join 都需要在列表中所有的 Future 都成功的情况下，CompositeFuture 才算成功，而 any 只要有一个 Future 成功了，CompositeFuture 就会立即成功完成；当所有 Future 都失败了，CompositeFuture 才是失败。</p> <p>下面这个例子表示客户端向一个分布式系统的多个副本节点发送相同的消息，只要有一个节点返回成功，则表示消息发送成功。</p> <pre><code class="language-java">String msg = "Hello"; List&lt;String&gt; hosts = Arrays.asList("10.0.0.1", "10.0.0.2", ...); List&lt;Future&gt; futures = hosts.stream().map(host -&gt; send(host, msg)).collect(Collectors.toList()); CompositeFuture.any(futures)     .onSuccess(results -&gt; {         for (int i=0; i&lt;results.size(); i++) {             if (null != results.resultAt(i)) {                 System.out.println(hosts.get(i) + " received message.");             }         }     })     .onFailure(Throwable::printStackTrace);</code></pre> <h2 id="5-小结">5. 小结</h2> <p>CompositeFuture 作为 Future 的子接口，和普通 Future 一样可以处理消息和转化为另一个 Future 的能力。特殊的是，它的消息类型也是 CompositeFuture，它的状态随着所包装的若干 Future 状态的变化而变化。</p> <p>CompositFuture 包装 Future 的方式或者说协调方式有三种：all, join, any。需要根据不同的应用场景来选择不同的包装方式。</p> <ul> <li><strong>all</strong>： 所有的 Future 都成功完成时，才算成功完成；只要有一个 Future 失败，则立即失败；</li> <li><strong>join</strong>: 所有的 Future 都成功完成时，才算成功完成；有 Future 失败时，等待所有的 Future 都完成才完成；</li> <li><strong>any</strong>: 只要有一个 Future 成功完成，则立即成功完成；所有 Future 都失败时，才算失败</li> </ul> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1192.htm">AJAX原理以及axios、fetch区别实例详解_AJAX相关</a></p>
                                                        <p>下一个：<a href="/html/category/article-1194.htm">feign接口调用使用header</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1315.htm" title="关于对称算法中数据的填充模式">关于对称算法中数据的填充模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1319.htm" title="Web前端：Ruby On Rails与JavaScript的主要差异">Web前端：Ruby On Rails与JavaScript的主要差异</a></li>
                        <li class="py-2"><a href="/html/category/article-1306.htm" title="MeteoInfo-Java解析与绘图教程_java解析卫星FY-4A一级产品文件(HDF举例)_在线工具">MeteoInfo-Java解析与绘图教程_java解析卫星FY-4A一级产品文件(HDF举例)_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1265.htm" title="Linux网络服务之NFS共享服务">Linux网络服务之NFS共享服务</a></li>
                        <li class="py-2"><a href="/html/category/article-1267.htm" title="docker-compose 配置kafka_Docker Compose 引用环境变量">docker-compose 配置kafka_Docker Compose 引用环境变量</a></li>
                        <li class="py-2"><a href="/html/category/article-1274.htm" title="分享MongoDB修改oplog大小的4种方法_MongoDB_">分享MongoDB修改oplog大小的4种方法_MongoDB_</a></li>
                        <li class="py-2"><a href="/html/category/article-1280.htm" title="Arthas之实例操作">Arthas之实例操作</a></li>
                        <li class="py-2"><a href="/html/category/article-1298.htm" title="利用Redis实现防止接口重复提交功能">利用Redis实现防止接口重复提交功能</a></li>
                        <li class="py-2"><a href="/html/category/article-1318.htm" title="vue项目中,如何实现excel的导入导出excel导入功能-组件封装">vue项目中,如何实现excel的导入导出excel导入功能-组件封装</a></li>
                        <li class="py-2"><a href="/html/category/article-1277.htm" title="服务器安全加固 &#8211; Linux_在线工具">服务器安全加固 &#8211; Linux_在线工具</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>