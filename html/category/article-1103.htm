<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1103.htm" />
    <title>Envoy熔断限流实践基于Rainbond插件实现熔断 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>Envoy熔断限流实践基于Rainbond插件实现熔断</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<blockquote> <p>Envoy 可以作为 Sevice Mesh 微服务框架中的代理实现方案，Rainbond 内置的微服务框架同样基于 Envoy 实现。本文所描述的熔断实践基于 Rainbond 特有的插件机制实现。</p> </blockquote> <hr/> <h1 id="envoy-熔断机制介绍">Envoy 熔断机制介绍</h1> <p>熔断是分布式系统的重要组成部分。快速失败并尽快给下游施加压力，可以防止整个微服务系统进入糟糕的级联雪崩状态。这是Envoy 网格的主要优点之一，Envoy 在网络级别实现强制断路限制，而不必独立配置和编写每个应用程序。Envoy 支持各种类型的完全分布（不协调）的熔断：</p> <ul> <li> <p><strong>集群最大连接数(MaxConnections)</strong>：Envoy将为上游群集中的所有主机建立的最大连接数。实际上，这仅适用于HTTP/1.1群集，因为HTTP/2使用到每个主机的单个连接。</p> </li> <li> <p><strong>集群最大挂起请求数(MaxPendingRequests)</strong>：在等待就绪连接池连接时将排队的最大请求数。实际上，这仅适用于HTTP/1.1群集，因为HTTP/2连接池不会排队请求。HTTP/2请求立即复用。如果这个断路器溢出，集群的<code>upstream_rq_pending_overflow</code>计数器将增加。</p> </li> <li> <p><strong>集群最大请求数(MaxRequests)</strong>：在任何给定时间，群集中所有主机可以处理的最大请求数。实际上，这适用于HTTP/2群集，因为HTTP/1.1群集由最大连接断路器控制。如果这个断路器溢出，集群的<code>upstream_rq_pending_overflow</code>计数器将增加。</p> </li> <li> <p><strong>集群最大活动重试次数(MaxRetries)</strong>：在任何给定时间，集群中所有主机可以执行的最大重试次数。一般来说，我们建议积极进行断路重试，以便允许零星故障重试，但整体重试量不能爆炸并导致大规模级联故障。如果这个断路器溢出，集群的<code>upstream_rq_retry_overflow</code>计数器将递增。</p> </li> </ul> <p>每个熔断阈值可以按照每个上游集群和每个优先级进行配置和跟踪。这允许分布式系统的不同组件被独立地调整并且具有不同的熔断配置。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/fb0bc3b570be755a3af4dfd4b02271d6.jpg" alt="Envoy熔断限流实践基于Rainbond插件实现熔断"></p> <hr/> <h2 id="基于插件机制实现的熔断">基于插件机制实现的熔断</h2> <p>Rainbond 云原生应用管理平台通过自有的插件机制实现指定的微服务面向下游组件的熔断。</p> <p>默认安装的 Rainbond 中已经集成了<code>出口网络治理插件</code> 以及<code>综合网络治理插件</code>  ，二者都基于<code>Envoy</code> 实现，可以对安装了插件的微服务的网络出口方向进行较为全面的网络治理。其中就包括对熔断机制的实现。</p> <p>为了更好的描述这个过程，特意准备了一个示例。</p> <p>基于<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://locust.io"  target="_blank" rel="nofollow">Locust</a> 实现的压力生成器作为客户端，安装<code>综合网络治理插件</code>，Java-maven 组件作为服务端。压力生成器可以根据图形化界面设置并发用户数量，对 Java-maven 的服务地址进行压力测试，在此期间，我们可以收集到触发熔断机制时的各种现象。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f9f941d9e8a3e334e3c64550047c49e1.jpg" alt="Envoy熔断限流实践基于Rainbond插件实现熔断"></p> <p><code>综合网络治理插件</code> 的安装很简单，在请求发起的客户端（示例中的压力生成器）服务组件的插件页面中点击安装指定的插件即可。</p> <hr/> <h2 id="设定熔断阈值">设定熔断阈值</h2> <p>Java-maven 组件基于 Http/1.1 版本协议实现，根据首节对 Envoy 熔断机制的解释，我们可以通过限制<strong>集群最大连接数(MaxConnections)</strong> 和<strong>集群最大挂起请求数(MaxPendingRequests)</strong> 来设定熔断条件。</p> <p>点击压力生成器组件的插件，查看<code>出口网络治理插件</code> 配置，就可以进入其配置页面。</p> <p><code>综合网络治理插件</code> 分为入站网络治理配置和出站网络治理配置两个配置区域，熔断阈值的设定位于出站网络治理配置区域。</p> <p>为了突出实验的效果，我将<code>MaxConnections</code> 和<code>MaxPendingRequests</code> 两项均设定为较小的值。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/7099857455b7fbb2569b4302f50f9b53.jpg" alt="Envoy熔断限流实践基于Rainbond插件实现熔断"></p> <p>图中的配置，意味着集群最大连接数为 6 ，最大等待的请求数为 1 （这二者的默认值均为 1024）。这一配置，相当于为 Envoy 生成了以下配置：</p> <pre><code class="language-json">"circuit_breakers": {   "default": {     "max_connections": 6,     "max_pending_requests": 1   } }</code></pre> <p>为下游应用 Java-maven 的 5000 端口设定的<code>Domains</code> 也很重要，压力生成器可以通过访问<code>java-maven</code> 这一域名，将压力施加于 Java-maven 的 5000 端口。</p> <hr/> <h2 id="触发熔断">触发熔断</h2> <p>基于 Locust 的 Web 页面可以设定并发条件，在这个实验中，我为域名<code>http://java-maven</code> 设定了 97 个用户的并发请求。 Locust 的页面中会体现出发起请求的总数，以及处于失败状态的请求数。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/7f865018a37663479037e58f990c66b7.jpg" alt="Envoy熔断限流实践基于Rainbond插件实现熔断"></p> <p>所有的错误请求，都获得了由熔断机制返回的 503 状态码。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e139bf47b0606c8bbed94d8af701fa77.jpg" alt="Envoy熔断限流实践基于Rainbond插件实现熔断"></p> <p>为了确认压力生成器与 Java-maven 组件间的 Tcp 连接数量的确得到了限制，可以进入 Java</p> <p>-maven 的 Web终端用命令查看。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2377fca7dcb7bea82bc35ec13f3321b9.jpg" alt="Envoy熔断限流实践基于Rainbond插件实现熔断"></p> <p>命令中的<code>172.20.1.74</code> 是压力生成器组件的 Pod IP 地址。</p> <p>这里需要注意，不要去压力生成器中查询 Tcp 连接的生成数量，这个数量会多于 6 个，实际上应该是 97，因为发起请求的 Locust 进程会根据并发用户数量来生成 Tcp 连接，这个过程不受熔断机制限制，然而请求经过 Envoy 时，向 Java-maven 这一服务端，最终只会成功建立并保持 6 个连接。</p> <hr/> <h2 id="提升熔断阈值">提升熔断阈值</h2> <p>接下来，通过调整<code>综合网络治理插件</code> 的配置，调整熔断的阈值，将<code>MaxConnections</code> 提升至 66。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/36408249fdb6329e7ad421b5f1d20472.jpg" alt="Envoy熔断限流实践基于Rainbond插件实现熔断"></p> <p>点击更新配置后，改动将会直接生效，而不需要重启组件。</p> <p>在压力生成器中适当提升并发用户数到 250，重新开始发起压力测试，可以发现，不再生成错误请求。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/0e437b03425e79705e88c402be4aab34.jpg" alt="Envoy熔断限流实践基于Rainbond插件实现熔断"></p> <p>重新在 Java-maven 的环境中查询建立的 tcp 连接数量，发现已经不再是 6 ，而是有所上升，但并未到达阈值66。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/7063a28276d5ef8461ea9decfc7a18fb.jpg" alt="Envoy熔断限流实践基于Rainbond插件实现熔断"></p> <p>持续提升并发用户数量，则可以再次触发熔断。</p> <hr/> <h2 id="总结">总结</h2> <p>熔断是微服务网络治理体系中非常重要的一环。Rainbond 结合 Envoy 实现的 ServiceMesh 微服务框架中，通过插件实现的熔断机制易于上手，且支持动态生效，对操作人员非常友好。</p> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1102.htm">IDEA中web项目maven项目打war包的方式</a></p>
                                                        <p>下一个：<a href="/html/category/article-1104.htm">浅谈Spring @Order注解的使用</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1308.htm" title="HTML 5验证有用吗">HTML 5验证有用吗</a></li>
                        <li class="py-2"><a href="/html/category/article-3130.htm" title="python和hive结合使用">python和hive结合使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1293.htm" title="基于Spring接口，集成Caffeine+Redis两级缓存">基于Spring接口，集成Caffeine+Redis两级缓存</a></li>
                        <li class="py-2"><a href="/html/category/article-1320.htm" title="46.java编程思想——传递和返回对象 只读类">46.java编程思想——传递和返回对象 只读类</a></li>
                        <li class="py-2"><a href="/html/category/article-2831.htm" title="kerberos kafka 问题解决">kerberos kafka 问题解决</a></li>
                        <li class="py-2"><a href="/html/category/article-2832.htm" title="pytorch 自动构建任意层的深度神经网络(DNN)">pytorch 自动构建任意层的深度神经网络(DNN)</a></li>
                        <li class="py-2"><a href="/html/category/article-1920.htm" title="我们如何在Java中实现自定义HashSet">我们如何在Java中实现自定义HashSet</a></li>
                        <li class="py-2"><a href="/html/category/article-1310.htm" title="TensorFlow 模型保存/载入的两种方法">TensorFlow 模型保存/载入的两种方法</a></li>
                        <li class="py-2"><a href="/html/category/article-1289.htm" title="关于MySQL支持的所有字符集的查询是什么？">关于MySQL支持的所有字符集的查询是什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-2247.htm" title="Vue刷新当前页面几种方式">Vue刷新当前页面几种方式</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>