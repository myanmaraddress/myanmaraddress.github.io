<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1165.htm" />
    <title>Python格式化输出的三种方式：%、string.format()、f-string - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>Python格式化输出的三种方式：%、string.format()、f-string</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="htmledit_views"> <p id="main-toc"><strong>目录</strong></p> <p id="%E4%B8%80%E3%80%81%25%E6%96%B9%E5%BC%8F-toc" style="margin-left:0px;"><a href="#%E4%B8%80%E3%80%81%25%E6%96%B9%E5%BC%8F" rel="nofollow">一、%方式</a></p> <p id="%E4%BA%8C%E3%80%81string.format()%E6%96%B9%E5%BC%8F-toc" style="margin-left:0px;"><a href="#%E4%BA%8C%E3%80%81string.format%28%29%E6%96%B9%E5%BC%8F" rel="nofollow">二、string.format()方式</a></p> <p id="%E4%B8%89%E3%80%81f-string-toc" style="margin-left:0px;"><a href="#%E4%B8%89%E3%80%81f-string" rel="nofollow">三、f-string方式</a></p> <hr/> <p>活动地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://marketing.csdn.net/p/bdabfb52c5d56532133df2adc1a728fd"  title="CSDN21天学习挑战赛" rel="nofollow">CSDN21天学习挑战赛</a></p> <hr/> <h1 id="%E4%B8%80%E3%80%81%25%E6%96%B9%E5%BC%8F"><span style="color:#fe2c24;"><strong>一、%方式</strong></span></h1> <p><span style="color:#0d0016;">&nbsp; &nbsp; &nbsp; &nbsp;用%来格式化字符串是继承C语言的用法，</span><strong><span style="color:#fe2c24;">这种方式比较老旧，不推荐使用</span></strong><span style="color:#0d0016;">。但是，我们在Python语言中，也会看到用%格式化输出。为了弄清楚代码的意思，我们来看看它的用法。</span></p> <blockquote> <p><strong><span style="color:#0d0016;">使用格式：</span><span style="color:#fe2c24;"><strong>&nbsp;</strong>'格式字符串' %&nbsp;(输出项1，输出项2，…输出项n)&nbsp;</span></strong><span style="color:#0d0016;"> &nbsp; &nbsp;（注意：如果输出项只有一个，可以省略最后一对括号）</span></p> </blockquote> <blockquote> <p><strong><span style="color:#0d0016;">格式字符串：</span></strong></p> <p><img fetchpriority="high" decoding="async" alt="" height="100" src="http://img.555519.xyz/uploads/20230202/d1ff1556be4eddec8195267c1033076e.jpg"></p> </blockquote> <blockquote> <p><span style="color:#0d0016;"><strong>&nbsp;flags：可选，可供选择的值有：</strong></span></p> <p><span style="color:#0d0016;">为空 ：右对齐</span></p> <p><span style="color:#0d0016;">为-&nbsp; &nbsp; ：左对齐</span></p> </blockquote> <blockquote> <p><span style="color:#0d0016;"><strong>width：可选，输出字段的宽度</strong></span></p> </blockquote> <blockquote> <p><span style="color:#0d0016;"><strong>.precision：可选，小数点后面保留的位数precision（注意：如果是字符串输出，则为截取字符串位数precision）</strong></span></p> </blockquote> <blockquote> <p><strong>&nbsp;<span style="color:#0d0016;">typecode:必选，可供选择的值有：</span></strong></p> <p><span style="color:#0d0016;">c&nbsp; &nbsp; ：以字符形式输出，只输出一个字符</span></p> <p><span style="color:#0d0016;">s&nbsp; &nbsp; ：输出字符串</span></p> <p><span style="color:#0d0016;">d/i&nbsp; ：以带符号的十进制形式输出整数（正数不输出符号）</span></p> <p><span style="color:#0d0016;">f&nbsp; &nbsp; &nbsp;： 以小数形式输出单、双精度数，隐含输出6位小数</span></p> <p><span style="color:#0d0016;">o&nbsp; &nbsp; ：&nbsp;以八进制无符号形式输出整数</span></p> <p><span style="color:#0d0016;">e/E：以指数形式输出实数</span></p> <p><span style="color:#0d0016;">g/G：选用%f或%e格式中输出宽度较短的一种格式，不输出无意义的0</span></p> <p><span style="color:#0d0016;">x/X&nbsp;：以十六进制无符号形式输出整数（不输出前导符0x）,用x则输出十六进制数的a～f时以小写形式输出，用X时，则以大写字母输出</span></p> <p><span style="color:#0d0016;">%&nbsp; &nbsp;：当字符串中存在格式化标志时，需要用 %%表示一个百分号</span></p> </blockquote> <blockquote> <p><span style="color:#0d0016;">案例一：</span></p> <p class="img-center"><img decoding="async" alt="" height="64" src="http://img.555519.xyz/uploads/20230202/dd965fdec2240c17a17227e37fa9575b.jpg"></p> <p><span style="color:#0d0016;">输出：</span></p> <p><span style="color:#0d0016;">n1=13, n2=14&nbsp;</span></p> </blockquote> <blockquote> <p><span style="color:#0d0016;">案例二：</span></p> <p><span style="color:#0d0016;">&nbsp;</span></p> <p class="img-center"><img decoding="async" alt="" height="135" src="http://img.555519.xyz/uploads/20230202/0917dd1e00295fe91646d1eb9eeb42ea.jpg"></p> <p><span style="color:#0d0016;">输出：&nbsp;</span></p> <p><span style="color:#0d0016;">521.131<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;521.1<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;521.1<br /> 521.13 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br /> 521.13 &nbsp; &nbsp;</span></p> </blockquote> <p>&nbsp;</p> <blockquote> <p><span style="color:#0d0016;">案例三：</span></p> <p class="img-center"><img loading="lazy" decoding="async" alt="" height="92" src="http://img.555519.xyz/uploads/20230202/9a909f3ddb41e764e68e8a3257f29524.jpg"></p> <p><span style="color:#0d0016;">&nbsp;</span></p> <p><span style="color:#0d0016;">输出：</span></p> <p><span style="color:#0d0016;">我爱中华人民共和国<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 我爱<br /> 我爱 &nbsp;</span> &nbsp; &nbsp;</p> </blockquote> <p>&nbsp;</p> <h1 id="%E4%BA%8C%E3%80%81string.format()%E6%96%B9%E5%BC%8F"><span style="color:#fe2c24;">二、string.format()方式</span></h1> <p><span style="color:#0d0016;">用string.format()格式化字符串，</span><strong><span style="color:#fe2c24;">这种是新式的方法，官方推荐</span></strong><span style="color:#0d0016;">。</span>相对基本格式化输出采用‘%’的方法，format()功能更强大，该函数把字符串当成一个模板，通过传入的参数进行格式化，并且使用大括号‘{}’作为特殊字符代替‘%’</p> <p><strong><span style="color:#0d0016;">使用格式：</span>&nbsp;<span style="color:#fe2c24;">'{ }' .format(输出项[,格式字符串])</span></strong> , 其中格式字符串是可以选择项目。</p> <h1 id="%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%EF%BC%8C%E6%9C%89%E4%BB%A5%E4%B8%8B5%E7%A7%8D%C2%A0"><span style="color:#fe2c24;"><strong>基本用法，有以下5种&nbsp;</strong></span></h1> <hr/> <p><strong>1、位置替换：</strong></p> <pre><code class="language-python"># 按照先后顺序对format内容进行替换 print('岗位:{}, 性别:{}'.format('经理', '男')) # 输出：  # 岗位:经理, 性别:男</code></pre> <p><strong>2、 索引替换：</strong></p> <pre><code class="language-python"># 按照索引对format内容进行替换 print('岗位:{0}, 性别:{1}, 岗位：{0}'.format('经理', '男')) # 输出：  # 岗位:经理, 性别:男, 岗位：经理</code></pre> <p><strong>&nbsp;3、关键字匹配：</strong></p> <pre><code class="language-python"># 按照索引对format内容进行替换 print('岗位:{gw}, 性别:{xb}, 岗位：{gw}'.format(gw='经理', xb='男')) # 输出：  # 岗位:经理, 性别:男, 岗位：经理</code></pre> <p><strong>4、对象替换：&nbsp;</strong></p> <pre><code class="language-python"># =======对象为元组==========# tup1 = ("张三", "男") tup2 = ('李四', '女') print('名字:{0[0]}, 性别:{0[1]}; 名字：{1[0]}, 性别:{1[1]}'.format(tup1, tup2)) # 输出： # '名字:张三, 性别:男; 名字：李四, 性别:女'  # =======对象为列表=======# lis1=["张三","男"] lis2=["李四","女"] print('名字:{0[0]}, 性别:{0[1]}; 名字：{1[0]}, 性别:{1[1]}'.format(lis1, lis2)) # 输出： # '名字:张三, 性别:男; 名字：李四, 性别:女'  # =========== 字典 ==========# dic1 = {'姓名': '张三', '性别':'男'} dic2 = {'姓名': '李四', '性别':'女'} print('名字:{0[姓名]}, 性别:{0[性别]}; 名字：{1[姓名]}, 性别:{1[性别]}'.format(dic1, dic2)) # 输出： # '名字:张三, 性别:男; 名字：李四, 性别:女' </code></pre> <p><strong>5、嵌套替换&nbsp;</strong></p> <pre><code class="language-python">print('hello {3:{1}&gt;{2}} '.format('李四','*',10,'你好')) # 输出： hello ********你好  print('hello {0:{1}^{2}} '.format('李四','*',10,'你好')) # 输出： hello ****李四**** </code></pre> <hr/> <p>&nbsp;</p> <h1 id="%C2%A0%E5%B8%B8%E7%94%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%9C%89%E4%BB%A5%E4%B8%8B8%E7%A7%8D"><span style="color:#fe2c24;"><strong>&nbsp;常用格式化输出方式，有以下8种</strong></span></h1> <hr/> <p><strong>1、左对齐及填充</strong>&nbsp;</p> <pre><code class="language-python">#========== 左对齐 ==========# print('%-5s'%'张三' )             # 常数5表示占5个字符，-：表示左对齐 # 输出：'张三    ' print('{:&lt;5}'.format('张三'))    # 常数5表示占5个字符，&lt;：表示左对齐 # 输出：'张三    ' print('{:*&lt;5}'.format('张三') )  #  &lt;表示左对齐, *表示用*号进行填充, 常数5表示占5个字符 # 输出：'张三***'</code></pre> <p>&nbsp;<strong>2、右对齐及填充</strong></p> <pre><code class="language-python">#========== 右对齐 ===========# print('%5s'%'张三')               # 常数5表示占5个字符，默认右对齐 #输出：'   张三' print('{:&gt;5}'.format('张三') )    # 常数5表示占5个字符, &gt;:表示右对齐 # 输出：'   张三' print('{:*&gt;5}'.format('张三'))    # 常数5表示占5个字符, &gt;:表示右对齐, *表示用*号进行填充, # 输出：'***张三'</code></pre> <p><strong>&nbsp;3、居中对齐及填充</strong></p> <pre><code class="language-python">#========== 居中对齐 ===========# print('{:^5}'.format('张三')) # 输出：' 张三  ' print('{:*^5}'.format('张三') )   #  常数5表示占5个字符, &gt;: 表示右对齐, *表示用*号进行填充, # 输出：'*张三**'</code></pre> <p><strong>4、截取指定长度字符串&nbsp;</strong></p> <pre><code class="language-python">#===== 截取指定长度字符串 =====# print('%.2s'%'张三李四')  # 表示从字符串中截取两个字符 # 输出：'张三'</code></pre> <p><strong>5、百分号</strong>&nbsp;</p> <pre><code class="language-python">#===== 百分号-% =====# print('{:%}'.format(0.2))     # 默认输出保留6位小数 # 输出：'20.000000%' print("{:.2%}".format(0.02))  # 百分比计算 常用 # 输出：'2.00%'</code></pre> <p><strong>6、逗号分隔符</strong>&nbsp;</p> <pre><code class="language-python"># ===== 逗号分隔符 =====% print('{:,}'.format(1232434234234)) # 输出：'1,232,434,234,234'</code></pre> <p><strong>7、时间格式化输出&nbsp;</strong></p> <pre><code class="language-python"># ======== 对时间格式化输出 ========= # import datetime d = datetime.datetime(2022, 4, 29, 9, 52, 20) print('{:%Y-%m-%d %H:%M:%S}'.format(d)) # 输出： '2022-04-29 09:52:20' </code></pre> <hr/> <p>&nbsp;</p> <h1 id="%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2"><span style="color:#fe2c24;"><strong>格式转换</strong></span></h1> <hr/> <p>b&nbsp;- 二进制。将数字以2为基数进行输出。</p> <p>c&nbsp;- 字符。在打印之前将整数转换成对应的Unicode字符串。</p> <p>d&nbsp;- 十进制整数。将数字以10为基数进行输出。</p> <p>o - 八进制。将数字以8为基数进行输出。</p> <p>x - 十六进制。将数字以16为基数进行输出，9以上的位数用小写字母。</p> <p>e&nbsp;- 幂符号。用科学计数法打印数字。用'e'表示幂。</p> <p>g&nbsp;- 一般格式。将数值以fixed-point格式输出。当数值特别大的时候，用幂形式打印。</p> <p>n&nbsp;- 数字。当值为整数时和'd'相同，值为浮点数时和'g'相同。不同的是它会根据区域设置插入数字分隔符。</p> <p>% - 百分数。将数值乘以100然后以fixed-point('f')格式打印，值后面会有一个百分号。</p> <pre><code class="language-python">#  ======== 格式转换 =========  # print('{0:b}'.format(3)) # 输出：11 print('{:c}'.format(20)) # 输出： print('{:d}'.format(20)) # 输出：20 print('{:o}'.format(20)) # 输出：24 print('{:x}'.format(20)) # 输出：14 print('{:e}'.format(20)) # 输出：2.000000e+01 print('{:g}'.format(20.1)) # 输出：20.1 print('{:f}'.format(20)) # 输出：20.000000 print('{:n}'.format(20)) # 输出：20 print('{:%}'.format(20)) # 输出：2000.000000%</code></pre> <hr/> <h1 id="%E4%B8%89%E3%80%81f-string"><span style="color:#fe2c24;">三、f-string方式</span></h1> <p><span style="color:#0d0016;">&nbsp; &nbsp; &nbsp; &nbsp; 用f-string格式化字符串，</span><strong><span style="color:#fe2c24;">这种方式在Python3.6 及以上推荐使用</span></strong><span style="color:#0d0016;">。</span>python3.6引入了一种新的字符串格式化方式：f-string格式化字符串。从%s格式化到format格式化再到f-string格式化，格式化的方式越来越直观，f-string的效率也较前两个高一些，使用起来也比前两个简单一些。同时值得注意的是，f-string就是在format格式化的基础之上做了一些变动，核心使用思想和format一样。</p> <p><strong>1、基本使用，f-string用大括{ }表示被替换字段，其中直接填入替换内容即可</strong></p> <pre><code class="language-python">name = "Huang Wei" print(f"Hello, my name is {name}") # 输出：Hello, my name is Huang Wei  num = 2 print(f"I have {num} apples") # 输出：I have 2 apples  price = 95.5 print(f"He has {price}$") # 输出：He has 95.5$</code></pre> <p><strong>&nbsp;2、表达式求值与函数调用，f-string的大括号{ }可以填入表达式或调用函数，Python会求出其结果并填入返回的字符串内。</strong></p> <pre><code class="language-python">print(f"They have {2+5*2} apples") # 输出：They have 12 apples  name = "Huang Wei" print(f"my name is {name.lower()}") # 输出：my name is huang wei  import math print(f"Π的值为{math.pi}") # 输出：Π的值为3.141592653589793</code></pre> <p><strong>3、f-string中引号使用存在的问题 ，f-string大括号内使用的引号不能和大括号外的引号定界符引号冲突，需根据情况灵活切换使用单引号、双引号、单三引号、双三引号。</strong></p> <p>注意：只要大括号内外的引号不同，就没有问题。但是大括号中只能是但引号和 双引号 ，大括号外的引号定界符引号可以使用单引号、双引号、单三引号、双三引号。</p> <pre><code class="language-python">print(f'I am {"Huang Wei"}') # 输出：I am Huang Wei  print(f'''I am {'Huang Wei'}''') # 输出：I am Huang Wei  print(f"""I am {'Huang Wei'}""") # 输出：I am Huang Wei  print(f"""I am {"Huang Wei"}""") # 输出：I am Huang Wei  print(f'I am {'Huang Wei'}') # 输出： #     print(f'I am {'Huang Wei'}') #                    ^^^^^ # SyntaxError: f-string: expecting '}'</code></pre> <p><strong>4、大括号外的引号还可以使用\转义，但大括号内不能使用\转义。</strong></p> <pre><code class="language-python">print(f"he\'ll go to {'shang hai'}") # 输出：he'll go to shang hai  print(f"""he introduces himself {"I\'m Tom"}""") #输出： #     print(f"""he introduces himself {"I\'m Tom"}""") #                                                    ^ # SyntaxError: f-string expression part cannot include a backslash  print(f"""he introduces himself {"I'm Tom"}""") # 输出：he introduces himself I'm Tom</code></pre> <p><strong>&nbsp;5、f-string大括号外如果需要显示大括号，则应输入连续两个大括号{<!-- -->{ }}；大括号内需要引号，使用引号即可。</strong></p> <pre><code class="language-python">print(f"5{'{apples}'}") #输出：5{apples}  print(f"{<!-- -->{5}}{'apples'}") #输出：{5}apples</code></pre> <p><strong>6、f-string填充</strong></p> <p>当我们指定了字符串最终的长度的时候，如果现有的字符串没有那么长，那么我们就用某种字符（填充字符）来填满这个长度，这就是“填充”。</p> <p>6.1默认使用空格填充</p> <pre><code class="language-python">name = "Huang Wei" print(f"{name:&gt;20}") #输出：           Huang Wei  print(f"{name:&lt;20}") #输出：Huang Wei  print(f"{name:^20}") #输出：     Huang Wei</code></pre> <p>6.2用指定字符进行填充</p> <pre><code class="language-python">name = "Huang Wei" print(f"{name:_&gt;20}") #输出：___________Huang Wei  print(f"{name:_&lt;20}") #输出：Huang Wei___________  print(f"{name:_^20}") #输出：_____Huang Wei______</code></pre> <p>注意：填充分为左填充、右填充、居中填充。左填充表示在字符串左侧填充，右填充表示在字符串右侧填充，居中填充表示在字符串左右两侧对称填充。&gt;表示左填充，&lt;表示右填充，^表示居中填充。记忆方法：括号口朝左边，就表示左填充；括号口朝右边，就表示右填充。</p> <p><strong>7、f-string截断与填充的结合使用，当需要格式化的数据类型是“字符串”的时候，才会发生截断。</strong></p> <pre><code class="language-python"># 当发生截断的时候，如果不指定填充符，默认使用空格填充 print(f"{a:10.3}") #输出：Hel # 在发生截断的时候，使用指定的填充符 print(f"{a:_&gt;10.3}") #输出：_______Hel print(f"{a:_&lt;10.3}") #输出：Hel_______</code></pre> <p><strong>&nbsp;8、f-string针对date、datetime和time对象，进行年月日、时分秒等信息提取</strong></p> <pre><code class="language-python">from datetime import * # today()返回本地时间的一个date对象 a = date.today() print(f"{a:%Y-%m-%d}") #输出：2020-02-01</code></pre> <p>&nbsp;</p> </p></div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1164.htm">Unity制作一个小星球</a></p>
                                                        <p>下一个：<a href="/html/category/article-1166.htm">Java 9中Collectors.filtering()方法的重要性</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1297.htm" title="vue2设置保存自动执行run lint配置步骤">vue2设置保存自动执行run lint配置步骤</a></li>
                        <li class="py-2"><a href="/html/category/article-1306.htm" title="MeteoInfo-Java解析与绘图教程_java解析卫星FY-4A一级产品文件(HDF举例)_在线工具">MeteoInfo-Java解析与绘图教程_java解析卫星FY-4A一级产品文件(HDF举例)_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1288.htm" title="【EF框架】DbContext的使用">【EF框架】DbContext的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1267.htm" title="docker-compose 配置kafka_Docker Compose 引用环境变量">docker-compose 配置kafka_Docker Compose 引用环境变量</a></li>
                        <li class="py-2"><a href="/html/category/article-1320.htm" title="46.java编程思想——传递和返回对象 只读类">46.java编程思想——传递和返回对象 只读类</a></li>
                        <li class="py-2"><a href="/html/category/article-1276.htm" title="maven项目打包成war包并部署到tomcat上">maven项目打包成war包并部署到tomcat上</a></li>
                        <li class="py-2"><a href="/html/category/article-1303.htm" title="通过make生成执行文件的过程详解_在线工具">通过make生成执行文件的过程详解_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1293.htm" title="基于Spring接口，集成Caffeine+Redis两级缓存">基于Spring接口，集成Caffeine+Redis两级缓存</a></li>
                        <li class="py-2"><a href="/html/category/article-1285.htm" title="C语言栈与队列面试题详解_C 语言">C语言栈与队列面试题详解_C 语言</a></li>
                        <li class="py-2"><a href="/html/category/article-1298.htm" title="利用Redis实现防止接口重复提交功能">利用Redis实现防止接口重复提交功能</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">28</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>