<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-3738.htm" />
    <title>水平无限循环弹幕的实现 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>水平无限循环弹幕的实现</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="htmledit_views"> <div class="article-content"> <h2 class="heading">前言</h2> <p>在项目实践中应该有很多场景会用到弹幕，那么如何实现一个完美版本的弹幕呢？接下来我们原理加代码带你实现一个完整的弹幕组件(react版本)</p> <h2 class="heading">无限循环的水平弹幕实现原理</h2> <p>针对实现原理，这里我画了一张原理图，大家可以看一下：</p> <figure><figcaption></figcaption></figure> <p>水平弹幕的实现有两种情况：</p> <p>1、当弹幕的个数加起来的宽度不足以覆盖屏幕的可视化区域</p> <p>2、当弹幕的个数加起来的宽度超过屏幕的可视化区域</p> <p>针对以上两种情况我们有不同的展示效果，如下链接的展示效果：</p> <p>针对第一种情况，实现原理很简单，当从初始化位置开始滚动的时候，计算滚动的距离，当滚动结束后，立马让其回到初始化位置。</p> <p>第二种情况稍微复杂一些，我们需要利用人眼的视觉暂留效果，实现弹幕的偷梁换柱，具体怎么实现呢？</p> <ol> <li> <p>初始化位置在屏幕最右侧，也就是隐藏在屏幕外面，这一点和上一种情况一致</p> </li> <li> <p>我们需要使用一个计算好的速度做一次动画滑到屏幕的最左侧，也就是后面循环往复的动画的初始化位置，这个初始化位置和第一点的初始化位置不是同一个。 2.1. 计算这个速度很简单，只需要知道我们做完全部动画的时间以及弹幕的总长度，得到的便是平均速度，之后再乘以屏幕的可视化区域宽度</p> </li> <li> <p>需要计算好我们在原有弹幕个数的基础上需要补充多少个弹幕才能超过屏幕可视化区域，做这个步骤是因为，只有补充这些弹幕，才能保证补充的弹幕的第一个滑到最左侧的时候整个弹幕整体瞬间回到初始化位置的时候，不会让用户看出端倪，也就是没有顿挫感。</p> </li> <li> <p>定好keyframe的具体参数即可开始做动画。</p> </li> </ol> <h2 class="heading">实现的代码</h2> <p>实现的代码是一个组件，这个组件有兴趣的童鞋可以将其丰富化，增加更多的参数，支持各种方向的循环滚动。</p> <pre><code class="hljs bash copyable">class InfiniteScroll extends React.Component {<span class="hljs-function"><span class="hljs-title">componentDidMount</span></span>() {     const { animationName, scrollDirection } = this.props<span class="hljs-built_in">set</span>Timeout(() =&gt; {<span class="hljs-keyword">if</span> (this.scrollInstance) {         const appendElementWidth = []         const appendElement = []         const visibleWidth = this.scrollInstance.clientWidth         // 滚动的初始位置从视口的最右边开始，后面支持更多方向         const initPosition = visibleWidth<span class="hljs-built_in">let</span> scrollContainerWidth = 0<span class="hljs-built_in">let</span> isCoverViewPort =<span class="hljs-literal">false</span>         // 遍历滚动的所有元素<span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = 0; i &lt; this.scrollInstance.children.length; i += 1) {           const style = this.scrollInstance.children[i].currentStyle || window.getComputedStyle(this.scrollInstance.children[i])           // width 已经包含了border和padding，如果box-sizing变化了呢？           const width = this.scrollInstance.children[i].offsetWidth// or use style.width           const margin = parseFloat(style.marginLeft) + parseFloat(style.marginRight)            const clientWidth = (width + margin)           scrollContainerWidth += clientWidth           // 保存需要追加到原有滚动元素的列表后面<span class="hljs-keyword">if</span> (scrollContainerWidth &lt; visibleWidth * 2 &amp;&amp; !isCoverViewPort) {             appendElementWidth.push(clientWidth)             appendElement.push(this.scrollInstance.children[i].cloneNode(<span class="hljs-literal">true</span>))<span class="hljs-keyword">if</span> (scrollContainerWidth &gt;= visibleWidth &amp;&amp; !isCoverViewPort) {               isCoverViewPort =<span class="hljs-literal">true</span>             }           }         }         // 该参数记录是否弹幕的宽度超过了屏幕可视化区域的宽度         const isScrollWidthLargeViewPort = scrollContainerWidth &gt; visibleWidth          // const styleSheet = document.styleSheets[0]          // 注意这里的动画初始化位置两种情况是不一样的，在之前的步骤上有说过的(垂直方向的没实现，可以忽略掉~)         const keyframes = `         @keyframes<span class="hljs-variable">${animationName}</span>{           from{             transform:<span class="hljs-variable">${scrollDirection === 'horizon' ? `translateX(${isScrollWidthLargeViewPort ? 0 : initPosition}</span>px)` :<span class="hljs-string">'translateY(0px)'</span>};           }           to {             transform:<span class="hljs-variable">${scrollDirection === 'horizon' ? `translateX(-${scrollContainerWidth}</span>px)` : `translateX(-<span class="hljs-variable">${scrollContainerWidth}</span>px)`};           }         }         @-webkit-keyframes<span class="hljs-variable">${animationName}</span>{           from{             -webkit-transform:<span class="hljs-variable">${scrollDirection === 'horizon' ? `translateX(${isScrollWidthLargeViewPort ? 0 : initPosition}</span>px)` :<span class="hljs-string">'translateY(0px)'</span>};           }           to {             -webkit-transform:<span class="hljs-variable">${scrollDirection === 'horizon' ? `translateX(-${scrollContainerWidth}</span>px)` : `translateX(-<span class="hljs-variable">${scrollContainerWidth}</span>px)`};           }         }         `         const style = document.createElement(<span class="hljs-string">'style'</span>)         const head = document.head || document.getElementsByTagName(<span class="hljs-string">'head'</span>)[0]          style.type =<span class="hljs-string">'text/css'</span>         const textNode = document.createTextNode(keyframes);         style.appendChild(textNode);         head.appendChild(style)         // 如果css是external的话会报错：Uncaught DOMException: Failed to<span class="hljs-built_in">read</span> the<span class="hljs-string">'cssRules'</span> property from<span class="hljs-string">'CSSStyleSheet'</span>: Cannot access rules         // styleSheet.insertRule(keyframes, styleSheet.cssRules.length);         const previousWidth = scrollContainerWidth         // 这个计算之后scrollContainerWidth就会包含那些补充了的弹幕的宽度，所以需要保留一个原始值，供后面的过渡动画使用<span class="hljs-keyword">if</span> (isScrollWidthLargeViewPort) {           appendElement.map(node =&gt; this.scrollInstance.appendChild(node))           appendElementWidth.map(it =&gt; scrollContainerWidth += it)         }          // TODO: 动画的速度以后需要使用props         // 因为初始化位置在视口外，但是我们动画的初始位置都是在0px上，所以就会有一个时差出现，         // 因为在animation生效之前需要有一个过渡动画，二者的时间是相等的         const delay = (this.scrollInstance.children.length * 3 * visibleWidth) / previousWidth         const styleText = isScrollWidthLargeViewPort ? `         width:<span class="hljs-variable">${scrollContainerWidth}</span>px;         transform: translateX(0px);         -webkit-transform: translateX(0px);         transition:<span class="hljs-variable">${delay}</span>s linear;         -webkit-transition:<span class="hljs-variable">${delay}</span>s linear;         animation:<span class="hljs-variable">${animationName}</span><span class="hljs-variable">${this.scrollInstance.children.length * 3}</span>s linear<span class="hljs-variable">${delay}</span>s infinite;         -webkit-animation:<span class="hljs-variable">${animationName}</span><span class="hljs-variable">${this.scrollInstance.children.length * 3}</span>s linear<span class="hljs-variable">${delay}</span>s infinite;       ` : `       width:<span class="hljs-variable">${scrollContainerWidth}</span>px;       animation:<span class="hljs-variable">${animationName}</span><span class="hljs-variable">${this.scrollInstance.children.length * 3}</span>s linear infinite;       -webkit-animation:<span class="hljs-variable">${animationName}</span><span class="hljs-variable">${this.scrollInstance.children.length * 3}</span>s linear infinite;     `         this.scrollInstance.style.cssText = styleText       }     }, 500)   }<span class="hljs-function"><span class="hljs-title">render</span></span>() {     const { scrollContent, scrollItemClass, scrollClass, scrollDirection } = this.props      const scrollClasses = scrollDirection ===<span class="hljs-string">'vertical'</span> ? `scroll-list vertical<span class="hljs-variable">${scrollClass}</span>` : `scroll-list horizon<span class="hljs-variable">${scrollClass}</span>`<span class="hljs-built_in">return</span> (       &lt;div className={scrollClasses} ref={ref =&gt; this.scrollInstance = ref}&gt;         {           scrollContent.map((content, index) =&gt; (&lt;div key={index} className={scrollItemClass}&gt;{content}&lt;/div&gt;))         }       &lt;/div&gt;     )   } }<span class="copy-code-btn">复制代码</span></code></pre> <p>对应的CSS文件如下：</p> <pre><code class="hljs bash copyable">.scroll-list{   display: flex;   &amp;.horizon {     flex-direction: row;   }   &amp;.vertical{     flex-direction: column;   } }<span class="copy-code-btn">复制代码</span></code></pre> <p>完整的应用参考：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://link.juejin.im?target=https%3A%2F%2Fjsfiddle.net%2Flinxiaowu%2Feyacbts0%2F"  rel="nofollow">jsFiddle</a></p> <p>至此完整版的水平循环弹幕实现完毕，有问题的欢迎留言~~</p> </div> </div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-3737.htm">2.使用httpclient发起post请求</a></p>
                                                        <p>下一个：<a href="/html/category/article-3763.htm">idea配置tomcat启动web项目</a></p>
                                                    </div>

                                                <div class="panel panel-default mt-5">
                            <div class="panel-heading">
                                <h3 class="m-0">推荐文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0">
                                                                        <li class="py-2"><a href="/html/category/article-1359.htm">python 数据加载工作</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1244.htm">如果我们将包含NULL值的列名作为CONCAT()函数的参数之一传递，MySQL将返回什么？</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1227.htm">Spring Cloud 集成 Sleuth+Zipkin+Mysql</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1223.htm">从多线程的基础，到JDK8的异步编程，再到异步框架的选择</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1217.htm">go微服务框架Kratos简单使用总结</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1175.htm">Go能实现AOP吗</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1164.htm">Unity制作一个小星球</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1137.htm">springboot项目中Timestamp的使用方法</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1075.htm">【硬刚ES】ES基础（三十五）分页与遍历 &#8211; From, Size, Search_after &amp; Scroll API</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1068.htm">解决swagger文档接口404的问题</a></li>
                                                                    </ul>
                            </div>
                        </div>
                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1309.htm" title="sqlserver 中使用sqlcmd 执行几百M的.sql文件">sqlserver 中使用sqlcmd 执行几百M的.sql文件</a></li>
                        <li class="py-2"><a href="/html/category/article-1339.htm" title="分享MySQL生产库内存异常增高的排查过程_Mysql_">分享MySQL生产库内存异常增高的排查过程_Mysql_</a></li>
                        <li class="py-2"><a href="/html/category/article-1962.htm" title="记录detector2使用中的PyYAML报错">记录detector2使用中的PyYAML报错</a></li>
                        <li class="py-2"><a href="/html/category/article-2248.htm" title="vue 详情页返回列表，过滤查询条件保留">vue 详情页返回列表，过滤查询条件保留</a></li>
                        <li class="py-2"><a href="/html/category/article-1947.htm" title="Vant组件样式没有生效">Vant组件样式没有生效</a></li>
                        <li class="py-2"><a href="/html/category/article-3431.htm" title="Jackson 枚举序列化/反序列化">Jackson 枚举序列化/反序列化</a></li>
                        <li class="py-2"><a href="/html/category/article-1359.htm" title="python 数据加载工作">python 数据加载工作</a></li>
                        <li class="py-2"><a href="/html/category/article-1313.htm" title="二叉树与堆">二叉树与堆</a></li>
                        <li class="py-2"><a href="/html/category/article-1933.htm" title="vue组件间的传值，父传子，子传父，兄弟之间传值，跨级传值">vue组件间的传值，父传子，子传父，兄弟之间传值，跨级传值</a></li>
                        <li class="py-2"><a href="/html/category/article-3763.htm" title="idea配置tomcat启动web项目">idea配置tomcat启动web项目</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>