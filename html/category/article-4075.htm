<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-4075.htm" />
    <title>Java中的公平锁和非公平锁实现详解 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>Java中的公平锁和非公平锁实现详解</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#_1" rel="nofollow">前言</a></li> <li><a href="#ReentrantLock_24" rel="nofollow">ReentrantLock的可重入性分析</a></li> <li> <ul> <li><a href="#synchronized_28" rel="nofollow">synchronized的可重入性</a></li> <li><a href="#ReentrantLock_41" rel="nofollow">ReentrantLock的可重入性</a></li> </ul> </li> <li><a href="#ReentrantLock_85" rel="nofollow">ReentrantLock锁的实现分析</a></li> <li> <ul> <li><a href="#_87" rel="nofollow">公平锁和非公平锁</a></li> <li><a href="#FairSync_108" rel="nofollow">公平锁FairSync</a></li> <li><a href="#NonfairSync_129" rel="nofollow">非公平锁NonfairSync</a></li> </ul> </li> <li><a href="#ReentrantLock_142" rel="nofollow">ReentrantLock锁的释放</a></li> <li> <ul> <li><a href="#ReentrantLock_161" rel="nofollow">ReentrantLock等待队列中元素的唤醒</a></li> </ul> </li> <li><a href="#ReentrantLock_186" rel="nofollow">ReentrantLock内存可见性分析</a></li> <li> <ul> <li><a href="#CASvolatile_Java_198" rel="nofollow">CAS和volatile， Java并发的基石</a></li> <li><a href="#JSR133_225" rel="nofollow">JSR-133编译器编写手册</a></li> <li><a href="#ReentrantLock_248" rel="nofollow">ReentrantLock内存可见性</a></li> <li><a href="#CASvolatile_254" rel="nofollow">CAS的类似volatile内存屏障原理</a></li> </ul> </li> </ul> </div> <h1><a id="_1" rel="nofollow"></a>前言</h1> <p>Java语言中有许多原生线程安全的数据结构，比如<code>ArrayBlockingQueue</code>、<code>CopyOnWriteArrayList</code>、<code>LinkedBlockingQueue</code>，它们线程安全的实现方式并非通过<code>synchronized</code>关键字，而是通过<code>java.util.concurrent.locks.ReentrantLock</code>来实现。 刚好对这个很感兴趣， 因此写一篇博客详细分析此 “可重入锁实现原理”。<br /><code>ReentrantLock</code>的实现是基于其内部类<code>FairSync</code>(公平锁)和<code>NonFairSync</code>(非公平锁)实现的。 其可重入性是基于<code>Thread.currentThread()</code>实现的: 如果当前线程已经获得了执行序列中的锁， 那执行序列之后的所有方法都可以获得这个锁。</p> <hr/> <p>公平锁：</p> <ul> <li>公平和非公平锁的队列都基于锁内部维护的一个双向链表，表结点Node的值就是每一个请求当前锁的线程。公平锁则在于每次都是依次从队首取值。</li> <li>锁的实现方式是基于如下几点： <ul> <li>表结点<code>Node</code>和状态<code>state</code>的<code>volatile</code>关键字。</li> <li><code>sum.misc.Unsafe.compareAndSet</code>的原子操作(见附录)。</li> </ul> </li> </ul> <p>非公平锁：</p> <ul> <li>在等待锁的过程中， 如果有任意新的线程妄图获取锁，都是有很大的几率直接获取到锁的。</li> </ul> <blockquote> <p><code>ReentrantLock</code>锁都**<em>不会<em><em><em>使得线程中断，除非开发者自己设置了中断位。<br /><code>ReentrantLock</code>获取锁里面有</em>看似</em>自旋的代码，但是它</em>不是</em>自旋锁。<br /><code>ReentrantLock</code>公平与非公平锁都是属于排它锁。</p> </blockquote> <h1><a id="ReentrantLock_24" rel="nofollow"></a>ReentrantLock的可重入性分析</h1> <p>这里有一篇对锁介绍甚为详细的文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://blog.csdn.net/u013256816/article/details/51204385"  rel="nofollow">朱小厮的博客-Java中的锁</a>.</p> <h2><a id="synchronized_28" rel="nofollow"></a>synchronized的可重入性</h2> <p>参考这篇文章：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/qyp199312/article/details/78438273#synchronized__159"  rel="nofollow"> synchronized 锁实现</a>。</p> <hr/> <p>两者的原理基本类似，<code>synchronized</code>在不同的锁级别下， 重入的实现不一样。</p> <ul> <li>偏向锁：<code>Mark Word</code> 中记录的<code>ThreadId</code>。</li> <li>轻量级锁：<code>Mark Word</code> 指向的当前线程的锁记录。</li> <li>重量级锁：采用<code>Mark Word</code> 指向对比和<code>_recursions</code>累增加锁、减锁。</li> </ul> <p><code>ReentrantLock</code> 基于当前锁持有的线程对象<code>thread</code>， 然后对<code>state</code> 进行累计或者累减。和重量级锁的实现比较像。</p> <h2><a id="ReentrantLock_41" rel="nofollow"></a>ReentrantLock的可重入性</h2> <p>前言里面提到，<code>ReentrantLock</code>重入性是基于<code>Thread.currentThread()</code>实现的: 如果当前线程已经获得了锁， 那该线程下的所有方法都可以获得这个锁。<code>ReentrantLock</code>的锁依赖只有<code>NonfairSync</code>和<code>FairSync</code>两个实现类， 他们的锁获取方式大同小异。</p> <blockquote> <p>可重入性的实现基于下面代码片段的<code>else if</code> 语句</p> </blockquote> <pre><code>protected final boolean tryAcquire(int acquires) {     final Thread current = Thread.currentThread();     int c = getState();     if (c == 0) {         ...         // 尝试获取锁成功     }     else if (current == getExclusiveOwnerThread()) { 	    // 是当前线程，直接获取到锁。实现可重入性。         int nextc = c + acquires;         if (nextc &lt; 0)             throw new Error("Maximum lock count exceeded");         setState(nextc);         return true;     }     return false; }</code></pre> <p>此处有两个值需要关心：</p> <pre><code>    /**      * The current owner of exclusive mode synchronization.      * 持有该锁的当前线程      */     private transient Thread exclusiveOwnerThread;       -----------------两个值不在同一个类----------------           /**      * The synchronization state.      * 0： 初始状态-无任何线程得到了锁      * &gt; 0: 被线程持有， 具体值表示被当前线程持有的执行次数      *       * 这个字段在解锁的时候也需要用到。      * 注意这个字段的修饰词: volatile      */     private volatile int state;</code></pre> <h1><a id="ReentrantLock_85" rel="nofollow"></a>ReentrantLock锁的实现分析</h1> <h2><a id="_87" rel="nofollow"></a>公平锁和非公平锁</h2> <p><code>ReentrantLock</code> 的公平锁和非公平锁都委托了<code>AbstractQueuedSynchronizer#acquire</code> 去请求获取。</p> <pre><code>public final void acquire(int arg) {     if (!tryAcquire(arg) &amp;&amp;         acquireQueued(addWaiter(Node.EXCLUSIVE), arg))         selfInterrupt(); }</code></pre> <ul> <li><code>tryAcquire</code> 是一个抽象方法，是***公平与非公平***的实现原理所在。</li> <li><code>addWaiter</code> 是将当前线程结点加入等待队列之中。<strong>公平锁在锁释放后会严格按照等到队列去取后续值</strong>，<em>而非公平锁在对于新晋线程有很大优势</em>。</li> <li><code>acquireQueued</code> 在多次循环中尝试获取到锁或者将当前线程阻塞。</li> <li><code>selfInterrupt</code> 如果线程在阻塞期间发生了中断，调用<code>Thread.currentThread().interrupt()</code> 中断当前线程。</li> </ul> <blockquote> <p><code>ReentrantLock</code> 对线程的阻塞是基于<code>LockSupport.park(this);</code> (见<code>AbstractQueuedSynchronizer#parkAndCheckInterrupt</code>)。 先决条件是当前节点有限次尝试获取锁失败。</p> </blockquote> <p><strong>公平锁和非公平锁在说的获取上都使用到了<code>volatile</code> 关键字修饰的<code>state</code>字段， 这是保证多线程环境下锁的获取与否的核心。</strong><br /><strong>但是当并发情况下多个线程都读取到<code>state == 0</code>时，则必须用到CAS技术，一门CPU的原子锁技术，可通过CPU对共享变量加锁的形式，实现数据变更的原子操作。</strong><br /><strong>volatile 和 CAS的结合是并发抢占的关键。</strong></p> <h2><a id="FairSync_108" rel="nofollow"></a>公平锁FairSync</h2> <p>公平锁的实现机理在于每次有线程来抢占锁的时候，都会检查一遍有没有等待队列，如果有， 当前线程会执行如下步骤：</p> <pre><code>if (!hasQueuedPredecessors() &amp;&amp;     compareAndSetState(0, acquires)) {     setExclusiveOwnerThread(current);     return true; }</code></pre> <p>其中<code>hasQueuedPredecessors</code>是用于检查是否有等待队列的。</p> <pre><code>    public final boolean hasQueuedPredecessors() {         Node t = tail; // Read fields in reverse initialization order         Node h = head;         Node s;         return h != t &amp;&amp;             ((s = h.next) == null || s.thread != Thread.currentThread());     }</code></pre> <h2><a id="NonfairSync_129" rel="nofollow"></a>非公平锁NonfairSync</h2> <p>非公平锁在实现的时候多次强调随机抢占：</p> <pre><code>if (c == 0) {     if (compareAndSetState(0, acquires)) {         setExclusiveOwnerThread(current);         return true;     } }</code></pre> <p>与公平锁的区别在于新晋获取锁的进程会有多次机会去抢占锁。如果被加入了等待队列后则跟公平锁没有区别。</p> <h1><a id="ReentrantLock_142" rel="nofollow"></a>ReentrantLock锁的释放</h1> <p>ReentrantLock锁的释放是逐级释放的，也就是说在 可重入性 场景中，必须要等到场景内所有的加锁的方法都释放了锁， 当前线程持有的锁才会被释放！<br /> 释放的方式很简单， state字段减一即可：</p> <pre><code>protected final boolean tryRelease(int releases) {     //  releases = 1     int c = getState() - releases;     if (Thread.currentThread() != getExclusiveOwnerThread())         throw new IllegalMonitorStateException();     boolean free = false;     if (c == 0) {         free = true;         setExclusiveOwnerThread(null);     }     setState(c);     return free; }</code></pre> <h2><a id="ReentrantLock_161" rel="nofollow"></a>ReentrantLock等待队列中元素的唤醒</h2> <p>当当前拥有锁的线程释放锁之后， 且非公平锁无线程抢占，就开始线程唤醒的流程。<br /> 通过<code>tryRelease</code>释放锁成功，调用<code>LockSupport.unpark(s.thread);</code> 终止线程阻塞。<br /> 见代码：</p> <pre><code>private void unparkSuccessor(Node node) {     // 强行回写将被唤醒线程的状态     int ws = node.waitStatus;     if (ws &lt; 0)         compareAndSetWaitStatus(node, ws, 0);     Node s = node.next;     // s为h的下一个Node, 一般情况下都是非Null的     if (s == null || s.waitStatus &gt; 0) {         s = null;         // 否则按照FIFO原则寻找最先入队列的并且没有被Cancel的Node         for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)             if (t.waitStatus &lt;= 0)                 s = t;     }     // 再唤醒它     if (s != null)         LockSupport.unpark(s.thread); }</code></pre> <h1><a id="ReentrantLock_186" rel="nofollow"></a>ReentrantLock内存可见性分析</h1> <p>针对如下代码：</p> <pre><code>try {     lock.lock();     i ++; } finally {     lock.unlock(); }</code></pre> <p>可以发现哪怕在不使用<code>volatile</code>关键字修饰元素<code>i</code>的时候， 这里的<code>i</code> 也是没有并发问题的。</p> <h2><a id="CASvolatile_Java_198" rel="nofollow"></a>CAS和volatile， Java并发的基石</h2> <p>volatile 是Java语言的关键字， 功能是保证被修饰的元素(共享变量):</p> <blockquote> <p>任何进程在读取的时候，都会清空本进程里面持有的共享变量的值，强制从主存里面获取；<br /> 任何进程在写入完毕的时候，都会强制将共享变量的值写会主存。<br /> volatile 会干预指令重排。<br /> volatile 实现了JMM规范的 happen-before 原则。</p> </blockquote> <p>在多核多线程CPU环境下， CPU为了提升指令执行速度，在保证程序语义正确的前提下，允许编译器对指令进行重排序。也就是说这种指令重排序对于上层代码是感知不到的，我们称之为 processor ordering.</p> <p>JMM 允许编译器在指令重排上自由发挥，除非程序员通过<strong>volatile</strong>等 显式干预这种重排机制，建立起同步机制，保证多线程代码正确运行。见文章：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://blog.csdn.net/jiyiqinlovexx/article/details/50989328"  rel="nofollow">Java并发：volatile内存可见性和指令重排</a>。</p> <p><strong>当多个线程之间有互相的数据依赖的之后， 就必须显式的干预这个指令重排机制</strong>。</p> <hr/> <p>CAS是CPU提供的一门技术。在单核单线程处理器上，所有的指令允许都是顺序操作；但是在多核多线程处理器上，多线程访问同一个共享变量的时候，可能存在并发问题。</p> <blockquote> <p>使用CAS技术可以锁定住元素的值。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html"  rel="nofollow">Intel开发文档, 第八章</a><br /> 编译器在将线程持有的值与被锁定的值进行比较，相同则更新为更新的值。<br /> CAS同样遵循JMM规范的 happen-before 原则。<br /> 看<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://zl198751.iteye.com/blog/1848575"  rel="nofollow">JAVA CAS原理深度分析</a>博客</p> </blockquote> <p><strong>公平锁和非公平锁在说的获取上都使用到了<code>volatile</code> 关键字修饰的<code>state</code>字段， 这是保证多线程环境下锁的获取与否的核心。</strong><br /><strong>但是当并发情况下多个线程都读取到<code>state == 0</code>时，则必须用到CAS技术，一门CPU的原子锁技术，可通过CPU对共享变量加锁的形式，实现数据变更的原子操作。</strong><br /><strong>volatile 和 CAS的结合是并发抢占的关键。</strong></p> <h2><a id="JSR133_225" rel="nofollow"></a>JSR-133编译器编写手册</h2> <p>JMM规范经历了多代迭代， JSR-133为较为通用的一版规范。</p> <blockquote> <p>编译器编写手册文档见:<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://gee.cs.oswego.edu/dl/jmm/cookbook.html"  rel="nofollow">The JSR-133 Cookbook for Compiler Writers</a> (非官方指南)</p> </blockquote> <p>上面小章节描述到了<code>volatile</code>可以避免掉的指令重排， 那它怎么避免的呢？</p> <p>在内存的读写过程中， 无非 读/写 两者操作的四种组合：</p> <ul> <li>LoadStore</li> <li>LoadLoad</li> <li>StoreStore</li> <li>StoreLoad</li> </ul> <blockquote> <p>volatile关键字通过提供“内存屏障”的方式来防止指令被重排序，为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。而大多数的处理器都支持内存屏障的指令。</p> </blockquote> <ul> <li>volatile读操作的后面插入一个LoadLoad屏障。</li> <li>volatile写操作的后面插入一个StoreLoad屏障。</li> </ul> <p>那这个<code>StoreLoad</code> /<code>LoadLoad</code>有什么用处呢？ 见<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html"  rel="nofollow">Intel开发文档, 第八章</a>。 简单的说<code>StoreLoad</code>就是触发后续指令中的线程缓存回写到内存; 而<code>LoadLoad</code>会触发线程重新从主存里面读数据进行处理。</p> <blockquote> <p>Synchronization mechanisms in multiple-processor systems may depend upon a strong memory-ordering model. Here, a program can use a locking instruction such as the XCHG instruction or the LOCK prefix to ensure that a read-modify-write operation on memory is carried out atomically. Locking operations typically operate like I/O operations in that they wait for all previous instructions to complete and for all buffered writes to drain to memory.</p> </blockquote> <h2><a id="ReentrantLock_248" rel="nofollow"></a>ReentrantLock内存可见性</h2> <p>在上述博客中的： ReentrantLock锁的实现分析#公平锁和非公平锁 中讲到：ReentrantLock 通过<code>volatile</code> 和<code>CAS</code> 的搭配实现锁的功能。</p> <p>顺带的，<code>volatile</code> 关键字修饰的<code>state</code> 字段读和后续的锁释放中的<code>state</code> 字段写， 共同组成了保证ReentrantLock内存可见性的内存屏障。 此屏障保证了ReentrantLock的内存可见性</p> <h2><a id="CASvolatile_254" rel="nofollow"></a>CAS的类似volatile内存屏障原理</h2> <p>参见文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://ifeve.com/java-memory-model-5/"  rel="nofollow">深入理解Java内存模型（五）——锁</a><br /><strong>如下文档部分摘录</strong></p> <p>volatile是通过在Java编译时，添加字节码来实现内存屏障功能。</p> <p>CAS通过本地JNI调用，Java代码为 Unsafe.java， 层次调用为：unsafe.cpp &gt; atomic.cpp &gt; atomicwindowsx86.inline.hpp。调用的代码如是：</p> <pre><code>#define LOCK_IF_MP(mp) __asm cmp mp, 0  \                        __asm je L0      \                        __asm _emit 0xF0 \                        __asm L0:  inline jint     Atomic::cmpxchg    (jint     exchange_value, volatile jint*     dest, jint     compare_value) {   // alternative for InterlockedCompareExchange   int mp = os::is_MP();   __asm {     mov edx, dest     mov ecx, exchange_value     mov eax, compare_value     LOCK_IF_MP(mp)     cmpxchg dword ptr [edx], ecx   } }</code></pre> <blockquote> <p>如上面源代码所示，程序会根据当前处理器的类型来决定是否为cmpxchg指令添加lock前缀。如果程序是在多处理器上运行，就为cmpxchg指令加上lock前缀（lock cmpxchg）。反之，如果程序是在单处理器上运行，就省略lock前缀（单处理器自身会维护单处理器内的顺序一致性，不需要lock前缀提供的内存屏障效果）。</p> </blockquote> <p>intel的手册对lock前缀的说明如下：</p> <ol> <li>确保对内存的读-改-写操作原子执行。在Pentium及Pentium之前的处理器中，带有lock前缀的指令在执行期间会锁住总线，使得其他处理器暂时无法通过总线访问内存。很显然，这会带来昂贵的开销。从Pentium 4，Intel Xeon及P6处理器开始，intel在原有总线锁的基础上做了一个很有意义的优化：如果要访问的内存区域（area of memory）在lock前缀指令执行期间已经在处理器内部的缓存中被锁定（即包含该内存区域的缓存行当前处于独占或以修改状态），并且该内存区域被完全包含在单个缓存行（cache line）中，那么处理器将直接执行该指令。由于在指令执行期间该缓存行会一直被锁定，其它处理器无法读/写该指令要访问的内存区域，因此能保证指令执行的原子性。这个操作过程叫做缓存锁定（cache locking），缓存锁定将大大降低lock前缀指令的执行开销，但是当多处理器之间的竞争程度很高或者指令访问的内存地址未对齐时，仍然会锁住总线。</li> <li>禁止该指令与之前和之后的读和写指令重排序。</li> <li>把写缓冲区中的所有数据刷新到内存中。</li> </ol> <p>上面的第2点和第3点所具有的内存屏障效果，足以同时实现volatile读和volatile写的内存语义。</p> </div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-3764.htm">一文讲透大数据列存标准格式：Parquet</a></p>
                                                        <p>下一个：<a href="/html/category/article-4076.htm">mysql将一张表的数据批量插入到另外一张表</a></p>
                                                    </div>

                                                <div class="panel panel-default mt-5">
                            <div class="panel-heading">
                                <h3 class="m-0">推荐文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0">
                                                                        <li class="py-2"><a href="/html/category/article-2832.htm">pytorch 自动构建任意层的深度神经网络(DNN)</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1962.htm">记录detector2使用中的PyYAML报错</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1248.htm">PHP对象继承</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1234.htm">java中Date与LocalDate、LocalDate、LocalDateTime互相转化</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1215.htm">Java String.equals()与==。</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1163.htm">Java中时间类使用方法总结</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1157.htm">SpringBoot重点详解&#8211;使用JPA操作数据库</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1155.htm">java 对音频文件降噪_如何对已有音频文件进行降噪处理？</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1118.htm">Vue+element搭建后台管理系统-二、安装插件</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1097.htm">Python——if语句</a></li>
                                                                    </ul>
                            </div>
                        </div>
                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1297.htm" title="vue2设置保存自动执行run lint配置步骤">vue2设置保存自动执行run lint配置步骤</a></li>
                        <li class="py-2"><a href="/html/category/article-3738.htm" title="水平无限循环弹幕的实现">水平无限循环弹幕的实现</a></li>
                        <li class="py-2"><a href="/html/category/article-1329.htm" title="Visual Studio快捷键汇总_实用技巧_">Visual Studio快捷键汇总_实用技巧_</a></li>
                        <li class="py-2"><a href="/html/category/article-1312.htm" title="有关动态规划的相关优化思想_在线工具">有关动态规划的相关优化思想_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1920.htm" title="我们如何在Java中实现自定义HashSet">我们如何在Java中实现自定义HashSet</a></li>
                        <li class="py-2"><a href="/html/category/article-1947.htm" title="Vant组件样式没有生效">Vant组件样式没有生效</a></li>
                        <li class="py-2"><a href="/html/category/article-1349.htm" title="父组件调用子组件的方法-子组件向父组件传值">父组件调用子组件的方法-子组件向父组件传值</a></li>
                        <li class="py-2"><a href="/html/category/article-1320.htm" title="46.java编程思想——传递和返回对象 只读类">46.java编程思想——传递和返回对象 只读类</a></li>
                        <li class="py-2"><a href="/html/category/article-1948.htm" title="前端之vue的vuex插件(多组件共享数据)">前端之vue的vuex插件(多组件共享数据)</a></li>
                        <li class="py-2"><a href="/html/category/article-1302.htm" title="java高级用法之:在JNA中使用类型映射">java高级用法之:在JNA中使用类型映射</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>