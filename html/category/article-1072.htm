<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1072.htm" />
    <title>Java中线程休眠的方法有几种？ - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>Java中线程休眠的方法有几种？</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<p>在 Java 中，让线程休眠的方法有很多，这些方法大致可以分为两类，一类是设置时间，在一段时间后自动唤醒，而另一个类是提供了一对休眠和唤醒的方法，在线程休眠之后，可以在任意时间对线程进行唤醒。</p> <blockquote> <p>PS：休眠是指让某个线程暂停执行（进入等待状态），唤醒指的是让某个暂停的线程继续执行。</p> </blockquote> <p>线程休眠的方法有以下 5 个：</p> <ol> <li>Thread.sleep</li> <li>TimeUnit</li> <li>wait</li> <li>Condition</li> <li>LockSupport</li> </ol> <p>其中 sleep 和 TimeUnit 是让线程休眠一段时间后自动唤醒，而 wait、Condition、LockSupport 提供了一对休眠和唤醒线程的方法，可以实现任意时刻唤醒某个线程。</p> <h2 id="方法1threadsleep">方法1：Thread.sleep</h2> <p>Thread.sleep 方法来自于 Thread 类，它是一个 native 本地方法，其实现源码如下：</p> <pre><code class="language-java">public static native void sleep(long millis) throws InterruptedException;</code></pre> <p><strong>Thread.sleep 方法需要传递一个 long 类型的毫秒数，表示 n 毫秒之后自动唤醒</strong>，它的基础用法如下：</p> <pre><code class="language-java">Thread t1 = new Thread() {     @Override     public void run() {         System.out.println("线程执行：" + LocalDateTime.now());         try {             Thread.sleep(1000);         } catch (InterruptedException e) {             e.printStackTrace();         }         System.out.println("线程结束：" + LocalDateTime.now());     } }; t1.start();</code></pre> <p>以上程序的执行结果如下图所示：</p> <h2 id="方法2timeunit">方法2：TimeUnit</h2> <p>sleep 方法因为要传递一个毫秒类型的参数，因此在设置大一点的时间时比较麻烦，比如设置 1 小时或 1 天时，此时我们就可以使用 TimeUnit 来替代 sleep 方法实现休眠。<br /><strong>TimeUnit 的功能和 sleep 一样，让线程休眠 N 个单位时间之后自动唤醒</strong>，它的基础用法如下：</p> <pre><code class="language-java">Thread t1 = new Thread() {     @Override     public void run() {         System.out.println("线程执行：" + LocalDateTime.now());         try {             TimeUnit.SECONDS.sleep(1); // 休眠 1s             //TimeUnit.DAYS.sleep(1); // 休眠 1 天         } catch (InterruptedException e) {             e.printStackTrace();         }         System.out.println("线程结束：" + LocalDateTime.now());     } }; t1.start();</code></pre> <p>以上程序的执行结果如下图所示：</p> <p>当我们查看 TimeUnit 源码时就会发现，它的底层是基于 Thread.sleep 方法实现的，其实现源码如下：</p> <h2 id="方法3wait">方法3：wait</h2> <p>wait/notify/notifyAll 都来自于 Object 类，其中：</p> <ul> <li>wait() / wait(long timeout)：表示让当前线程进入休眠状态。</li> <li>notify()：唤醒当前对象上的一个休眠线程。</li> <li>notifyAll()：唤醒当前对象上的所有休眠线程。</li> </ul> <p>其中 wait() 方法表示让当前线程无限期等待下去，直到遇到 notify/notifyAll 方法时才会被唤醒，而 wait(long timeout) 表示接收一个 long 类型的超时时间，如果没有遇到 notify/notifyAll 会在 long 毫秒之后自动唤醒，如果遇到了 notify/notifyAll 方法会立即被唤醒。<br /> 它的基础用法如下：</p> <pre><code class="language-java">Object lock = new Object(); new Thread(() -&gt; {     synchronized (lock) {         try {             // 让当前线程休眠             lock.wait();         } catch (InterruptedException e) {             e.printStackTrace();         }     } }).start(); synchronized (lock) {     lock.notify(); // 唤醒当前对象上一个休眠线程     // lock.notifyAll(); // 唤醒当前对象上所有休眠的线程 }</code></pre> <p>需要注意的是 wait/notify/notifyAll 在使用时必须要配合 synchronized 一起使用，否则程序执行会报错。</p> <h2 id="方法4condition">方法4：Condition</h2> <p>Condition 作为 wait 的升级版，它提供的常用方法有以下几个：</p> <ul> <li>await()：让当前线程进入等待状态，直到被通知（signal）或者被中断时才会继续执行。</li> <li>awaitUninterruptibly()：让当前线程进入等待状态，直到被通知才会被唤醒，它对线程的中断通知不做响应。</li> <li>await(long time, TimeUnit unit)：在 await() 方法的基础上添加了超时时间，如果过了超时时间还没有遇到唤醒方法则会自动唤醒并恢复执行。</li> <li>awaitUntil(Date deadline)：让当前线程进入等待状态，如果没有遇到唤醒方法也会在设置的时间之后自动唤醒。</li> <li>signal()：唤醒一个等待在 Condition 上的线程。</li> <li>signalAll()：唤醒等待在 Condition 上所有的线程。</li> </ul> <p>它的基本用法如下：</p> <pre><code class="language-java">import java.time.LocalDateTime; import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock;  public class ConditionExample {     public static void main(String[] args) throws InterruptedException {         // 创建锁         final Lock lock = new ReentrantLock();         // 创建 Condition         final Condition condition = lock.newCondition();         new Thread(() -&gt; {             System.out.println("线程执行：" + LocalDateTime.now());             lock.lock(); // 得到锁             try {                 // 休眠线程                 condition.await();             } catch (InterruptedException e) {                 e.printStackTrace();             } finally {                 lock.unlock(); // 释放锁             }             System.out.println("线程结束：" + LocalDateTime.now());         }).start();         Thread.sleep(1000);         lock.lock(); // 得到锁         try {             // 唤醒线程             condition.signal();         } finally {             lock.unlock(); // 释放锁         }     } }</code></pre> <p>相比于 wait 方法，Condition 对象更加灵活，因为它可以在一把锁上定义多个 Condition 对象进行使用，如下代码所示：</p> <pre><code class="language-java"> // 创建锁 final Lock lock = new ReentrantLock(); // 创建 Condition 1 final Condition condition = lock.newCondition(); // 创建 Condition 2 final Condition condition2 = lock.newCondition(); // ......</code></pre> <h2 id="方法5locksupport">方法5：LockSupport</h2> <p>LockSupport 是更加底层的操作线程休眠和唤醒的对象，它提供了两个常用的方法：</p> <ul> <li>LockSupport.park()：休眠当前线程。</li> <li>LockSupport.unpark(Thread thread)：唤醒一个指定的线程。</li> </ul> <p>它的基础用法如下：</p> <pre><code class="language-java">Thread t1 = new Thread(() -&gt; {     System.out.println("线程1休眠");     LockSupport.park(); // 休眠线程     System.out.println("线程1执行结束"); }, "线程1"); t1.start();  Thread t2 = new Thread(() -&gt; {     System.out.println("线程2休眠");     LockSupport.park(); // 休眠线程     System.out.println("线程2执行结束"); }, "线程2"); t2.start();  Thread t3 = new Thread(() -&gt; {     try {         Thread.sleep(1000);     } catch (InterruptedException e) {         e.printStackTrace();     }     System.out.println("唤醒线程1");     LockSupport.unpark(t1); // 唤醒线程1 }, "线程3"); t3.start();</code></pre> <h2 id="总结">总结</h2> <p>Thread.sleep 和 TimeUnit 是让线程休眠并在一段时间后自动唤醒，而 wait、Condition、LockSupport 提供了休眠和唤醒线程的方法，其中 Condition 为 wait 方法的升级版，而 LockSupport 是更底层的让线程休眠和唤醒的方法，它可以实现唤醒某个指定的线程，这是其它方法所不具备的（功能）。</p> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1071.htm">前端发送复杂JSON数据，后端使用@RequestBody接收</a></p>
                                                        <p>下一个：<a href="/html/category/article-1073.htm">node.js &#8211; 路由、中间件、mysql</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1349.htm" title="父组件调用子组件的方法-子组件向父组件传值">父组件调用子组件的方法-子组件向父组件传值</a></li>
                        <li class="py-2"><a href="/html/category/article-1307.htm" title="在JavaScript中实现优先级排序">在JavaScript中实现优先级排序</a></li>
                        <li class="py-2"><a href="/html/category/article-1637.htm" title="Java基础之浅谈异常与了解断言">Java基础之浅谈异常与了解断言</a></li>
                        <li class="py-2"><a href="/html/category/article-1934.htm" title="朴素贝叶斯算法详解">朴素贝叶斯算法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1330.htm" title="avframe转byte数组_Spring Boot图片文件转Base64">avframe转byte数组_Spring Boot图片文件转Base64</a></li>
                        <li class="py-2"><a href="/html/category/article-1290.htm" title="Jmeter监控平台搭建：JMeter+InfluxDB+Grafana">Jmeter监控平台搭建：JMeter+InfluxDB+Grafana</a></li>
                        <li class="py-2"><a href="/html/category/article-1316.htm" title="vscode指定扩展安装位置">vscode指定扩展安装位置</a></li>
                        <li class="py-2"><a href="/html/category/article-1299.htm" title="linux信号量semaphore">linux信号量semaphore</a></li>
                        <li class="py-2"><a href="/html/category/article-1300.htm" title="Git基础Git对象的总结">Git基础Git对象的总结</a></li>
                        <li class="py-2"><a href="/html/category/article-1291.htm" title="Springcloud通过maven打包包含公共common模块的项目">Springcloud通过maven打包包含公共common模块的项目</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>