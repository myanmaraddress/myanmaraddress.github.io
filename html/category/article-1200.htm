<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1200.htm" />
    <title>Android中Handler的使用方法 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>Android中Handler的使用方法</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/xcblog/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2 id="android中handler的使用方法">Android中Handler的使用方法</h2> <p>几乎所有人第一次使用到Handler类的时候，都是因为想在非主线程更新UI，然后在更新UI的时候报错，才发现Handler的，现在来看一下网上的通用给法 <br /> “</p> <pre><code>public class HandlerActivity extends Activity {  private Handler mHandler=new Handler(){     @Override     public void handleMessage(Message msg) {         switch(msg.what){             case 1:             //更新UI             break;          }         super.handleMessage(msg);     } }; @Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);      new Thread(new Runnable() {         @Override         public void run() {             Message msg=new Message();             msg.what=1;             mHandler.sendMessage(msg);         }     }).start(); } </code></pre> <p>} <br /> “ <br /> 我们通过新建一个Handler对象，然后在子线程中进行业务处理，当处理完成中再将信号通过mHandler发送到主线程中，Handler再收到消息后就会对其进行处理。在使用Android Studio的时候，细心的同学会发现，Handler中给出了警告提示： <br /> Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object. <br /> 一旦Handler被声明为内部类，可能导致它的外部类不能被垃圾回收。如果Handler是在其他线程使用Looper或MessageQueue，而不是在UI线程，那么就没有这个问题。如果Handler使用Looper或MessageQueue在主线程（main thread），你需要修改你的Handler声明： <br /> 声明Handler为static类；在外部类中实例化一个外部类的WeakReference（弱引用）并且在Handler初始化时传入这个对象给你的Handler；将所有引用的外部类成员使用WeakReference对象。</p> <p>出现这个问题的主要原因是，当结束Activity时由于外部对handler 有一个引用，而handler 持有Activity的引用，这样就导致了GC不会回收，引发内存泄露，GC的回收机制是，如果某个对象不再被引用，那么该对象将被回收。如 A a=new A（），此时就创建一个对象A，a去引用，但是如果我们将a=null;后，由于对象A不再被引用，对象A就会被回收。所以，如一些需要在对象销毁时才执行的函数，如Activity的onDestroy，由于Activity没有被回收，导致内存泄露 ，引发的并发问题onDestroy不能被执行，有时候当某个函数不能被正常调用时，应该考虑是否内存泄露引发的，其实这种问题在C/C++中经常出现，只是java 弱化了指针的概念（或者说没有指针这个东西），导致JAVA中对内存泄露不是特别重视。</p> <p>说了这么多废话 该说一下如何解决了，根据这个警告提到的我们可以使用弱引用，来解决这个问题。使用静态内部类，通过WeakReference实现对Activity的弱引用，直接上代码： <br /> “</p> <pre><code>public class HandlerActivity extends Activity {  private static class WeakReferenceHandler extends Handler{     WeakReference&lt;HandlerActivity&gt; mActivity;     private String TAG="StudentSocreHandler";     public WeakReferenceHandler(HandlerActivity activity){         mActivity=new WeakReference&lt;&gt;(activity);     }     @Override     public void handleMessage(Message msg) {         HandlerActivity mHandlerActivity=mActivity.get();         switch (msg.what){             case 1:                 //更新UI 通过mHandlerActivity得到Activity中的对象                  break;         }         super.handleMessage(msg);     } } private WeakReferenceHandler mWeakReferenceHandler=new WeakReferenceHandler(this); @Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     Work.WorkThread(mWeakReferenceHandler); } } </code></pre> <p><code> <br /></code></p> <pre><code>class Work{         public static void WorkThread(final Handler mHandler){             new Thread(new Runnable() {                 @Override                 public void run() {                     Message msg=new Message();                     msg.what=1;                     mHandler.sendMessage(msg);                 }             }).start();         }     } </code></pre> <p>“ <br /> WeakReference的作用就是将Activity进行弱引用，一旦Activity要被销毁时，由于Handler对Activity持有的引用是弱引用，此时，GC会及时回收Activity,防止内存泄露这就是使用弱引用的好处。但是并不是任何地方都能随便使用弱引用的，使用不当很容易造成空指针异常，所以需要合理的使用。</p> <p><strong>借鉴文章：</strong> <br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://blog.csdn.net/matrix_xu/article/details/8424038"  rel="nofollow">谈谈java中的WeakReference</a> <br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://blog.csdn.net/lincyang/article/details/46875157"  rel="nofollow">Android实战技巧之三十八：Handler使用中可能引发的内存泄漏</a> 该文章提到的另一种实现方法大家不防去试试</p> </p></div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1199.htm">vue3新增特性setup()用法＜与vue2对比＞</a></p>
                                                        <p>下一个：<a href="/html/category/article-1201.htm">Vue项目如何设置反向代理和cookie设置问题_vue.js</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1306.htm" title="MeteoInfo-Java解析与绘图教程_java解析卫星FY-4A一级产品文件(HDF举例)_在线工具">MeteoInfo-Java解析与绘图教程_java解析卫星FY-4A一级产品文件(HDF举例)_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1315.htm" title="关于对称算法中数据的填充模式">关于对称算法中数据的填充模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1280.htm" title="Arthas之实例操作">Arthas之实例操作</a></li>
                        <li class="py-2"><a href="/html/category/article-1265.htm" title="Linux网络服务之NFS共享服务">Linux网络服务之NFS共享服务</a></li>
                        <li class="py-2"><a href="/html/category/article-1275.htm" title="feign实现远程调用">feign实现远程调用</a></li>
                        <li class="py-2"><a href="/html/category/article-1281.htm" title="使用EasyExcel实现自定义表头导出">使用EasyExcel实现自定义表头导出</a></li>
                        <li class="py-2"><a href="/html/category/article-1282.htm" title="Azure DevOps通过Azure Devops部署一个.NET Core WebAPI">Azure DevOps通过Azure Devops部署一个.NET Core WebAPI</a></li>
                        <li class="py-2"><a href="/html/category/article-1305.htm" title="Kafka delivery保证(kafka消息投递保证)">Kafka delivery保证(kafka消息投递保证)</a></li>
                        <li class="py-2"><a href="/html/category/article-1271.htm" title="c++基于模板匹配的手写数字识别（超详细）">c++基于模板匹配的手写数字识别（超详细）</a></li>
                        <li class="py-2"><a href="/html/category/article-1289.htm" title="关于MySQL支持的所有字符集的查询是什么？">关于MySQL支持的所有字符集的查询是什么？</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>