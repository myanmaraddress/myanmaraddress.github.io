<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1074.htm" />
    <title>json字符串转java实体类及属性对应中的猫腻详解 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>json字符串转java实体类及属性对应中的猫腻详解</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="htmledit_views"> <p><strong><span style="font-size:24px">一、json强转实体类</span></strong></p> <p><span style="font-size:18px">1.实体类</span></p> <p><span style="font-size:18px"></span></p> <pre><code class="language-java">package test;  public class PassPortForLendsEntity { 	private String passportid; 	private String name; 	private String xx; 	private String ss; 	public String getPassportid() { 		return passportid; 	} 	public void setPassportid(String passportid) { 		this.passportid = passportid; 	} 	public String getName() { 		return name; 	} 	public void setName(String name) { 		this.name = name; 	} 	public String getPassporttype1() { 		return xx; 	} 	public void setPassporttype1(String passporttype) { 		this.xx = passporttype; 	} 	public String getXx() { 		return xx; 	} 	public void setXx(String xx) { 		this.xx = xx; 	} 	public String getSs() { 		return ss; 	} 	public void setSs(String ss) { 		this.ss = ss; 	} 	 } </code></pre> <p><span style="font-size:18px">2.测试类</span></p> <p><span style="font-size:18px"></span></p> <pre><code class="language-java">package test;  import java.util.ArrayList; import java.util.List;  import com.alibaba.fastjson.JSON; import com.alibaba.fastjson.JSONArray; import com.alibaba.fastjson.JSONObject;  public class json2entity1 { 	public static void main(String[] args) { 	String	str ="{\"lendperson\":\"李四\",\"lendcompany\":\"有限公司\",\"checkperson\":\"李四\"," 				+ "\"lenddate\":\"2010-07-19T00:00:00\",\"lendcounts\":4,\""  				+"passports\":[{\"passportid\":\"d\",\"name\":\"李豫川\",\"passporttype\":\"K\"},"  				+"{\"passportid\":\"K9051\",\"name\":\"李平\",\"passporttype\":\"K\",\"age\":\"23\"},"  				+"{\"passportid\":\"K90517\",\"name\":\"袁寒梅\",\"passporttype\":\"K\"},"  				+"{\"passportid\":\"K905199\",\"name\":\"贺明\",\"passporttype1\":\"K\"}]}";  				JSONObject jsonobject = JSON.parseObject(str);//此处是com.alibaba.fastjson 				//若是net.sf.json，则用JSONObjectjsonobject = JSONObject.fromObject(str);  				try {  				//获取一个json数组  				JSONArray array = jsonobject.getJSONArray("passports");  				//将json数组 转换成List&lt;PassPortForLendsEntity&gt;泛型  				List&lt;PassPortForLendsEntity&gt; list = new ArrayList&lt;PassPortForLendsEntity&gt;();  				for (int i =0; i &lt; array.size(); i++){  				JSONObject object =(JSONObject)array.get(i);  				PassPortForLendsEntity passport =(PassPortForLendsEntity)JSONObject.toJavaObject(object, 				PassPortForLendsEntity.class);//此处是com.alibaba.fastjson 				//若是net.sf.json 则用(PassportLendsEntity)JSONObject.toBean(jsonobject, PassportLendsEntity.class);  				if(passport != null){  				list.add(passport);  				}  				} 				System.out.println(list); 	}catch(Exception e){ 		e.printStackTrace(); 	} } }</code></pre> <p><span style="font-size:18px"><br /> 注意：json字符串str中要转为实体类的是passports的值，里面有三个属性值：passportid，name，passporttype.</span></p> <p><span style="font-size:18px">与之对应的实体类PassPortForLendsEntity至少有这三个属性（属性可以多于这三个）。</span></p> <p><span style="font-size:18px; color:#3333ff">开始划重点了！</span></p> <p><span style="font-size:18px; background-color:rgb(255,255,255)"><span style="font-weight:bold"><span style="color:#ff0000">1.<span style="font-size:18px">实体类</span><span style="font-size:18px">PassPortForLendsEntity至少包含被转为实体类的字符串<span style="font-size:18px">passports</span>的所有属性，可以有多于<span style="font-size:18px">passports</span>中的属性，多的属性在转的时候为null；</span></span></span></span></p> <p><span style="font-size:18px"><span style="font-size:18px; background-color:rgb(255,255,255)"><span style="font-weight:bold"><span style="color:#ff0000">2.当</span><span style="font-size:18px"><span style="color:#ff0000">passports中有实体类<span style="font-size:18px">PassPortForLendsEntity没有的属性，在转实体类的时候会被忽略，不会报错，能转成功；</span></span></span></span></span></span></p> <p><span style="font-size:18px"><span style="font-size:18px; background-color:rgb(255,255,255)"><span style="font-size:18px"><span style="font-size:18px"><span style="color:#ff0000"><strong>3.</strong></span><span style="font-size:18px"><span style="color:#ff0000"><strong>passports与<span style="font-size:18px">PassPortForLendsEntity</span>属性对应法则（严格大小写）：在<span style="font-size:18px">PassPortForLendsEntity中能找到</span></strong></span><span style="font-size:18px"><span style="color:#ff0000"><strong>passports属性首字母大写的get和set方法并且属性名中的其他字母大小写严格一致，而不是</strong></span><span style="font-size:18px"><span style="color:#ff0000"><strong>passports与</strong></span><span style="font-size:18px"><span style="color:#ff0000"><strong>PassPortForLendsEntity属性名必须相同！</strong></span><strong>（这点很重要）实际上只要满足</strong><span style="font-size:18px"><strong>PassPortForLendsEntity中有</strong><span style="font-size:18px"><strong>passports属性名首字母大写的get和set方法</strong><span style="font-size:18px"><strong>并且属性名中的其他字母大小写严格一致</strong></span><strong>，即使二者之间属性名差异很大也能对应上。</strong>如<span style="font-size:18px">PassPortForLendsEntity中的属性xx对应<span style="font-size:18px">passports中的属性<span style="font-size:18px">passporttype。</span></span></span></span></span></span></span></span></span></span></span></span></span></p> <p><span style="font-size:18px"><span style="font-size:18px; background-color:rgb(255,255,255)"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px">如：get<span style="font-size:18px">Passporttype()和<span style="font-size:18px">setPassporttype()只能使<span style="font-size:18px">passports中是</span><span style="font-size:18px">passporttype</span>属性对应上<span style="font-size:18px">PassPortForLendsEntity对应的属性</span>，但是<span style="font-size:18px">getPassportType()和setPassportType()就不行（但是这个可使<span style="font-size:18px">passports中是passportType属性对应上PassPortForLendsEntity对应的属性</span>）。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p> <p><span style="font-size:18px"><span style="font-size:18px; background-color:rgb(255,255,255)"><span style="font-weight:bold"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="color:#ff0000">4.<span style="font-size:18px">PassPortForLendsEntity中允许在get和set方法中多次对同一属性名，但是实际能获得值的依然是能匹配上对应关系的属性值，并且不会被覆盖。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p> <p><span style="font-size:18px"><span style="font-size:18px; background-color:rgb(255,255,255)"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px"><span style="font-size:18px">如：<span style="font-size:18px">PassPortForLendsEntity中setPassporttype1()和setXx()都对xx属性设值，但是由于只有<span style="font-size:18px">setPassporttype1()能匹配上<span style="font-size:18px">passports中最后一条数据才能设值，即使此时<span style="font-size:18px">setXx()会使xx属性值为null，最终起作用的还是<span style="font-size:18px">setPassporttype1()。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p> <p><span style="font-size:18px; color:#ff0000"><span style="font-size:18px; background-color:rgb(255,255,255)"><span style="font-weight:bold"><span style="font-size:18px"><span style="color:rgb(255,0,0); font-size:18px"><span style="color:rgb(255,0,0); font-size:18px"><span style="color:rgb(255,0,0); font-size:18px"><span style="color:rgb(255,0,0); font-size:18px"><span style="color:rgb(255,0,0); font-size:18px">重点：json字符串转java实体类只看java实体类中有没有对应的set和get方法，而不是看有没有对应（相同）的属性名。对应上了就能向实体类映射成功。</span></span></span></span></span></span></span></span></span></p> <p><span style="font-size:14px">更多参考：https://wenku.baidu.com/view/5e6e43e102020740bf1e9b29.html</span></p> <p><span style="font-size:18px"><br /></span></p> <p><span style="font-size:18px">此方法虽方便，自动化程度高，但也有个弊端就是：这个接口推来的json数据的格式和实体类的get和set要约定好一一对应。但在需求经常变更的情况下，反复修改实体类以求对应上（这也会附带影响到其他的业务逻辑），也是够累的。因为二者之间耦合性太高了。有没有一种方法松耦合，使相互直接影响不那么强。方法二来了。</span></p> <p><span style="font-size:18px"><strong><br /></strong></span></p> <p><strong><span style="font-size:24px">二、松耦合，逐个属性设值</span></strong></p> <p><span style="font-size:18px">不管推到接口的json要转实体类的属性名怎么变化，由我来决定往java实体类的哪个属性里放。也就是，即使你变，也不影响我的正常使用，我也不影响你。</span></p> <p><span style="font-size:18px"></span></p> <pre><code class="language-java">package test;  import java.util.ArrayList; import java.util.List;  import com.alibaba.fastjson.JSON; import com.alibaba.fastjson.JSONArray; import com.alibaba.fastjson.JSONObject;  public class json2entity2 { 	public static void main(String[] args) { 		String str = "{\"lendperson\":\"李四\",\"lendcompany\":\"有限公司\",\"checkperson\":\"李四\"," 				+ "\"lenddate\":\"2010-07-19T00:00:00\",\"lendcounts\":4,\""  				+ "passports\":[{\"passportid\":\"d\",\"name\":\"李豫川\",\"passporttype\":\"K\"},"  				+ "{\"passportid\":\"K9051\",\"name\":\"李平\",\"passporttype\":\"K\",\"age\":\"23\"},"  				+ "{\"passportid\":\"K90517\",\"name\":\"袁寒梅\",\"passporttype\":\"K\"},"  				+ "{\"passportid\":\"K905199\",\"name\":\"贺明\",\"passporttype1\":\"K\"}]}";  		JSONObject jsonobject = JSON.parseObject(str);// 此处是com.alibaba.fastjson 		// 若是net.sf.json，则用JSONObjectjsonobject = JSONObject.fromObject(str);  		try {  			// 获取一个json数组  			JSONArray array = jsonobject.getJSONArray("passports");  			// 将json数组 转换成List&lt;PassPortForLendsEntity&gt;泛型  			List&lt;PassPortForLendsEntity&gt; list = new ArrayList&lt;PassPortForLendsEntity&gt;();  			for (int i = 0; i &lt; array.size(); i++) {  				JSONObject object = (JSONObject) array.get(i); 				PassPortForLendsEntity passport = new PassPortForLendsEntity(); 				passport.setPassportid(object.getString("passportid")); 				passport.setName(object.getString("name")); 				passport.setPassporttype1(object.getString("passporttype1")); 				 if(passport != null){ 				 list.add(passport); 				 }  			} 			System.out.println(list); 		} catch (Exception e) { 			e.printStackTrace(); 		} 	} }</code></pre> <p> 方法二比较小心翼翼，逐个设值，你可以有机会选择往哪个属性里设值，不像方法一一下全自动设值了。但也相对于方法一更麻烦，当属性多的时候这个弊端就凸显了。</p> <p><span style="font-size:18px">综述：选择哪个方法，根据你实际需求来定。</span></p> <p><span style="font-size:18px">如果你的开发文档已经定型，json格式只会小改，推荐方法一；</span></p> <p><span style="font-size:18px">如果开发文档还在成型中，预测到会有不小的改动，为避免<span style="font-size:18px">浪费时间</span>影响开发进度，建议方法二，如果实体类属性值较多的话，你就要权衡是用方法一还是方法二；</span></p> <p><span style="font-size:18px">如果属性不多，又要松耦合的话可以考虑方法二。</span></p> </p></div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1073.htm">node.js &#8211; 路由、中间件、mysql</a></p>
                                                        <p>下一个：<a href="/html/category/article-1075.htm">【硬刚ES】ES基础（三十五）分页与遍历 &#8211; From, Size, Search_after &amp; Scroll API</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1339.htm" title="分享MySQL生产库内存异常增高的排查过程_Mysql_">分享MySQL生产库内存异常增高的排查过程_Mysql_</a></li>
                        <li class="py-2"><a href="/html/category/article-1962.htm" title="记录detector2使用中的PyYAML报错">记录detector2使用中的PyYAML报错</a></li>
                        <li class="py-2"><a href="/html/category/article-1919.htm" title="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式">React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1296.htm" title="Android 12(S) 图像显示系统 &#8211; SurfaceFlinger 之 VSync &#8211; 中篇（十七）">Android 12(S) 图像显示系统 &#8211; SurfaceFlinger 之 VSync &#8211; 中篇（十七）</a></li>
                        <li class="py-2"><a href="/html/category/article-1318.htm" title="vue项目中,如何实现excel的导入导出excel导入功能-组件封装">vue项目中,如何实现excel的导入导出excel导入功能-组件封装</a></li>
                        <li class="py-2"><a href="/html/category/article-1309.htm" title="sqlserver 中使用sqlcmd 执行几百M的.sql文件">sqlserver 中使用sqlcmd 执行几百M的.sql文件</a></li>
                        <li class="py-2"><a href="/html/category/article-1947.htm" title="Vant组件样式没有生效">Vant组件样式没有生效</a></li>
                        <li class="py-2"><a href="/html/category/article-1360.htm" title="Gin增删改查demo">Gin增删改查demo</a></li>
                        <li class="py-2"><a href="/html/category/article-1302.htm" title="java高级用法之:在JNA中使用类型映射">java高级用法之:在JNA中使用类型映射</a></li>
                        <li class="py-2"><a href="/html/category/article-1314.htm" title="vue&#8211;vuex 中 Modules 详解">vue&#8211;vuex 中 Modules 详解</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">56</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>