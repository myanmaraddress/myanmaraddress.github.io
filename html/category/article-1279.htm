<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1279.htm" />
    <title>Django的原生ORM框架如何支持MongoDB，同时应对客户使用时随时变动字段 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>Django的原生ORM框架如何支持MongoDB，同时应对客户使用时随时变动字段</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<h1>1.背景知识</h1> <p>　　需要开发一个系统，处理大量EXCEL表格信息，各种类别。表格标题多变，因此使用不需要预先设计数据表结构的MongoDB，即NoSQL。一是字段不固定，二是同名字段可以存储不同的字段类型。</p> <p>　　同时，后端确定使用Django，原因是数据处理这一块，python无敌于天下。</p> <p><strong>Django采用MVT模式开发。MODEL是最关键的部分。是ORM的核心。但是ORM主要用于关系型数据库。那么如何解决？</strong></p> <h1><strong>2.大量调研的网上资料</strong></h1> <h3><strong>（1）mongoengine</strong></h3> <p><strong></strong><span style="font-size: 1.17em">&nbsp;mongoengine（跟pymongodb类似，但是相比于后者，又能提供模型类的功能，封装一些数据操作，不用单独写一堆crub）</span></p> <p><span style="font-size: 1.17em">&nbsp; &nbsp; &nbsp; 缺点：经反复测试研究，不支持django的原生后台管理功能，因为无法将django的数据迁移到mongodb数据库中因此无法使用原生的后台管理界面，需要定制。</span></p> <h3><strong>（2）djongo（注意不是django。爹是django，妈是mongodb，交配出来的物种）</strong></h3> <p><strong><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/371f1e1db3faf71ca0fa48a00d7be41b.jpg" alt="Django的原生ORM框架如何支持MongoDB，同时应对客户使用时随时变动字段"></strong></p> <p><strong><strong>&nbsp; &nbsp; &nbsp; &nbsp;与Django支持的其它SQL数据库类型，用于支持Nosql。</strong></strong></p> <p><strong><strong><strong>&nbsp; &nbsp; &nbsp; &nbsp;可以将django的数据迁移到mongodb数据库中，也可以使用原生的后台管理界面</strong></strong></strong></p> <p><strong><strong><strong><strong>（3）Django-nonrel</strong></strong></strong></strong></p> <p><strong><strong><strong><strong>　　django的分支，有时间可以研究一下。<br /></strong></strong></strong></strong></p> <h1><strong>3.目前的问题（用mongodb仿ORM，那么如何随时变动字段？）</strong></h1> <p>&nbsp;　　OVM模型的重点就是提前定义类的成员，同时迁移到数据表中，形成相应字段。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 对于一个excel表，记录图书信息，比如，书名，出版日期。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 我们只需要用下述方式定义一个类，</p> <div class="cnblogs_Highlighter"> <pre class="brush:python;gutter:true;"># 创建图书类 class BookInfo(models.Model):     """图书模型类"""     # 图书名称，CharField说明是该类属性是一个字符串，max_length指定最大长度     book_title = models.CharField(max_length=20)      # 出版日期，DateField说明该类属性是一个日期     book_pub_date = models.DateField()      def __str__(self):         """覆盖对BookInfo实例化对象使用str()的返回值"""         return self.book_title  # 返回书名</pre> </div> <p>　　作为model放入django中。后面执行如下操作，数据库就可以相应的自动变化了。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;有djongo对django和mongodb支持，我们可以将mongodb“仿”为ORM模型，注意，是仿。</p> <div class="cnblogs_Highlighter"> <pre class="brush:python;gutter:true;">def get(request):     # book=BookInfo()     # book.book_title='水浒传'     # book.book_pub_date=date(1960,1,1)          # book.save()    #    return HttpResponse('helloworld')</pre> </div> <p><strong>那么如何随时变动字段呢？比如，哪天使用方的excel表格又变动了，增加了一列，比如作者。那么如何将作者这个字段加入呢？同时，不改变原始代码？</strong></p> <h1>4.解决方案（动态模型类）</h1> <h3><strong>（1）模型save的局限性</strong></h3> <pre class="brush:python;gutter:true;"> 首先，python支持类成员随时定义，我们直接在模型类对象中，添加一个成员。<br/>  # book.author = '罗贯中'<br/> 但是发现模型的save操作，对这个临时增加的成员不处理，无法加入数据库中。<br/> save只处理在原始models.py文件中定义BookInfo的时候定义的固定类成员。<br/> 通过调试发现，Django在运行前需要首先对各个models.py进行解析。因此，后续在模型类实例化对象中临时增加成员，是没用的。</pre> <h3><strong>（2）我的方式：强制解析新的模型类，支持对字段进行变动，更好时候NoSQL</strong></h3> <p><strong>　通过文件定义的类，具有一些特殊字段。__module__ __qualname和__doc__</strong></p> <p><strong>&nbsp; &nbsp;由于Django只处理models.py文件中定义的模型类。所以，</strong></p> <p><strong>&nbsp; &nbsp;在程序执行时，动态创建新的模型类，并且修改其成员属性，把其仿真为文件中定义的模型类，然后再用django进行解析，使其能够作为ORM的新model。</strong></p> <p><strong></strong></p> <div class="cnblogs_Highlighter"> <pre>BookInfo = type('BookInfo', (models.Model,), {"__module__":"booktest.models",'__qualname__':'BookInfo',"__doc__":"注释", "book_title": models.CharField(max_length=20),"book_pub_date" :models.DateField(),"author": models.CharField(max_length=20)})<br/>book=BookInfo()<br/>book.book_title='三国演义xxx'<br/>book.book_pub_date=date(1960,1,1)<br/>book.author='我是杰少啊'<br/>book.save()</pre> </div> <p>　注意两点：第一，由于内存中有原始模型类BookInfo，我们要对其完全覆盖掉。</p> <p>&nbsp; &nbsp;上面type为什么会触发django重新解析模型类呢？</p> <p>&nbsp; &nbsp;因为BookInfo继承的model，核心是继承Django的ModelBase类。当执行上述动态类定义过程时，就会触发解析。</p> <p>&nbsp; &nbsp;通过上述处理，我们就能实现对数据库插入作者字段了。数据库中内容如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/09859588bdd218d4b73be23311beebb8.jpg" alt="Django的原生ORM框架如何支持MongoDB，同时应对客户使用时随时变动字段"></p> <p><span style="font-size: 1.17em"></span></p> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1278.htm">ASP.NET WebAPI导出CSV_实用技巧</a></p>
                                                        <p>下一个：<a href="/html/category/article-1280.htm">Arthas之实例操作</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1294.htm" title="OpenFeign、Feign以及Ribbon关系介绍">OpenFeign、Feign以及Ribbon关系介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-1293.htm" title="基于Spring接口，集成Caffeine+Redis两级缓存">基于Spring接口，集成Caffeine+Redis两级缓存</a></li>
                        <li class="py-2"><a href="/html/category/article-1919.htm" title="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式">React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1292.htm" title="Flutter实现心动的动画特效_Android">Flutter实现心动的动画特效_Android</a></li>
                        <li class="py-2"><a href="/html/category/article-1313.htm" title="二叉树与堆">二叉树与堆</a></li>
                        <li class="py-2"><a href="/html/category/article-1283.htm" title="Python 的math 模块">Python 的math 模块</a></li>
                        <li class="py-2"><a href="/html/category/article-1305.htm" title="Kafka delivery保证(kafka消息投递保证)">Kafka delivery保证(kafka消息投递保证)</a></li>
                        <li class="py-2"><a href="/html/category/article-1298.htm" title="利用Redis实现防止接口重复提交功能">利用Redis实现防止接口重复提交功能</a></li>
                        <li class="py-2"><a href="/html/category/article-1280.htm" title="Arthas之实例操作">Arthas之实例操作</a></li>
                        <li class="py-2"><a href="/html/category/article-1339.htm" title="分享MySQL生产库内存异常增高的排查过程_Mysql_">分享MySQL生产库内存异常增高的排查过程_Mysql_</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>