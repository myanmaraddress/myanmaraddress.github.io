<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1250.htm" />
    <title>SpringBoot 基本原理 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>SpringBoot 基本原理</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#SpringBoot_6" rel="nofollow">一、什么是SpringBoot</a></li> <li><a href="#SpringBoot__16" rel="nofollow">二、SpringBoot 运行原理</a></li> <li> <ul> <li><a href="#1_pomxml_17" rel="nofollow">1. pom.xml</a></li> <li><a href="#2__23" rel="nofollow">2. 主启动类的配置</a></li> <li><a href="#3__113" rel="nofollow">3. 主启动类的运行</a></li> </ul> </li> <li><a href="#_146" rel="nofollow">三、自动配置原理</a></li> </ul> </div> <hr/> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/6e6ba0080b472f2186c1017dac103e11.jpg" alt="SpringBoot 基本原理"></p> <h1> <a id="SpringBoot_6" rel="nofollow"></a>一、什么是SpringBoot</h1> <ul> <li>SpringBoot 是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置。</li> <li>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以约定大于配置的核心思想，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</li> <li>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</li> <li>Spring Boot 的主要优点：<br /> 为所有Spring开发者更快的入门<br /> 开箱即用，提供各种默认配置来简化项目配置<br /> 内嵌式容器简化Web项目<br /> 没有冗余代码生成和XML配置的要求</li> </ul> <h1> <a id="SpringBoot__16" rel="nofollow"></a>二、SpringBoot 运行原理</h1> <h2> <a id="1_pomxml_17" rel="nofollow"></a>1. pom.xml</h2> <p><strong>spring-boot-dependencies</strong>: 核心依赖在父工程中；<br /><strong>springboot-boot-starter-xxx</strong>：就是spring-boot的场景启动器<br /><strong>spring-boot-starter-web</strong>：帮我们导入了web模块正常运行所依赖的组件；<br /> SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 ；我们未来也可以自己自定义 starter；</p> <h2> <a id="2__23" rel="nofollow"></a>2. 主启动类的配置</h2> <pre><code class="prism language-java"><span class="token comment">//@SpringBootApplication 来标注一个主程序类</span> <span class="token comment">//说明这是一个Spring Boot应用</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplication</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//以为是启动了一个方法，没想到启动了一个服务</span>       <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringbootApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><strong>@SpringBootApplication</strong><br /> 作用：标注在某个类上说明这个类是SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；<br /> 进入这个注解：可以看到上面还有很多其他注解！</p> <pre><code class="prism language-java"> <span class="token annotation punctuation">@SpringBootConfiguration</span> <span class="token annotation punctuation">@EnableAutoConfiguration</span> <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>     excludeFilters <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>     type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>     classes <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>     type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>     classes <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// ......</span> <span class="token punctuation">}</span> </code></pre> <p><strong>@ComponentScan</strong><br /> 这个注解在Spring中很重要 ,它对应XML配置中的元素。<br /> 作用：自动扫描并加载符合条件的组件或者bean ， 将这个bean定义加载到IOC容器中</p> <p><strong>@SpringBootConfiguration</strong><br /> 作用：SpringBoot的配置类 ，标注在某个类上 ， 表示这是一个SpringBoot的配置类；<br /> 我们继续进去这个注解查看</p> <pre><code class="prism language-java"><span class="token comment">// 点进去得到下面的 @Component</span> <span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>  <span class="token annotation punctuation">@Component</span> <span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> </code></pre> <p><strong>@Configuration</strong>，说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件；<br /><strong>@Component</strong> 这就说明，启动类本身也是Spring中的一个组件而已，负责启动应用！</p> <p>我们回到 SpringBootApplication 注解中继续看。<br /><strong>@EnableAutoConfiguration</strong> ：开启自动配置功能，告诉SpringBoot开启自动配置功能，这样自动配置才能生效；<br /> 以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置 ；</p> <p>点进注解接续查看：<br /><strong>@AutoConfigurationPackage</strong> ：自动配置包</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token class-name">Registrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AutoConfigurationPackage</span> <span class="token punctuation">{<!-- --></span> <span class="token punctuation">}</span> </code></pre> <p><strong>@import</strong> ：Spring底层注解@import ， 给容器中导入一个组件<br /> Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；</p> <p>这个分析完了，退到上一步，继续看<br /><strong>@Import({AutoConfigurationImportSelector.class})</strong> ：给容器导入组件 ；<br /><strong>AutoConfigurationImportSelector</strong> ：自动配置导入选择器；</p> <p><strong>spring.factories</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/888de5336acc22e1222abcdb74fde591.jpg" alt="SpringBoot 基本原理"></p> <p><strong>结论</strong></p> <ul> <li>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值</li> <li>将这些值作为自动配置类导入容器，自动配置类就生效，帮我们进行自动配置工作；</li> <li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；</li> <li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件，并配置好这些组件 ；</li> <li>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</li> </ul> <h2> <a id="3__113" rel="nofollow"></a>3. 主启动类的运行</h2> <p><strong>SpringApplication 类</strong><br /> 最初以为就是运行了一个main方法，没想到却开启了一个服务；</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplication</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringbootApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行；</p> <p>SpringApplication 这个类主要做了以下四件事情：<br /> 1、推断应用的类型是普通的项目还是Web项目<br /> 2、查找并加载所有可用初始化器 ， 设置到initializers属性中<br /> 3、找出所有的应用程序监听器，设置到listeners属性中<br /> 4、推断并设置main方法的定义类，找到运行的主类</p> <p>查看构造器：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// ......</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> <span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><strong>SpringApplication.run</strong><br /> run 方法运行原理：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/1514fc8be1f3cf4faaf16e5a5a6ef60b.jpg" alt="SpringBoot 基本原理"></p> <h1> <a id="_146" rel="nofollow"></a>三、自动配置原理</h1> <p><strong>根据当前不同的条件判断，决定这个配置类是否生效！</strong></p> <ul> <li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li> <li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</li> <li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li> <li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li> </ul> <p><strong>精髓</strong></p> <ul> <li>SpringBoot启动会加载大量的自动配置类</li> <li>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</li> <li>我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</li> <li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</li> <li> <strong>xxxxAutoConfigurartion</strong>：自动配置类；给容器中添加组件</li> <li> <strong>xxxxProperties</strong>:封装配置文件中相关属性；</li> </ul> </div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1249.htm">Java修饰符abstract与static及final的精华总结_java</a></p>
                                                        <p>下一个：<a href="/html/category/article-1251.htm">ThreadLocal常见使用场景</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1312.htm" title="有关动态规划的相关优化思想_在线工具">有关动态规划的相关优化思想_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1299.htm" title="linux信号量semaphore">linux信号量semaphore</a></li>
                        <li class="py-2"><a href="/html/category/article-1297.htm" title="vue2设置保存自动执行run lint配置步骤">vue2设置保存自动执行run lint配置步骤</a></li>
                        <li class="py-2"><a href="/html/category/article-1316.htm" title="vscode指定扩展安装位置">vscode指定扩展安装位置</a></li>
                        <li class="py-2"><a href="/html/category/article-1314.htm" title="vue&#8211;vuex 中 Modules 详解">vue&#8211;vuex 中 Modules 详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1304.htm" title="网络协议之:socket协议详解之Socket和Stream Socket">网络协议之:socket协议详解之Socket和Stream Socket</a></li>
                        <li class="py-2"><a href="/html/category/article-1340.htm" title="请说一下你对分布式锁的理解，以及分布式锁的实现">请说一下你对分布式锁的理解，以及分布式锁的实现</a></li>
                        <li class="py-2"><a href="/html/category/article-1288.htm" title="【EF框架】DbContext的使用">【EF框架】DbContext的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1296.htm" title="Android 12(S) 图像显示系统 &#8211; SurfaceFlinger 之 VSync &#8211; 中篇（十七）">Android 12(S) 图像显示系统 &#8211; SurfaceFlinger 之 VSync &#8211; 中篇（十七）</a></li>
                        <li class="py-2"><a href="/html/category/article-1292.htm" title="Flutter实现心动的动画特效_Android">Flutter实现心动的动画特效_Android</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>