<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1221.htm" />
    <title>自定义全局异常处理机制 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>自定义全局异常处理机制</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p><strong>1.自定义异常的信息 枚举 ,将所用到的异常信息列出,统一管理,有异常添加到此枚举中即可</strong></p> <pre><code class="prism language-java"><span class="token comment">/**  * 枚举：将可能选项一一的列出来 本质就是多例。  * 比如：红绿灯：三种情况：红黄绿  */</span> <span class="token annotation punctuation">@Getter</span> <span class="token keyword">public</span> <span class="token keyword">enum</span>  <span class="token class-name">ExceptionEnums</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//列举不同情况  每种情况使用逗号分开</span>     <span class="token function">OK</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">INVALID_PARAM_ERROR</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"无效的请求参数！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">INVALID_PHONE_NUMBER</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"无效的手机号码"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">INVALID_VERIFY_CODE</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"验证码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">INVALID_USERNAME_PASSWORD</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"无效的用户名和密码！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">INVALID_SERVER_ID_SECRET</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"无效的服务id和密钥！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">INVALID_NOTIFY_PARAM</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"回调参数有误！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">INVALID_NOTIFY_SIGN</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"回调签名有误！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">SPEC_NOT_FOUND</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"规格不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">APPLICATION_NOT_FOUND</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"应用不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">DATA_TRANSFER_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"数据转换异常！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">INSERT_OPERATION_FAIL</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"新增操作失败！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">UPDATE_OPERATION_FAIL</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"更新操作失败！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">DELETE_OPERATION_FAIL</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"删除操作失败！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">FILE_UPLOAD_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"文件上传失败！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">DIRECTORY_WRITER_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"目录写入失败！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">FILE_WRITER_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"文件写入失败！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">SEND_MESSAGE_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"短信发送失败！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">INVALID_ORDER_STATUS</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"订单状态不正确！"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">UNAUTHORIZED</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"登录失效或未登录！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">;</span>      <span class="token comment">//提供属性</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span> <span class="token comment">//状态码</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span> <span class="token comment">//提示消息</span>       <span class="token comment">//提供属性私有构造 枚举类型通过私有有参构造注入值</span>     <span class="token class-name">ExceptionEnums</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><strong>2.自定义异常的类,从异常 枚举 列表中读取异常信息</strong></p> <pre><code class="prism language-java"><span class="token comment">/**  * 自定义异常类：包含http状态码,提示信息（父类中RuntimeException已经有message属性）  */</span> <span class="token annotation punctuation">@Data</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{<!-- --></span>      <span class="token comment">//提供http状态码属性，动态设置</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>      <span class="token comment">//ExceptionEnums中包含 装填码 以及提示消息</span>     <span class="token comment">//public LyException(ExceptionEnums enums) {<!-- --></span>     <span class="token comment">//    this.status = enums.getStatus();</span>     <span class="token comment">//}</span>      <span class="token keyword">public</span> <span class="token class-name">LyException</span><span class="token punctuation">(</span><span class="token class-name">ExceptionEnums</span> enums<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">super</span><span class="token punctuation">(</span>enums<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> enums<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><strong>3.统一异常处理机制,拦截所有异常信息</strong></p> <pre><code class="prism language-java"><span class="token comment">/**  * 作用：controllerAdvice是SPringMVC提供异常处理机制：  * 捕获所有项目模块controller产生的异常信息，将异常信息做定制给前端返回结果  */</span> <span class="token annotation punctuation">@ControllerAdvice</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicExceptionHandler</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">/*     //处理对应的异常类型：RuntimeException  ,没有封装完成的,指定状态码的异常信息     @ExceptionHandler(RuntimeException.class)     public ResponseEntity&lt;String&gt; error(RuntimeException e){         return ResponseEntity.status(400).body(e.getMessage());     }     */</span>           <span class="token comment">/**      * 处理其他自定义异常      * 最后改良：将返回数据String改为自定义的ExceptionResult      */</span>     <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">LyException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExceptionResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">LyException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExceptionResult</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><strong>4.自定义,异常返回的显示格式,以及显示的信息,更加规范化</strong></p> <pre><code class="prism language-java"> <span class="token annotation punctuation">@Getter</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionResult</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> timestamp<span class="token punctuation">;</span>      <span class="token comment">//定义异常返回的显示格式,以及显示信息</span>     <span class="token keyword">public</span> <span class="token class-name">ExceptionResult</span><span class="token punctuation">(</span><span class="token class-name">LyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//来源于 jodatime 工具包  也可自己设置</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><strong>5.代码中使用演示 , 业务中可能出现异常的地方,抛出自定义的异常,参数为自定义的枚举,也就是可能发生异常的状态码,以及异常信息</strong></p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemController</span> <span class="token punctuation">{<!-- --></span>      <span class="token annotation punctuation">@Autowired</span>     <span class="token keyword">private</span> <span class="token class-name">ItemService</span> itemService<span class="token punctuation">;</span>      <span class="token comment">/**      * ResponseEntity是SpringMVC提供请求响应对象      * status:http响应状态码 返回状态码200 说明请求成功  如果其他状态码 说明请求失败      * body：响应数据      * 如果不使用ResponseEntity，一般我们会在项目中提供自定义结果对象 Result code:状态码      */</span>     <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/item"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> <span class="token function">saveItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">//判断商品价格是否为空</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             <span class="token comment">//给前端提示错误信息  RuntimeException 状态码是固定 500 想状态码程序员控制</span>             <span class="token comment">//throw new RuntimeException("商品价格为！！");</span>             <span class="token comment">//ExceptionEnums.PRICE_IS_NULL 枚举类型中包括价格不能为空的状态码 以及提示消息</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LyException</span><span class="token punctuation">(</span><span class="token class-name">ExceptionEnums</span><span class="token punctuation">.</span>PRICE_IS_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LyException</span><span class="token punctuation">(</span><span class="token class-name">ExceptionEnums</span><span class="token punctuation">.</span>NAME_IS_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token class-name">Item</span> item1 <span class="token operator">=</span> itemService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>item1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre> <p><strong>6.返回异常的标准结构</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230110/362f3a4e0c4f469f4bd56ceb6b953105.jpg" alt="自定义全局异常处理机制"></p> </p></div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1220.htm">request和response——请求响应对象</a></p>
                                                        <p>下一个：<a href="/html/category/article-1222.htm">Shell基础 — 6、Bash基本功能（输入输出重定向）</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1303.htm" title="通过make生成执行文件的过程详解_在线工具">通过make生成执行文件的过程详解_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1291.htm" title="Springcloud通过maven打包包含公共common模块的项目">Springcloud通过maven打包包含公共common模块的项目</a></li>
                        <li class="py-2"><a href="/html/category/article-3129.htm" title="Vue结合ElementUI上传Base64编码后的图片实例_vue.js">Vue结合ElementUI上传Base64编码后的图片实例_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-1302.htm" title="java高级用法之:在JNA中使用类型映射">java高级用法之:在JNA中使用类型映射</a></li>
                        <li class="py-2"><a href="/html/category/article-1317.htm" title="JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported">JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported</a></li>
                        <li class="py-2"><a href="/html/category/article-1330.htm" title="avframe转byte数组_Spring Boot图片文件转Base64">avframe转byte数组_Spring Boot图片文件转Base64</a></li>
                        <li class="py-2"><a href="/html/category/article-1329.htm" title="Visual Studio快捷键汇总_实用技巧_">Visual Studio快捷键汇总_实用技巧_</a></li>
                        <li class="py-2"><a href="/html/category/article-1316.htm" title="vscode指定扩展安装位置">vscode指定扩展安装位置</a></li>
                        <li class="py-2"><a href="/html/category/article-1339.htm" title="分享MySQL生产库内存异常增高的排查过程_Mysql_">分享MySQL生产库内存异常增高的排查过程_Mysql_</a></li>
                        <li class="py-2"><a href="/html/category/article-1307.htm" title="在JavaScript中实现优先级排序">在JavaScript中实现优先级排序</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>