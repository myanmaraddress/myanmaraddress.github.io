<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1169.htm" />
    <title>使用JSR-303 Validation后端验证 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>使用JSR-303 Validation后端验证</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="htmledit_views"> <h2>&nbsp;</h2> <h2>一、JSR-303简介：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.ibm.com/developerworks/cn/java/j-lo-jsr303/index.html"  rel="nofollow">官网</a><br /> </h2> <p>JSR-303 是 JAVA EE 6 中的一项子规范，叫做 Bean Validation，官方参考实现是Hibernate Validator。</p> <p>此实现与 <strong>Hibernate ORM 没有任何关系</strong>。 JSR 303 用于对 Java Bean 中的字段的值进行验证。<br /> Spring MVC 3.x 之中也大力支持 JSR-303，可以在控制器中对表单提交的数据方便地验证。</p> <p>JSR-303可以使用注解的方式进行验证，它内部已经定义好了一系列的限制注解，我们只需要把这些注解标记在需要验证的实体类的属性上或是其对应的get方法上。</p> <p><strong>JSR-303 是一个数据验证的规范，但是 s<strong>pri</strong>ng 并没有对其进行实现，Hibernate Validator 是实现了这一规范的，通过此这个实现来讲 SpringMVC对JSR-303 的支持。</strong><br /> &nbsp;</p> <h2>二、JSR 303 基本的校验规则</h2> <p><strong>空检查</strong><br /><span style="color:#f33b45;">@Null</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 验证<span style="color:#3399ea;">对象</span>是否为null<br /> @NotNull &nbsp; &nbsp;&nbsp; 验证<span style="color:#3399ea;">对象</span>是否不为null, 无法查检长度为0的字符串<br /> @NotBlank &nbsp;&nbsp; 检查约束<span style="color:#3399ea;">字符串</span>是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.<br /><span style="color:#f33b45;">@NotEmpty</span> &nbsp; 检查<span style="color:#3399ea;">约束元素</span>是否为NULL或者是EMPTY.</p> <p><strong>Booelan检查</strong><br /> @AssertTrue &nbsp; &nbsp; 验证 <span style="color:#3399ea;">Boolean 对象</span>是否为 true<br /> @AssertFalse &nbsp;&nbsp; 验证 <span style="color:#3399ea;">Boolean 对象</span>是否为 false</p> <p><strong>长度检查</strong><br /> @Size(min=, max=) &nbsp; &nbsp; &nbsp; 验证<span style="color:#3399ea;">对象</span>（Array,Collection,Map,String）长度是否在给定的范围之内<br /><span style="color:#f33b45;">@Length</span>(min=, max=) &nbsp; 验证<span style="color:#3399ea;">约束字符串</span>是否包含在最小和最大之间。</p> <p><strong>日期检查</strong><br /><span style="color:#f33b45;">@Past</span> &nbsp; &nbsp; &nbsp;&nbsp; 验证<span style="color:#3399ea;"> Date 和 Calendar 对象</span>是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期<br /><span style="color:#f33b45;">@Future</span> &nbsp; &nbsp; 验证 <span style="color:#3399ea;">Date 和 Calendar 对象</span>是否在当前时间之后，验证成立的话被注释的元素一定是一个将来的日期<br /> @Pattern &nbsp; 验证 <span style="color:#3399ea;">String 对象</span>是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Pattern.Flag 的数组，表示正则表达式的相关选项。</p> <p><strong>数值检查</strong><br /> &nbsp; &nbsp; &nbsp; 建议<span style="color:#f33b45;">使用在Stirng,Integer类型，不建议使用在 int 类型上</span>，因为表单值为 空 时无法转换为 int，<br /> @Min &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 验证 <span style="color:#3399ea;">Number 和 String 对象</span>是否大等于指定的值<br /> @Max &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 验证 <span style="color:#3399ea;">Number 和 String 对象</span>是否小等于指定的值<br /><span style="color:#f33b45;">@DecimalMax&nbsp;</span> 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 小数存在精度（ <span style="color:#3399ea;">Double, float,&nbsp;BigDecimal</span> ）<br /><span style="color:#f33b45;">@DecimalMin</span> &nbsp; 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 小数存在精度<br /> @Digits &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 验证<span style="color:#3399ea;"> Number 和 String 的构成</span>是否合法<br /> @Digits(integer=,fraction=) &nbsp; 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。<br /> @Range(min=, max=) &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 被指定的元素<span style="color:#3399ea;">必须在合适的范围内</span><br /> @Range(min=10000,max=50000,message=”range.bean.wage”)<br /> @Valid &nbsp; &nbsp;&nbsp; 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 中的值部分进行校验.(是否进行递归验证)<br /> @CreditCardNumber &nbsp; &nbsp; &nbsp;&nbsp;<span style="color:#3399ea;"> 信用卡验证</span><br /><span style="color:#f33b45;">@Email &nbsp;</span> &nbsp; &nbsp;&nbsp; 验证是否是<span style="color:#3399ea;">邮件地址</span>，如果为null,不进行验证，算通过验证。<br /> @ScriptAssert(lang= ,script=, alias=)&nbsp;<br /> @URL(protocol=,host=, port=,regexp=, flags=)&nbsp;</p> <p>&nbsp;</p> <h2>三、demo操作步骤</h2> <p><strong>&nbsp; &nbsp;&nbsp; 1)&nbsp; pom.xml中引入依赖</strong></p> <pre class="has"><code>&lt;!-- JSR-303后台校验, 官方参考实现是Hibernate Validator --&gt;			 		&lt;dependency&gt; 			&lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt; 			&lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt; 			&lt;version&gt;6.0.10.Final&lt;/version&gt; 		&lt;/dependency&gt; 		&lt;dependency&gt; 		    &lt;groupId&gt;org.hibernate&lt;/groupId&gt; 		    &lt;artifactId&gt;hibernate-validator-annotation-processor&lt;/artifactId&gt; 		    &lt;version&gt;6.0.10.Final&lt;/version&gt; 		&lt;/dependency&gt;</code></pre> <p><strong>&nbsp;2)&nbsp; </strong>SpringMVC配置文件中需要 <span style="color:#f33b45;">&lt;mvc:annotation-driven "/&gt;</span> 这个标签，自动加载需要的支持类。</p> <p>&nbsp;<strong>3）在JavaBean的属性上加验证注解。</strong></p> <pre class="has"><code>public class User {	 	private int id; 	 	@NotEmpty(message="用户名不能为空") 	@Pattern(regexp="^\\w{6,18}$",message="用户名必须由6到18位的数字字母或者下划线组成") 	private String username; 	 	@NotNull 	@Length(min=6,max=32,message="密码必须为6到32位的字符串") 	private String password; 	 	@Past 	private Date birthday; 	 	@NotNull(message="年龄不能为空") 	@Max(value=1) 	@Min(value=1) 	private Integer age; 	 	@DecimalMax(value="2.5") 	@DecimalMin(value="1.0") 	private Double height; 	 	@Email 	private String email; 	@NotNull 	private Department department; 	</code></pre> <p>&nbsp;&nbsp; <strong>4）在Controller的处理方法的参数前，加<span style="color:#f33b45;">@Valid</span>注解，出错后，错误信息会放置在 <span style="color:#f33b45;">Errors或BindingResult</span> 的对象参数中。</strong></p> <pre class="has"><code>	@ModelAttribute 	public void getJspUser(@RequestParam(value="id",required=false) Integer id,  			@RequestParam(value="department.id",required=false) Integer department_id, Model model) { 		if(id !=null &amp;&amp; department_id != null) { 			User user = userService.get(id); 			Department department = departmentService.get(department_id); 			user.setDepartment(department); 			model.addAttribute("user", user); 		} 	}	           @RequestMapping(value="/add", method = RequestMethod.POST) 	public String add(@Valid User user, BindingResult errors, Model model) { 		//判断数据绑定结果 errors.getErrorCount()&gt;0 也可以 		if(errors.hasFieldErrors()) { 			System.out.println("参数值不合法！"); 			//获得所有的属性错误 			List&lt;FieldError&gt; fieldErrors = errors.getFieldErrors(); 			for (FieldError fieldError : fieldErrors) { 				//把错误信息存放在model对象中 				//model.addAttribute(fieldError.getField(), fieldError.getDefaultMessage()); 				System.out.println(fieldError.getField()+"==="+fieldError.getDefaultMessage()); 				 				model.addAttribute("departments", departmentService.getAllList()); 				return "user-add"; 			} 		} 		userService.add(user); 		return "redirect: /sshweb/users"; 	}</code></pre> <p><strong>&nbsp; &nbsp;&nbsp; 5） jsp&nbsp; 页面</strong></p> <pre class="has"><code>	&lt;h3&gt;新增用户&lt;/h3&gt; 	&lt;form:form action="${pageContext.request.contextPath }/add" method="post" modelAttribute="user"&gt; 		用户名：&lt;form:input path="username"/&gt;  &lt;form:errors path="username"/&gt; &lt;br/&gt; 		用户密码：&lt;form:input path="password"/&gt; &lt;form:errors path="password"/&gt;  &lt;br/&gt; 		email：&lt;form:input path="email"/&gt;  &lt;form:errors path="email"/&gt;&lt;br/&gt; 		用户所属部门：&lt;form:select path="department.id" itemValue="id" itemLabel="departmentname" items="${departments }"/&gt;  &lt;br/&gt; 		生日：&lt;form:input path="birthday"/&gt;  &lt;form:errors path="birthday"/&gt;&lt;br/&gt; 		年龄：&lt;form:input path="age"/&gt;   &lt;form:errors path="age"/&gt;&lt;br/&gt; 		身高：&lt;form:input path="height"/&gt; &lt;form:errors path="height"/&gt;&lt;br/&gt; 		&lt;input type="submit" value="保存"&gt; &lt;br/&gt; 	&lt;/form:form&gt;</code></pre> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> </p></div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1168.htm">JDK8新特性Optional工具类</a></p>
                                                        <p>下一个：<a href="/html/category/article-1170.htm">查看vue版本号&amp;&amp;关于 vue-cli 卸载不掉的问题</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1920.htm" title="我们如何在Java中实现自定义HashSet">我们如何在Java中实现自定义HashSet</a></li>
                        <li class="py-2"><a href="/html/category/article-1340.htm" title="请说一下你对分布式锁的理解，以及分布式锁的实现">请说一下你对分布式锁的理解，以及分布式锁的实现</a></li>
                        <li class="py-2"><a href="/html/category/article-3431.htm" title="Jackson 枚举序列化/反序列化">Jackson 枚举序列化/反序列化</a></li>
                        <li class="py-2"><a href="/html/category/article-1934.htm" title="朴素贝叶斯算法详解">朴素贝叶斯算法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1305.htm" title="Kafka delivery保证(kafka消息投递保证)">Kafka delivery保证(kafka消息投递保证)</a></li>
                        <li class="py-2"><a href="/html/category/article-3130.htm" title="python和hive结合使用">python和hive结合使用</a></li>
                        <li class="py-2"><a href="/html/category/article-3738.htm" title="水平无限循环弹幕的实现">水平无限循环弹幕的实现</a></li>
                        <li class="py-2"><a href="/html/category/article-1339.htm" title="分享MySQL生产库内存异常增高的排查过程_Mysql_">分享MySQL生产库内存异常增高的排查过程_Mysql_</a></li>
                        <li class="py-2"><a href="/html/category/article-1300.htm" title="Git基础Git对象的总结">Git基础Git对象的总结</a></li>
                        <li class="py-2"><a href="/html/category/article-3129.htm" title="Vue结合ElementUI上传Base64编码后的图片实例_vue.js">Vue结合ElementUI上传Base64编码后的图片实例_vue.js</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>