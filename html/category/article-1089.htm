<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1089.htm" />
    <title>6个pandas初学者容易犯的错误 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>6个pandas初学者容易犯的错误</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <p>我们在这里讨论6个新手容易犯的错误，这些错误与你所使用工具的API或语法无关，而是与你的知识和经验水平直接相关。在实际中如果出现了这些问题可能不会有任何的错误提示，但是在应用中却会给我们带来很大的麻烦。</p> <h2> <a id="pandas_4" rel="nofollow"></a>使用pandas自带的函数读取大文件</h2> <p>第一个错误与实际使用Pandas完成某些任务有关。具体来说我们在实际处理表格的数据集都非常庞大。使用pandas的read_csv读取大文件将是你最大的错误。</p> <p>为什么?因为它太慢了!看看这个测试，我们加载TPS十月数据集，它有1M行和大约300个特性，占用了2.2GB的磁盘空间。</p> <pre><code>import pandas as pd %%time  tps_october = pd.read_csv("data/train.csv") Wall time: 21.8 s </code></pre> <p>read_csv花了大约22秒。你可能会说22秒并不多。但是在一个项目中，需要在不同的阶段执行许多实验。我们会创建很多单独的脚本，用于清理、特征工程、选择模型，以及其他任务。多次等待数据加载20秒就变得很长了。此外，数据集可能会更大时间就会更长。那么有什么更快的解决方案呢?</p> <p>解决方案是在这个阶段放弃Pandas，使用其他为快速IO设计的替代方案。我最喜欢的是datatable，但你也可以选择Dask, Vaex, cuDF等。这里是用datatable加载相同的数据集所需要的时间:</p> <pre><code>import datatable as dt  # pip install datatble  %%time  tps_dt_october = dt.fread("data/train.csv").to_pandas()  ------------------------------------------------------------  Wall time: 2 s </code></pre> <p>只有2秒，10倍差距</p> <h2> <a id="_36" rel="nofollow"></a>没有矢量化</h2> <p>函数式编程中最重要的规则之一就是永远不要使用循环。似乎在使用 Pandas 时坚持这个“无循环”规则是加速计算的最佳方法。</p> <p>函数式编程用递归代替循环。虽然递归也会出现各种问题（这个我们这里不考虑），但是对于科学计算来说使用矢量化是最好的选择！</p> <p>矢量化是 Pandas 和 NumPy 的核心，它对整个数组而不是单个标量执行数学运算。 Pandas 已经拥有一套广泛的矢量化函数，我们无需重新发明轮子，只要关注我们的重点如何计算就好了。</p> <p>在 Pandas 中进行Python 的大部分算术运算符（+、-、*、/、**）都以矢量化方式工作。此外，在 Pandas 或 NumPy 中看到的任何其他数学函数都已经矢量化了。</p> <p>为了验证到速度的提高，我们将使用下面的 big_function，它以三列作为输入并执行一些无意义的算术作为测试：</p> <pre><code>def big_function(col1, col2, col3):     return np.log(col1 ** 10 / col2 ** 9 + np.sqrt(col3 ** 3)) </code></pre> <p>首先，我们将这个函数与 Pandas 最快的迭代器——apply 一起使用：</p> <pre><code>%time tps_october['f1000'] = tps_october.apply(       lambda row: big_function(row['f0'], row['f1'], row['f2']), axis=1     )  -------------------------------------------------  Wall time: 20.1 s </code></pre> <p>操作耗时20秒。 让我们以矢量化的方式使用核心 NumPy 数组来做同样的事情：</p> <pre><code>%time tps_october['f1001'] = big_function(tps_october['f0'].values,                                            tps_october['f1'].values,                                            tps_october['f2'].values)  ------------------------------------------------------------------  Wall time: 82 ms </code></pre> <p>只用了 82 毫秒，快了大约 250 倍。</p> <p>事实上我们不能完全抛弃循环。 因为并非所有数据操作操作都是数学运算。 但是每当发现需要使用一些循环函数（例如 apply、applymap 或 itertuples）时，花点时间看看想要做的事情是否可以矢量化是一个非常好的习惯。</p> <h2> <a id="dtypes_81" rel="nofollow"></a>数据类型，dtypes！</h2> <p>我们可以根据内存使用情况指定数据类型。</p> <p>pandas中最糟糕也是最耗内存的数据类型是 object，这也恰好限制了 Pandas 的一些功能。 剩下的我们还有浮点数和整数。 以下这张表是pandas的所有类型：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230110/031c52d0a9a972518f7ed1bd387474f1.jpg" alt="6个pandas初学者容易犯的错误"></p> <p>Pandas命名方式中，数据类型名称之后的数字表示此数据类型中的每个数字将占用多少位内存。 因此，我们的想法是将数据集中的每一列都转换为尽可能小的子类型。 我们只要根据规则来判断就可以了，这是规则表：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230110/0513b5fd0142b11d61d2901dd73e5c8c.jpg" alt="6个pandas初学者容易犯的错误"></p> <p>通常，根据上表将浮点数转换为 float16/32 并将具有正整数和负整数的列转换为 int8/16/32。 还可以将 uint8 用于布尔值和仅正整数，以进一步减少内存消耗。</p> <p>这个函数你一定很眼熟，因为他在Kaggle中被广泛使用，它根据上表将浮点数和整数转换为它们的最小子类型：</p> <pre><code>def reduce_memory_usage(df, verbose=True):     numerics = ["int8", "int16", "int32", "int64", "float16", "float32", "float64"]     start_mem = df.memory_usage().sum() / 1024 ** 2     for col in df.columns:         col_type = df[col].dtypes         if col_type in numerics:             c_min = df[col].min()             c_max = df[col].max()             if str(col_type)[:3] == "int":                 if c_min &gt; np.iinfo(np.int8).min and c_max &lt; np.iinfo(np.int8).max:                     df[col] = df[col].astype(np.int8)                 elif c_min &gt; np.iinfo(np.int16).min and c_max &lt; np.iinfo(np.int16).max:                     df[col] = df[col].astype(np.int16)                 elif c_min &gt; np.iinfo(np.int32).min and c_max &lt; np.iinfo(np.int32).max:                     df[col] = df[col].astype(np.int32)                 elif c_min &gt; np.iinfo(np.int64).min and c_max &lt; np.iinfo(np.int64).max:                     df[col] = df[col].astype(np.int64)             else:                 if (                     c_min &gt; np.finfo(np.float16).min                     and c_max &lt; np.finfo(np.float16).max                 ):                     df[col] = df[col].astype(np.float16)                 elif (                     c_min &gt; np.finfo(np.float32).min                     and c_max &lt; np.finfo(np.float32).max                 ):                     df[col] = df[col].astype(np.float32)                 else:                     df[col] = df[col].astype(np.float64)     end_mem = df.memory_usage().sum() / 1024 ** 2     if verbose:         print(             "Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)".format(                 end_mem, 100 * (start_mem - end_mem) / start_mem             )         )     return df </code></pre> <p>让我们在 TPS 十月份的数据上使用它，看看我们能减少多少：</p> <pre><code>&gt;&gt;&gt; reduce_memory_usage(tps_october) Mem. usage decreased to 509.26 Mb (76.9% reduction) </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230110/a05e8e82814ad7a34f9e24bc12af89bf.jpg" alt="6个pandas初学者容易犯的错误"></p> <p>我们将数据集从原来的 2.2GB 压缩到 510MB。当我们将df保存到csv文件时，这种内存消耗的减少会丢失因为csv还是以字符串的形式保存的，但是如果使用pickle保存那就没问题了。</p> <p>为什么要减小内存占用呢？ 在使用大型机器学习模型处理此类数据集时，内存的占用和消耗起着重要作用。 一旦遇到一些 OutOfMemory 错误，你就会开始追赶并学习这样的技巧来让计算机保持愉快的工作（谁让Kaggle只给16G的内存呢，都是逼出来的）。</p> <h2> <a id="_154" rel="nofollow"></a>不设置样式</h2> <p>Pandas 最美妙的功能之一是它能够在显示DF时设定不同的样式，在 Jupyter 中将原始DF呈现为带有一些 CSS HTML 表格。</p> <p>Pandas 允许通过 style 属性对其 DataFrame 进行样式设置。</p> <pre><code>tps_october.sample(20, axis=1).describe().T.style.bar(     subset=["mean"], color="#205ff2" ).background_gradient(subset=["std"], cmap="Reds").background_gradient(     subset=["50%"], cmap="coolwarm" ) </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230110/943410f7dd598ce91cf24a9f846017d7.jpg" alt="6个pandas初学者容易犯的错误"></p> <p>我们随机选择 20 列，为它们创建一个 5 位数的汇总，并转置结果，根据它们的大小为均值、标准差和中值列着色。添加这样的样式可以让我们更轻松地发现原始数字中的模式，设置无需使用其他的可视化库。</p> <p>实际上，不对df进行样式设置并没有错。 但是这的确是一个很好的功能，对吧。</p> <h2> <a id="_CSV_175" rel="nofollow"></a>使用 CSV格式保存文件</h2> <p>就像读取 CSV 文件非常慢一样，将数据保存回它们也是如此。 以下是将 TPS 十月数据保存到 CSV 所需的时间：</p> <pre><code>%%time  tps_october.to_csv("data/copy.csv")  ------------------------------------------  Wall time: 2min 43s </code></pre> <p>花了将近3分钟。 为了节省时间可以保存为parquet，feather 甚至pickle。</p> <pre><code>%%time  tps_october.to_feather("data/copy.feather")  Wall time: 1.05 s  --------------------------------------------------------------------------------  %%time  tps_october.to_parquet("data/copy.parquet")  Wall time: 7.84 s </code></pre> <h2> <a id="_209" rel="nofollow"></a>不看文档！</h2> <p>实际上，这个对我来说最严重的错误是没有阅读Pandas 的文档。但是一般情况下没人会阅读文档，对吧。有时候 我们宁愿在互联网上搜索数小时也不愿阅读文档。</p> <p>但是当涉及到 Pandas 时，这个就是一个非常大的错误了。因为它像sklearn一样有一个出色的用户指南，涵盖从基础知识到如何贡献代码，甚至是如何设置更漂亮的主题（也许可能就是因为太多了，所以没人看）。</p> <p>我今天提到的所有错误都可以在文档中找到。 甚至在文档的“大型数据集”部分会专门告诉你使用其他软件包（如 Dask）来读取大文件并远离 Pandas。 其实如果我有时间从头到尾阅读用户指南，我可能会提出 50 个新手错误，所以还是看看文档吧。</p> <h2> <a id="_217" rel="nofollow"></a>总结</h2> <p>今天，我们学习了新手在使用Pandas时最常犯的六个错误。</p> <p>我们这里提到的错误大部分和大数据集有关，只有当使用GB大小的数据集时可能才会出现。如果你还在处理泰坦尼克这种新手数据集，你可能都不会感觉到有这些问题。但是当你开始处理真实世界的数据集时，这些概念会让别人觉得你不是一个新手而是真正有过实际经验的人。</p> <p>作者：Bex T.</p> </p></div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1088.htm">MySQL NOW()和SYSDATE()有什么区别？</a></p>
                                                        <p>下一个：<a href="/html/category/article-1090.htm">Hbase基础（特点、架构、应用场景、集群搭建、HA设计）这一篇就够了</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1282.htm" title="Azure DevOps通过Azure Devops部署一个.NET Core WebAPI">Azure DevOps通过Azure Devops部署一个.NET Core WebAPI</a></li>
                        <li class="py-2"><a href="/html/category/article-1297.htm" title="vue2设置保存自动执行run lint配置步骤">vue2设置保存自动执行run lint配置步骤</a></li>
                        <li class="py-2"><a href="/html/category/article-1279.htm" title="Django的原生ORM框架如何支持MongoDB，同时应对客户使用时随时变动字段">Django的原生ORM框架如何支持MongoDB，同时应对客户使用时随时变动字段</a></li>
                        <li class="py-2"><a href="/html/category/article-1317.htm" title="JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported">JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported</a></li>
                        <li class="py-2"><a href="/html/category/article-1287.htm" title="Spingboot Resttemplate连接池配置">Spingboot Resttemplate连接池配置</a></li>
                        <li class="py-2"><a href="/html/category/article-1300.htm" title="Git基础Git对象的总结">Git基础Git对象的总结</a></li>
                        <li class="py-2"><a href="/html/category/article-1289.htm" title="关于MySQL支持的所有字符集的查询是什么？">关于MySQL支持的所有字符集的查询是什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-1285.htm" title="C语言栈与队列面试题详解_C 语言">C语言栈与队列面试题详解_C 语言</a></li>
                        <li class="py-2"><a href="/html/category/article-1919.htm" title="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式">React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1273.htm" title="OpenCV笔记 距离变换">OpenCV笔记 距离变换</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>