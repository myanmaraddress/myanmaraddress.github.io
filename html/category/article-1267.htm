<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1267.htm" />
    <title>docker-compose 配置kafka_Docker Compose 引用环境变量 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>docker-compose 配置kafka_Docker Compose 引用环境变量</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="htmledit_views"> <div> <p>在项目中，往往需要在 docker-compose.yml 文件中使用环境变量来控制不同的条件和使用场景。本文集中介绍 docker compose 引用环境变量的方式。<br />说明：本文的演示环境为 ubuntu 16.04。</p> <h2><b>Compose CLI 与环境变量</b></h2> <p>Compose CLI(compose command-line 即 docker-compose 程序)能够识别名称为 COMPOSE_PROJECT_NAME 和 COMPOSE_FILE 等环境变量(具体支持的环境变量请参考<u>这里</u>)。比如我们可以通过这两个环境变量为 docker-compose 指定 project 的名称和配置文件：</p> <p>$ export COMPOSE_PROJECT_NAME=TestVar $ export COMPOSE_FILE=~/projects/composecounter/docker-compose.yml</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/86b5ca1bd1dc21757ae5e4b957e8e68f.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>然后启动应用，显示的 project 名称都是我们在环境变量中指定的：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/6b3d0dc8d6891928694cd520c1185b04.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>如果设置了环境变量的同时又指定了命令行选项，那么会应用命令行选项的设置：</p> <p>$ docker-compose -p nickproject up -d</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/224dfc6cfbc42c9482cf7e48ab51a51f.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <h2><b>在 compose file 中引用环境变量</b></h2> <p>我们还可以在 compose file 中直接引用环境变量，比如下面的 demo：</p> <p>version: '3' services: web: <b>image: ${IMAGETAG}</b> ports: - "5000:5000" redis: image: "redis:alpine"</p> <p>我们通过环境变量 ${IMAGETAG} 指定了 web 的镜像，下面通过 export 的方式来为 compose 配置文件中的环境变量传值：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/24baa70d0cf80df85828e3a2017d5ba2.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>注意，如果对应的环境变量没有被设置，那么 compose 就会把它替换为一个空字符串：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/42cfc54df5b94be6343deec574ddba2f.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>碰到这种情况，我们可以在 compose 的配置文件中为该变量设置一个默认值：</p> <p>version: '3' services: web: <b>image: ${IMAGETAG:-defaultwebimage}</b> ports: - "5000:5000" redis: image: "redis:alpine"</p> <p>这样，如果没有设置 IMAGETAG 变量，就会应用 defaultwebimage：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/83024c8aa8339dcd1723274b1a4a2bd4.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>除了这种方式，我们还可以通过后面将介绍的 .env 文件来为环境变量设置默认值。</p> <h2><b>把环境变量传递给容器</b></h2> <p>先来看一下在 compose file 中如何为容器设置环境变量：</p> <p>web: <b>environment: DEBUG: 1</b></p> <p>compose file 中的 environment 节点用来为容器设置环境变量，上面的写法等同于：</p> <p>$ docker run <b>-e DEBUG=1</b></p> <p>要把当前 shell 环境变量的值传递给容器的环境变量也很简单，去掉上面代码中的赋值部分就可以了：</p> <p>web: <b>environment: DEBUG:</b></p> <p>这种情况下，如果没有在当前的 shell 中导出环境变量 DEBUG，compose file 中会把它解释为 null：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/aeb3061bf70bd14b1e3342cf9c1daa2d.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>在试试导出环境变量 DEBUG 的情况：</p> <p>$ export DEBUG=1</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/236def0f21b1fb831d5fa508ace75f1b.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>这才是我们设计的正确的使用场景！</p> <h2><b>使用文件为容器设置多个环境变量</b></h2> <p>如果觉得通过 environment 为容器设置环境变量不够过瘾，我们还可以像 docker -run 的 --env-file 参数一样通过文件为容器设置环境变量：</p> <p>web: env_file: <b>- web-variables.env</b></p> <p>注意，web-variables.env 文件的路径是相对于 docker-compose.yml 文件的相对路径。上面的代码效果与下面的代码相同：</p> <p>$ docker run <b>--env-file=web-variables.env</b></p> <p>web-variables.env 文件中可以定义一个或多个环境变量：</p> <p># define web container env APPNAME=helloworld AUTHOR=Nick Li VERSION=1.0</p> <p>检查下结果：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/e8c95beca7b0042820d86d8c48562ee8.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>原来 compose 把 env_file 的设置翻译成了 environment！</p> <h2><b>.env 文件</b></h2> <p>当我们在 docker-compose.yml 文件中引用了大量的环境变量时，对每个环境变量都设置默认值将是繁琐的，并且也会影响 docker-compose.yml 简洁程度。此时我们可以通过 .env 文件来为 docker-compose.yml 文件引用的所有环境变量设置默认值！<br />修改 docker-compose.yml 文件的内容如下：</p> <p>version: '3' services: web: image: ${IMAGETAG} environment: APPNAME: AUTHOR: VERSION: ports: - "5000:5000" redis: image: "redis:alpine"</p> <p>然后在相同的目录下创建 .env 文件，编辑其内容如下：</p> <p># define env var default value. IMAGETAG=defaultwebimage APPNAME=default app name AUTHOR=default author name VERSION=default version is 1.0</p> <p>检查下结果，此时所有的环境变量都显示为 .env 文件中定义的默认值：</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/f8186f9d5c16bcbf7ca0323cf9219f3c.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <h2><b>配置不同场景下的环境变量</b></h2> <p>从前面的部分中我们可以看到，docker compose 提供了足够的灵活性来让我们设置 docker-compose.yml 文件中引用的环境变量，它们的优先级如下：</p> <ol> <li>Compose file</li> <li><b>Shell environment variables</b></li> <li>Environment file</li> <li>Dockerfile</li> <li>Variable is not defined</li> </ol> <p><b>首先</b>，在 docker-compose.yml 文件中直接设置的值优先级是最高的。<b>然后</b>是在当前 shell 中 export 的环境变量值。<b>接下来</b>是在环境变量文件中定义的值。<b>再接下来</b>是在 Dockerfile 中定义的值。<b>最后</b>还没有找到相关的环境变量就认为该环境变量没有被定义。</p> <p>根据上面的优先级定义，我们可以把不同场景下的环境变量定义在不同的 shell 脚本中并导出，然后在执行 docker-compose 命令前先执行 source 命令把 shell 脚本中定义的环境变量导出到当前的 shell 中。通过这样的方式可以减少维护环境变量的地方，下面的例子中我们分别在 docker-compose.yml 文件所在的目录创建 test.sh 和 prod.sh，test.sh 的内容如下：</p> <p>#!/bin/bash # define env var default value. export IMAGETAG=web:v1 export APPNAME=HelloWorld export AUTHOR=Nick Li export VERSION=1.0</p> <p>prod.sh 的内容如下：</p> <p>#!/bin/bash # define env var default value. export IMAGETAG=webpord:v1 export APPNAME=HelloWorldProd export AUTHOR=Nick Li export VERSION=1.0LTS</p> <p>在测试环境下，执行下面的命令：</p> <p>$ source test.sh $ docker-compose config</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/dd94217e177537c1f46ba5b777e8abcf.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>此时 docker-compose.yml 中的环境变量应用的都是测试环境相关的设置。</p> <p>而在生产环境下，执行下面的命令：</p> <p>$ source prod.sh $ docker-compose config</p> <div style="text-align:center;">   <img decoding="async" src="http://img.555519.xyz/uploads/20230217/a61827c403cf5c4907a5d9cfdc954bfc.jpg" alt="docker-compose 配置kafka_Docker Compose 引用环境变量"> </div> <p>此时 docker-compose.yml 中的环境变量应用的都是生产环境相关的设置。</p> <h2><b>总结</b></h2> <p>docker compose 对环境变量的使用提供了非常丰富支持和灵活的使用方式。希望通过本文的总结可以帮助大家理清相关的用法，并能够以简洁的方式为不同的使用场景提供支持。</p> <p>欢迎工作一到五年的Java工程师朋友们加入Java程序员开发： 854393687</p> <p>群内提供免费的Java架构学习资料（里面有高可用、高并发、高性能及分布式、Jvm性能调优、Spring源码，MyBatis，Netty,Redis,Kafka,Mysql,Zookeeper,Tomcat,Docker,Dubbo,Nginx等多个知识点的架构资料）合理利用自己每一分每一秒的时间来学习提升自己，不要再用"没有时间“来掩饰自己思想上的懒惰！趁年轻，使劲拼，给未来的自己一个交代！</p> </div></div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1266.htm">HTML URL 编码转换表</a></p>
                                                        <p>下一个：<a href="/html/category/article-1268.htm">c++堆内存默认大小_线上内存暴涨问题定位和解决</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1934.htm" title="朴素贝叶斯算法详解">朴素贝叶斯算法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1318.htm" title="vue项目中,如何实现excel的导入导出excel导入功能-组件封装">vue项目中,如何实现excel的导入导出excel导入功能-组件封装</a></li>
                        <li class="py-2"><a href="/html/category/article-1349.htm" title="父组件调用子组件的方法-子组件向父组件传值">父组件调用子组件的方法-子组件向父组件传值</a></li>
                        <li class="py-2"><a href="/html/category/article-1933.htm" title="vue组件间的传值，父传子，子传父，兄弟之间传值，跨级传值">vue组件间的传值，父传子，子传父，兄弟之间传值，跨级传值</a></li>
                        <li class="py-2"><a href="/html/category/article-1309.htm" title="sqlserver 中使用sqlcmd 执行几百M的.sql文件">sqlserver 中使用sqlcmd 执行几百M的.sql文件</a></li>
                        <li class="py-2"><a href="/html/category/article-1920.htm" title="我们如何在Java中实现自定义HashSet">我们如何在Java中实现自定义HashSet</a></li>
                        <li class="py-2"><a href="/html/category/article-1307.htm" title="在JavaScript中实现优先级排序">在JavaScript中实现优先级排序</a></li>
                        <li class="py-2"><a href="/html/category/article-1320.htm" title="46.java编程思想——传递和返回对象 只读类">46.java编程思想——传递和返回对象 只读类</a></li>
                        <li class="py-2"><a href="/html/category/article-1350.htm" title="小程序怎么自定义导航栏，导航栏放图片、设置高度">小程序怎么自定义导航栏，导航栏放图片、设置高度</a></li>
                        <li class="py-2"><a href="/html/category/article-1305.htm" title="Kafka delivery保证(kafka消息投递保证)">Kafka delivery保证(kafka消息投递保证)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">40</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>