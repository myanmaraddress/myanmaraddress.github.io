<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1226.htm" />
    <title>Git基础配置Git用户签名的方式详解 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>Git基础配置Git用户签名的方式详解</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div class="toc"> <div class="toc-container-header"><span style="font-size: 1.5em;">1、配置Git签名</span></div> </div> <h3 id="1语法">（1）语法</h3> <pre><code class="language-python">$ git config 配置文件作用域 user.name '用户名' $ git config 配置文件作用域 user.email '邮箱地址'</code></pre> <p>示例如下：</p> <table> <thead> <tr> <th>配置 user.name和user.email</th> </tr> </thead> <tbody> <tr> <td><code>$ git config --global user.name ‘your_name'</code></td> </tr> <tr> <td><code>$ git config --global user.email ‘your_email@domain.com'</code></td> </tr> </tbody> </table> <p><strong>注意</strong>：这个<code>email</code>一定是有效的，是你能够收得到邮件的<code>email</code>。</p> <h3 id="2配置系统用户签名">（2）配置系统用户签名</h3> <p>可在任意目录下运行创建命令：<code>git config --system</code></p> <pre><code class="language-bash">L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit $ git config --system user.name 'tang_s'  L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit $ git config --system user.email 'tang_s@126.com'</code></pre> <blockquote> <p>提示：在Git中，没有提示就是最好的提示。</p> </blockquote> <p>系统用户注册信息会写在本地Git的安装目录下，<code>...\etc\gitconfig</code>文件中。</p> <pre><code class="language-bash">L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit $ cat /f/DevInstall/Git/GitforWindows/etc/gitconfig [diff "astextplain"]         textconv = astextplain [filter "lfs"]         clean = git-lfs clean -- %f         smudge = git-lfs smudge -- %f         process = git-lfs filter-process         required = true [http]         sslBackend = openssl         sslCAInfo = F:/DevInstall/Git/GitforWindows/mingw64/ssl/certs/ca-bundle.crt [core]         autocrlf = true         fscache = true         symlinks = false [credential]         helper = manager [user]         name = tang_s         email = tang_s@126.com</code></pre> <blockquote> <p>提示：之前的Git版本中，<code>gitconfig</code>文件是在，Git安装目录下<code>mingw64</code>目录中的<code>etc/gitconfig</code>。</p> </blockquote> <h3 id="3配置全局用户签名">（3）配置全局用户签名</h3> <p>可在任意目录下运行创建命令：<code>git config --global</code></p> <pre><code class="language-bash"># 在任何位置执行都可以 # 执行这个配置表示你这台机器上所有的Git仓库都会使用这个配置， # 当然也可以对某个仓库指定不同的用户名和Email地址(本地用户)。 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit $ git config --global user.name 'sun_wk'  L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit $ git config --global user.email 'sun_wk@126.com'</code></pre> <p>全局用户注册的信息，会写到当前用户目录下<code>.gitconfig</code>文件中。</p> <pre><code class="language-bash">L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit $ cat /c/Users/L/.gitconfig [user]         name = sun_wk         email = sun_wk@126.com</code></pre> <h3 id="4配置本地用户签名">（4）配置本地用户签名</h3> <p>本地库用户只能在当前的本地库目录下运行该命令：</p> <pre><code class="language-python"># 注意如果是配置local配置文件签名，可以省略--local参数 $ git config --local user.name 'sha_hs' $ git config --local user.email 'sha_hs@126.com'</code></pre> <blockquote> <p>注意：</p> <p>执行上边命令，要在一个仓库中执行，否则会提示你：</p> <p><code>fatal: --local can only be used inside a git repository</code></p> <p>还有<code>--local</code>选项只能在Git仓库中使用。</p> </blockquote> <p>演示：</p> <pre><code class="language-bash"># 此时learngit目录不是一个本地Git仓库 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit $ git config --local user.name '' fatal: --local can only be used inside a git repository  # 初始化learngit目录为Git本地仓库 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit $ git init Initialized empty Git repository in J:/git-repository/learngit/.git/  L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master)  # 配置本地用户签名 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master) $ git config --local user.name 'sha_hs'  L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master) $ git config --local user.email 'sha_hs@126.com'</code></pre> <p>本地用户注册信息，会写到当前版本库目录下的<code>.git</code>目录中的<code>config</code>文件中。</p> <pre><code class="language-bash">L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master) $ cat .git/config [core]         repositoryformatversion = 0         filemode = false         bare = false         logallrefupdates = true         symlinks = false         ignorecase = true [user]         name = sha_hs         email = sha_hs@126.com</code></pre> <blockquote> <p>注意：</p> <ul> <li>签名设置的用户名和邮箱，主要作用就是区分不同开发人员的身份。</li> <li>这里设置的签名和登录远程库，也就是代码托管中心的账号、密码没有任何关系。</li> <li>Email地址没有要求和用户名一致，甚至Email地址不存在都没事。</li> <li>但是在实际工作中，这个Email一定是有效的，是你能够收得到邮件的Email。</li> </ul> </blockquote> <h2 id="2查看三个配置文件的用户签名">2、查看三个配置文件的用户签名</h2> <p>通过命令的方式查看三个配置文件的用户签名。</p> <h3 id="1语法-1">（1）语法</h3> <ul> <li>执行<code>git config</code>命令，来查看各作用域配置文件中的配置信息。（这个命令在任何路径下都能执行）</li> <li>只执行<code>git config</code>命令，会显示<code>git config</code>命令所有的可用参数。</li> <li>执行<code>git config --list</code>命令，查看当前系统中Git的所有配置，三个配置文件所有的配置都显示出来。</li> <li>查看指定指定配置文件的内容：<br /> <table> <thead> <tr> <th>执行语句</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td><code>$ git config --list --local</code></td> <td>查看项目/仓库级别的配置文件信息</td> </tr> <tr> <td><code>$ git config --list --global</code></td> <td>查看用户级别配置文件信息</td> </tr> <tr> <td><code>$ git config --list --system</code></td> <td>查看系统级别配置文件信息</td> </tr> </tbody> </table> </li> </ul> <h3 id="2查看项目仓库级别的配置文件信息local">（2）查看项目/仓库级别的配置文件信息（local）</h3> <p>需要进入到一个仓库中，执行<code>$ git config --list --local</code>命令，才能显示该仓库的配置信息。否则会出现提示<code>fatal: --local can only be used inside a git repository</code>，<code>--local</code>选项只能在Git仓库中使用。</p> <pre><code class="language-bash">L@DESKTOP-T2AI2SU MINGW64 /j/git-repository $ git config --list --local fatal: --local can only be used inside a git repository  L@DESKTOP-T2AI2SU MINGW64 /j/git-repository $ cd learngit/  L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master) $ git config --list --local core.repositoryformatversion=0 core.filemode=false core.bare=false core.logallrefupdates=true core.symlinks=false core.ignorecase=true user.name=sha_hs user.email=sha_hs@126.com</code></pre> <p>提示：</p> <p>执行<code>$ git config --list --local</code>命令时， Git会读取仓库中<code>.git</code>目录下的<code>.git/config</code>配置文件，该文件含有当前仓库的配置信息。</p> <pre><code class="language-bash"># 查看.git目录 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master) $ ll .git/ total 7 -rw-r--r-- 1 L 197121 176  4月  2 22:43 config -rw-r--r-- 1 L 197121  73  4月  2 22:41 description -rw-r--r-- 1 L 197121  23  4月  2 22:41 HEAD drwxr-xr-x 1 L 197121   0  4月  2 22:41 hooks/ drwxr-xr-x 1 L 197121   0  4月  2 22:41 info/ drwxr-xr-x 1 L 197121   0  4月  2 22:41 objects/ drwxr-xr-x 1 L 197121   0  4月  2 22:41 refs/  # 查看.git/config文件中的内容 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master) $ cat .git/config [core]      repositoryformatversion = 0      filemode = false      bare = false      logallrefupdates = true      symlinks = false      ignorecase = true [user]      name = sha_hs      email = sha_hs@126.com</code></pre> <h3 id="3查看用户全局级别的配置文件信息global">（3）查看用户/全局级别的配置文件信息（global）</h3> <p>在任何位置执行<code>$ git config --list --global</code>命令即可。</p> <pre><code class="language-bash"># 任何目录下执行都可以 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master) $ git config --list --global user.name=sun_wk user.email=sun_wk@126.com</code></pre> <blockquote> <p>注意：</p> <p>如果我们是新安装的Git，还没有配置过<code>global</code>作用域内的配置信息，<code>global</code>级别的配置文件是没有的，只有我们配置一次<code>global</code>级别的配置信息，配置文件才会生成。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ad3c0745a0973a30221a6518d1e35274.jpg" alt="Git基础配置Git用户签名的方式详解"></p> <p><code>fatal: unable to read config file 'C:/Users/L/.gitconfig': No such file or directory</code>：提示你无法读取配置文件<code>'C:/Users/L/.gitconfig'</code>：没有此类文件或目录。</p> </blockquote> <blockquote> <p>提示：</p> <p>当我们配置过<code>global</code>作用域中的信息后，<code>C：/Users/L/</code>中的<code>.gitconfig</code>文件出现了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/309b3ec66d9e14405c9fc2738ef56680.jpg" alt="Git基础配置Git用户签名的方式详解"></p> <p>执行<code>git config --list --global</code>命令后，查看的就是<code>C:/Users/L/.gitconfig</code>文件中的内容。</p> </blockquote> <h3 id="4查看系统级别的配置文件信息system">（4）查看系统级别的配置文件信息（system）</h3> <p>在任何位置执行<code>$ git config --list --system</code>命令即可。</p> <p>演示：</p> <pre><code class="language-bash">L@DESKTOP-T2AI2SU MINGW64 /j/git-repository $ git config --list --system diff.astextplain.textconv=astextplain filter.lfs.clean=git-lfs clean -- %f filter.lfs.smudge=git-lfs smudge -- %f filter.lfs.process=git-lfs filter-process filter.lfs.required=true http.sslbackend=openssl http.sslcainfo=F:/DevInstall/Git/GitforWindows/mingw64/ssl/certs/ca-bundle.crt core.autocrlf=true core.fscache=true core.symlinks=false credential.helper=manager user.name=tang_s user.email=tang_s@126.com</code></pre> <blockquote> <p>提示：</p> <p>该命令读取的配置文件所在的位置是，Git安装目录下的<code>etc</code>目录中的<code>gitconfig</code>文件。</p> <p>查看<code>gitconfig</code>文件中的内容，与上边显示的内容是对应的。</p> </blockquote> <h3 id="5查看当前系统中git的所有配置信息">（5）查看当前系统中Git的所有配置信息</h3> <p>执行<code>git config --list</code>命令，查看当前系统中Git的所有配置，上面三个配置文件所有的配置都显示出来。</p> <p>示例：</p> <pre><code class="language-bash"># 如果没有再本地仓库中执行该命令，只显示系统用户和全局用户配置文件中的信息 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository $ git config --list diff.astextplain.textconv=astextplain filter.lfs.clean=git-lfs clean -- %f filter.lfs.smudge=git-lfs smudge -- %f filter.lfs.process=git-lfs filter-process filter.lfs.required=true http.sslbackend=openssl http.sslcainfo=F:/DevInstall/Git/GitforWindows/mingw64/ssl/certs/ca-bundle.crt core.autocrlf=true core.fscache=true core.symlinks=false credential.helper=manager user.name=tang_s    # 系统用户签名 user.email=tang_s@126.com user.name=sun_wk	# 全局用户签名 user.email=sun_wk@126.com  # 如果在本地仓库中执行该命令，三种用户配置文件的信息都会显示出来 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository $ cd learngit/  L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/learngit (master) $ git config --list diff.astextplain.textconv=astextplain filter.lfs.clean=git-lfs clean -- %f filter.lfs.smudge=git-lfs smudge -- %f filter.lfs.process=git-lfs filter-process filter.lfs.required=true http.sslbackend=openssl http.sslcainfo=F:/DevInstall/Git/GitforWindows/mingw64/ssl/certs/ca-bundle.crt core.autocrlf=true core.fscache=true core.symlinks=false credential.helper=manager user.name=tang_s    # 系统用户签名 user.email=tang_s@126.com user.name=sun_wk  	# 全局用户签名 user.email=sun_wk@126.com core.repositoryformatversion=0 core.filemode=false core.bare=false core.logallrefupdates=true core.symlinks=false core.ignorecase=true user.name=sha_hs	# 本地用户签名 user.email=sha_hs@126.com</code></pre> <h2 id="3总结">3、总结</h2> <ul> <li>在本地Git的安装目录下，<code>etc\gitconfig</code>文件：是对登陆该操作系统的所有用户都普遍适用的配置。若使用<code>git config</code>命令时加上<code>--system</code>选项，读写的就是这个文件中的内容。</li> <li>当前操作系统用户目录下<code>.gitconfig</code>文件：该配置文件只适用于该用户，该用户可以配置Git用户签名等信息到这个配置文件中，是对这台计算机上所有的Git仓库适用。若使用<code>git config</code>命令时加上<code>--global</code>选项，读写的就是这个文件中的内容。</li> <li>Git本地仓库中<code>.git/config</code>文件：当前项目的Git本地仓库中的配置文件，文件中的配置仅仅针对当前项目仓库有效。</li> </ul> <blockquote> <p>提示：每一个级别的配置都会覆盖上层的相同配置。（<code>local</code>覆盖<code>global</code>覆盖<code>system</code>）</p> </blockquote> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1225.htm">【linux】nohup运行jar包出现nohup: redirecting stderr to stdout解决办法</a></p>
                                                        <p>下一个：<a href="/html/category/article-1227.htm">Spring Cloud 集成 Sleuth+Zipkin+Mysql</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1299.htm" title="linux信号量semaphore">linux信号量semaphore</a></li>
                        <li class="py-2"><a href="/html/category/article-1947.htm" title="Vant组件样式没有生效">Vant组件样式没有生效</a></li>
                        <li class="py-2"><a href="/html/category/article-1310.htm" title="TensorFlow 模型保存/载入的两种方法">TensorFlow 模型保存/载入的两种方法</a></li>
                        <li class="py-2"><a href="/html/category/article-2832.htm" title="pytorch 自动构建任意层的深度神经网络(DNN)">pytorch 自动构建任意层的深度神经网络(DNN)</a></li>
                        <li class="py-2"><a href="/html/category/article-3431.htm" title="Jackson 枚举序列化/反序列化">Jackson 枚举序列化/反序列化</a></li>
                        <li class="py-2"><a href="/html/category/article-1316.htm" title="vscode指定扩展安装位置">vscode指定扩展安装位置</a></li>
                        <li class="py-2"><a href="/html/category/article-1315.htm" title="关于对称算法中数据的填充模式">关于对称算法中数据的填充模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1317.htm" title="JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported">JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported</a></li>
                        <li class="py-2"><a href="/html/category/article-1340.htm" title="请说一下你对分布式锁的理解，以及分布式锁的实现">请说一下你对分布式锁的理解，以及分布式锁的实现</a></li>
                        <li class="py-2"><a href="/html/category/article-1300.htm" title="Git基础Git对象的总结">Git基础Git对象的总结</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">56</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>