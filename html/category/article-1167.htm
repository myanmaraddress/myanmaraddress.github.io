<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1167.htm" />
    <title>SpringBoot 整合ActiveMQ - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>SpringBoot 整合ActiveMQ</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="markdown_views prism-github-gist"> <div class="toc"> <h3>文章目录</h3> <ul> <li> <ul> <li> <ul> <li> <ul> <li> <ul> <li><a href="#_1" rel="nofollow"></a></li> <li> <ul> <li><a href="#1__2" rel="nofollow">1. 引入依赖</a></li> <li><a href="#2___31" rel="nofollow">2. 配置文件</a></li> <li><a href="#3__79" rel="nofollow">3. 生产者</a></li> <li><a href="#4_config_199" rel="nofollow">4. 配置config</a></li> <li><a href="#5_queue_313" rel="nofollow">5. queue消费者</a></li> <li><a href="#6_topic_354" rel="nofollow">6. topic消费者</a></li> <li><a href="#6__ActiveMQ__413" rel="nofollow">6. ActiveMQ 消息存储规则</a></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </div> <h5><a id="_1" rel="nofollow"></a></h5> <h6><a id="1__2" rel="nofollow"></a>1. 引入依赖</h6> <p>pom文件引入activemq依赖</p> <pre><code class="prism language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>--activeMq配置--<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-boot-starter-activemq<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.apache.activemq<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>activemq-pool<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">5.15</span>.<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/version<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.projectlombok<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>lombok<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-boot-starter-web<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>com.alibaba<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>fastjson<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">2.0</span>.<span class="token operator"><span class="token file-descriptor important">7</span>&lt;</span>/version<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span></code></pre> <h6><a id="2___31" rel="nofollow"></a>2. 配置文件</h6> <pre><code class="prism language-bash">spring:   activemq:     user: admin     password: admin     broker-url: failover:<span class="token punctuation">(</span>tcp://192.168.43.666:61616<span class="token punctuation">)</span><span class="token comment">#是否信任所有包(如果传递的是对象则需要设置为true，默认是传字符串)</span>     packages:       trust-all:<span class="token boolean">true</span><span class="token comment">#连接池</span>     pool:       enabled:<span class="token boolean">true</span>       max-connections:<span class="token number">5</span>       idle-timeout:<span class="token number">30000</span><span class="token comment">#      expiry-timeout: 0</span>     jms:<span class="token comment">#默认使用queue模式，使用topic则需要设置为true</span>       pub-sub-domain:<span class="token boolean">true</span><span class="token comment"># 是否信任所有包</span><span class="token comment">#spring.activemq.packages.trust-all=</span><span class="token comment"># 要信任的特定包的逗号分隔列表（当不信任所有包时）</span><span class="token comment">#spring.activemq.packages.trusted=</span><span class="token comment"># 当连接请求和池满时是否阻塞。设置false会抛“JMSException异常”。</span><span class="token comment">#spring.activemq.pool.block-if-full=true</span><span class="token comment"># 如果池仍然满，则在抛出异常前阻塞时间。</span><span class="token comment">#spring.activemq.pool.block-if-full-timeout=-1ms</span><span class="token comment"># 是否在启动时创建连接。可以在启动时用于加热池。</span><span class="token comment">#spring.activemq.pool.create-connection-on-startup=true</span><span class="token comment"># 是否用Pooledconnectionfactory代替普通的ConnectionFactory。</span><span class="token comment">#spring.activemq.pool.enabled=false</span><span class="token comment"># 连接过期超时。</span><span class="token comment">#spring.activemq.pool.expiry-timeout=0ms</span><span class="token comment"># 连接空闲超时</span><span class="token comment">#spring.activemq.pool.idle-timeout=30s</span><span class="token comment"># 连接池最大连接数</span><span class="token comment">#spring.activemq.pool.max-connections=1</span><span class="token comment"># 每个连接的有效会话的最大数目。</span><span class="token comment">#spring.activemq.pool.maximum-active-session-per-connection=500</span><span class="token comment"># 当有"JMSException"时尝试重新连接</span><span class="token comment">#spring.activemq.pool.reconnect-on-exception=true</span><span class="token comment"># 在空闲连接清除线程之间运行的时间。当为负数时，没有空闲连接驱逐线程运行。</span><span class="token comment">#spring.activemq.pool.time-between-expiration-check=-1ms</span><span class="token comment"># 是否只使用一个MessageProducer</span><span class="token comment">#spring.activemq.pool.use-anonymous-producers=true</span></code></pre> <h6><a id="3__79" rel="nofollow"></a>3. 生产者</h6> <pre><code class="prism language-bash">package com.gblfy.producer<span class="token punctuation">;</span><span class="token function">import</span> org.apache.activemq.ScheduledMessage<span class="token punctuation">;</span><span class="token function">import</span> org.apache.activemq.command.ActiveMQQueue<span class="token punctuation">;</span><span class="token function">import</span> org.apache.activemq.command.ActiveMQTopic<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.beans.factory.annotation.Autowired<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.boot.autoconfigure.jms.JmsProperties<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jms.core.JmsMessagingTemplate<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.web.bind.annotation.PathVariable<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.web.bind.annotation.RequestMapping<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.web.bind.annotation.RestController<span class="token punctuation">;</span><span class="token function">import</span> javax.jms.*<span class="token punctuation">;</span><span class="token function">import</span> java.io.Serializable<span class="token punctuation">;</span>  /**  * 发送消息  *  * @author gblfy  * @date<span class="token number">2022</span>-11-02  */ @RestController @RequestMapping<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/active"</span><span class="token punctuation">)</span> public class SendController<span class="token punctuation">{<!-- --></span>     //也可以注入JmsTemplate，JmsMessagingTemplate对JmsTemplate进行了封装     @Autowired     private JmsMessagingTemplate jmsMessagingTemplate<span class="token punctuation">;</span>      /**      * 发送消息接口      * 发送queue消息 ：http://127.0.0.1:8080/active/send?msg<span class="token operator">=</span>ceshi1234      * 发送topic 消息： http://127.0.0.1:8080/active/topic/send?msg<span class="token operator">=</span>ceshi1234      * 发送queue消息<span class="token punctuation">(</span>延迟time毫秒<span class="token punctuation">)</span> ：http://127.0.0.1:8080/active/send?msg<span class="token operator">=</span>ceshi1234<span class="token operator">&amp;</span><span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">5000</span>      *      * @param msg  消息      * @param<span class="token builtin class-name">type</span> url中参数,非必须      * @param<span class="token function">time</span>      * @return      */     @RequestMapping<span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token string">"/send"</span>,<span class="token string">"/{type}/send"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     public String send<span class="token punctuation">(</span>@PathVariable<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"type"</span>, required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span> String type, String msg, Long<span class="token function">time</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         Destination destination<span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token builtin class-name">type</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         switch<span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">case</span><span class="token string">"topic"</span><span class="token builtin class-name">:</span>                 //发送广播消息                 destination<span class="token operator">=</span> new ActiveMQTopic<span class="token punctuation">(</span><span class="token string">"active.topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>             default:                 //发送 队列消息                 destination<span class="token operator">=</span> new ActiveMQQueue<span class="token punctuation">(</span><span class="token string">"active.queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         // System.out.println<span class="token punctuation">(</span><span class="token string">"开始请求发送："</span>+DateUtil.getStringDate<span class="token punctuation">(</span>new Date<span class="token punctuation">(</span><span class="token punctuation">)</span>,<span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">!=</span> null<span class="token operator">&amp;&amp;</span><span class="token function">time</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             //延迟队列，延迟time毫秒             //延迟队列需要在<span class="token operator">&lt;</span>broker<span class="token operator">&gt;</span>标签上增加属性<span class="token assign-left variable">schedulerSupport</span><span class="token operator">=</span><span class="token string">"true"</span>             delaySend<span class="token punctuation">(</span>destination, msg,<span class="token function">time</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>             jmsMessagingTemplate.convertAndSend<span class="token punctuation">(</span>destination, msg<span class="token punctuation">)</span><span class="token punctuation">;</span>//无序             //jmsMessagingTemplate.convertSendAndReceive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//有序<span class="token punctuation">}</span><span class="token builtin class-name">return</span><span class="token string">"activemq消息发送成功 队列消息："</span> + msg<span class="token punctuation">;</span><span class="token punctuation">}</span>      /**      * 延时发送      * 说明：延迟队列需要在<span class="token operator">&lt;</span>broker<span class="token operator">&gt;</span>标签上增加属性<span class="token assign-left variable">schedulerSupport</span><span class="token operator">=</span><span class="token string">"true"</span>      *      * @param destination 发送的队列      * @param data        发送的消息      * @param<span class="token function">time</span>        延迟时间 /毫秒      */     public<span class="token operator">&lt;</span>T extends Serializable<span class="token operator">&gt;</span> void delaySend<span class="token punctuation">(</span>Destination destination, T data, Long<span class="token function">time</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         Connection connection<span class="token operator">=</span> null<span class="token punctuation">;</span>         Session session<span class="token operator">=</span> null<span class="token punctuation">;</span>         MessageProducer producer<span class="token operator">=</span> null<span class="token punctuation">;</span>         // 获取连接工厂         ConnectionFactory connectionFactory<span class="token operator">=</span> jmsMessagingTemplate.getConnectionFactory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             // 获取连接             connection<span class="token operator">=</span> connectionFactory.createConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             connection.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             // 获取session，true开启事务，false关闭事务             session<span class="token operator">=</span> connection.createSession<span class="token punctuation">(</span>Boolean.TRUE, Session.AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>             // 创建一个消息队列             producer<span class="token operator">=</span> session.createProducer<span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>             producer.setDeliveryMode<span class="token punctuation">(</span>JmsProperties.DeliveryMode.PERSISTENT.getValue<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>             ObjectMessage message<span class="token operator">=</span> session.createObjectMessage<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>             //设置延迟时间             message.setLongProperty<span class="token punctuation">(</span>ScheduledMessage.AMQ_SCHEDULED_DELAY,<span class="token function">time</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             // 发送消息             producer.send<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>             session.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> finally<span class="token punctuation">{<!-- --></span>             try<span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>producer<span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     producer.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     connection.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h6><a id="4_config_199" rel="nofollow"></a>4. 配置config</h6> <pre><code class="prism language-bash">package com.gblfy.config<span class="token punctuation">;</span><span class="token function">import</span> org.apache.activemq.ActiveMQConnectionFactory<span class="token punctuation">;</span><span class="token function">import</span> org.apache.activemq.RedeliveryPolicy<span class="token punctuation">;</span><span class="token function">import</span> org.apache.activemq.command.ActiveMQQueue<span class="token punctuation">;</span><span class="token function">import</span> org.apache.activemq.command.ActiveMQTopic<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.beans.factory.annotation.Value<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.annotation.Bean<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.annotation.Configuration<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jms.annotation.EnableJms<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jms.config.DefaultJmsListenerContainerFactory<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jms.config.JmsListenerContainerFactory<span class="token punctuation">;</span><span class="token function">import</span> javax.jms.Queue<span class="token punctuation">;</span><span class="token function">import</span> javax.jms.Topic<span class="token punctuation">;</span>  /**  * 描述:  * activemq 有两种模式 queue 和 topic  * queue 模式是单对单，有多个消费者的情况下则是使用轮询监听  * topic 模式/广播模式/发布订阅模式 是一对多，发送消息所有的消费者都能够监听到  *  * @author gblfy  * @date<span class="token number">2022</span>-11-02  */ @EnableJms @Configuration public class ActiveMQConfig<span class="token punctuation">{<!-- --></span>     //队列名     private static final String queueName<span class="token operator">=</span><span class="token string">"active.queue"</span><span class="token punctuation">;</span>     //主题名     private static final String topicName<span class="token operator">=</span><span class="token string">"active.topic"</span><span class="token punctuation">;</span>      @Value<span class="token punctuation">(</span><span class="token string">"<span class="token variable">${spring.activemq.user<span class="token operator">:</span>}</span>"</span><span class="token punctuation">)</span>     private String username<span class="token punctuation">;</span>     @Value<span class="token punctuation">(</span><span class="token string">"<span class="token variable">${spring.activemq.password<span class="token operator">:</span>}</span>"</span><span class="token punctuation">)</span>     private String password<span class="token punctuation">;</span>     @Value<span class="token punctuation">(</span><span class="token string">"<span class="token variable">${spring.activemq.broker-url<span class="token operator">:</span>}</span>"</span><span class="token punctuation">)</span>     private String brokerUrl<span class="token punctuation">;</span>      @Bean     public Queue<span class="token function-name function">acQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token builtin class-name">return</span> new ActiveMQQueue<span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      @Bean     public Topic<span class="token function-name function">acTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token builtin class-name">return</span> new ActiveMQTopic<span class="token punctuation">(</span>topicName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      @Bean     public ActiveMQConnectionFactory<span class="token function-name function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token builtin class-name">return</span> new ActiveMQConnectionFactory<span class="token punctuation">(</span>username, password, brokerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      @Bean     public JmsListenerContainerFactory<span class="token operator">&lt;</span>?<span class="token operator">&gt;</span> jmsListenerContainerQueue<span class="token punctuation">(</span>ActiveMQConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         DefaultJmsListenerContainerFactory bean<span class="token operator">=</span> new DefaultJmsListenerContainerFactory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         // 关闭Session事务，手动确认与事务冲突         bean.setSessionTransacted<span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>         // 设置消息的签收模式（自己签收）         /**          * AUTO_ACKNOWLEDGE<span class="token operator">=</span><span class="token number">1</span> ：自动确认          * CLIENT_ACKNOWLEDGE<span class="token operator">=</span><span class="token number">2</span>：客户端手动确认          * DUPS_OK_ACKNOWLEDGE<span class="token operator">=</span><span class="token number">3</span>： 自动批量确认          * SESSION_TRANSACTED<span class="token operator">=</span><span class="token number">0</span>：事务提交并确认          * 但是在activemq补充了一个自定义的ACK模式:          * INDIVIDUAL_ACKNOWLEDGE<span class="token operator">=</span><span class="token number">4</span>：单条消息确认          **/         bean.setSessionAcknowledgeMode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         //此处设置消息重发规则，redeliveryPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span> 中定义         connectionFactory.setRedeliveryPolicy<span class="token punctuation">(</span>redeliveryPolicy<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         bean.setConnectionFactory<span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span>      @Bean     public JmsListenerContainerFactory<span class="token operator">&lt;</span>?<span class="token operator">&gt;</span> jmsListenerContainerTopic<span class="token punctuation">(</span>ActiveMQConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         DefaultJmsListenerContainerFactory bean<span class="token operator">=</span> new DefaultJmsListenerContainerFactory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         // 关闭Session事务，手动确认与事务冲突         bean.setSessionTransacted<span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>         bean.setSessionAcknowledgeMode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         //设置为发布订阅方式, 默认情况下使用的生产消费者方式         bean.setPubSubDomain<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>         bean.setConnectionFactory<span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span>      /**      * 消息的重发规则配置      */     @Bean     public RedeliveryPolicy<span class="token function-name function">redeliveryPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         RedeliveryPolicy redeliveryPolicy<span class="token operator">=</span> new RedeliveryPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         // 是否在每次尝试重新发送失败后,增长这个等待时间         redeliveryPolicy.setUseExponentialBackOff<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>         // 重发次数五次， 总共六次         redeliveryPolicy.setMaximumRedeliveries<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         // 重发时间间隔,默认为1000ms（1秒）         redeliveryPolicy.setInitialRedeliveryDelay<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         // 重发时长递增的时间倍数2         redeliveryPolicy.setBackOffMultiplier<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         // 是否避免消息碰撞         redeliveryPolicy.setUseCollisionAvoidance<span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>         // 设置重发最大拖延时间-1表示无延迟限制         redeliveryPolicy.setMaximumRedeliveryDelay<span class="token punctuation">(</span>-1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> redeliveryPolicy<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h6><a id="5_queue_313" rel="nofollow"></a>5. queue消费者</h6> <pre><code class="prism language-bash">package com.gblfy.listener<span class="token punctuation">;</span><span class="token function">import</span> org.apache.activemq.command.ActiveMQMessage<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jms.annotation.JmsListener<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.stereotype.Component<span class="token punctuation">;</span><span class="token function">import</span> javax.jms.JMSException<span class="token punctuation">;</span><span class="token function">import</span> javax.jms.Session<span class="token punctuation">;</span>  /**  * TODO  *  * @author gblfy  * @Date<span class="token number">2022</span>-11-02  **/ @Component public class QueueListener<span class="token punctuation">{<!-- --></span>      /**      * queue 模式 单对单，两个消费者监听同一个队列则通过轮询接收消息      * containerFactory属性的值关联config类中的声明      *      * @param msg      */     @JmsListener<span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"active.queue"</span>, containerFactory<span class="token operator">=</span><span class="token string">"jmsListenerContainerQueue"</span><span class="token punctuation">)</span>     public void queueListener<span class="token punctuation">(</span>ActiveMQMessage message, Session session, String msg<span class="token punctuation">)</span> throws JMSException<span class="token punctuation">{<!-- --></span>         try<span class="token punctuation">{<!-- --></span>             System.out.println<span class="token punctuation">(</span><span class="token string">"active queue 接收到消息 "</span> + msg<span class="token punctuation">)</span><span class="token punctuation">;</span>             //手动签收             message.acknowledge<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             //重新发送             session.recover<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h6><a id="6_topic_354" rel="nofollow"></a>6. topic消费者</h6> <pre><code class="prism language-c">package com<span class="token punctuation">.</span>gblfy<span class="token punctuation">.</span>listener<span class="token punctuation">;</span>  import org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>activemq<span class="token punctuation">.</span>command<span class="token punctuation">.</span>ActiveMQMessage<span class="token punctuation">;</span> import org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JmsListener<span class="token punctuation">;</span> import org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>  import javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>JMSException<span class="token punctuation">;</span> import javax<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>Session<span class="token punctuation">;</span><span class="token comment">/**  * TODO  *  * @author gblfy  * @Date 2022-11-02  **/</span> @Component public class TopicListener<span class="token punctuation">{<!-- --></span><span class="token comment">/**      * topic 模式/广播模式/发布订阅模式 一对多，多个消费者可同时接收到消息      * topic 模式无死信队列，死信队列是queue模式      * containerFactory属性的值关联config类中的声明      *      * @param msg      */</span>     @<span class="token function">JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"active.topic"</span><span class="token punctuation">,</span> containerFactory<span class="token operator">=</span><span class="token string">"jmsListenerContainerTopic"</span><span class="token punctuation">)</span>     public<span class="token keyword">void</span><span class="token function">topicListener</span><span class="token punctuation">(</span>ActiveMQMessage message<span class="token punctuation">,</span> Session session<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> throws JMSException<span class="token punctuation">{<!-- --></span>         try<span class="token punctuation">{<!-- --></span><span class="token comment">// System.out.println("接收到消息：" + DateUtil.getStringDate(new Date(), "yyyy-MM-dd HH:mm:ss"));</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"active topic 接收到消息 "</span><span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动签收</span>             message<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//重新发送</span>             session<span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>      @<span class="token function">JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"active.topic"</span><span class="token punctuation">,</span> containerFactory<span class="token operator">=</span><span class="token string">"jmsListenerContainerTopic"</span><span class="token punctuation">)</span>     public<span class="token keyword">void</span><span class="token function">topicListener2</span><span class="token punctuation">(</span>ActiveMQMessage message<span class="token punctuation">,</span> Session session<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> throws JMSException<span class="token punctuation">{<!-- --></span>         try<span class="token punctuation">{<!-- --></span><span class="token comment">// System.out.println("接收到消息：" + DateUtil.getStringDate(new Date(), "yyyy-MM-dd HH:mm:ss"));</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"active topic2 接收到消息 "</span><span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动签收</span>             message<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//重新发送</span>             session<span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h6><a id="6__ActiveMQ__413" rel="nofollow"></a>6. ActiveMQ 消息存储规则</h6> <p>QUEUE 点对点：<br /> 特点：消息遵循先到先得，消息只能被一个消费者消费。<br /> 消息存储规则：消费者消费消息成功，MQ服务端消息删除</p> <p>TOPIC订阅模式: 消息属于广播（订阅）模式，消息会被所有的topic消费者消费消息。<br /> 消息存储规则：所有消费者消费成功，MQ服务端消息删除，有一个消息没有没有消费完成，消息也会存储在MQ服务端。</p> <p>举例：<br /> 已经处于运行topic消费者5个，5个消费者消费完成后，MQ服务端消息删除。</p> <p>扩展点补充：如果想额外添加topic消费者，如果MQ服务端消息没有被消费完毕，新增topic消费者可以消费以前未被消费的消息，<br /> 正常新增的只会消费新的topic消息。</p> </div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1166.htm">Java 9中Collectors.filtering()方法的重要性</a></p>
                                                        <p>下一个：<a href="/html/category/article-1168.htm">JDK8新特性Optional工具类</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1279.htm" title="Django的原生ORM框架如何支持MongoDB，同时应对客户使用时随时变动字段">Django的原生ORM框架如何支持MongoDB，同时应对客户使用时随时变动字段</a></li>
                        <li class="py-2"><a href="/html/category/article-1315.htm" title="关于对称算法中数据的填充模式">关于对称算法中数据的填充模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1262.htm" title="Linux里面磁盘文件咋删除呀,清理Linux磁盘空间的方法有哪些？">Linux里面磁盘文件咋删除呀,清理Linux磁盘空间的方法有哪些？</a></li>
                        <li class="py-2"><a href="/html/category/article-1282.htm" title="Azure DevOps通过Azure Devops部署一个.NET Core WebAPI">Azure DevOps通过Azure Devops部署一个.NET Core WebAPI</a></li>
                        <li class="py-2"><a href="/html/category/article-1290.htm" title="Jmeter监控平台搭建：JMeter+InfluxDB+Grafana">Jmeter监控平台搭建：JMeter+InfluxDB+Grafana</a></li>
                        <li class="py-2"><a href="/html/category/article-1289.htm" title="关于MySQL支持的所有字符集的查询是什么？">关于MySQL支持的所有字符集的查询是什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-1294.htm" title="OpenFeign、Feign以及Ribbon关系介绍">OpenFeign、Feign以及Ribbon关系介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-1291.htm" title="Springcloud通过maven打包包含公共common模块的项目">Springcloud通过maven打包包含公共common模块的项目</a></li>
                        <li class="py-2"><a href="/html/category/article-1288.htm" title="【EF框架】DbContext的使用">【EF框架】DbContext的使用</a></li>
                        <li class="py-2"><a href="/html/category/article-1298.htm" title="利用Redis实现防止接口重复提交功能">利用Redis实现防止接口重复提交功能</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>