<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1243.htm" />
    <title>详解Alibaba Java诊断工具Arthas查看Dubbo动态代理类_java - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>详解Alibaba Java诊断工具Arthas查看Dubbo动态代理类_java</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<p>阅读Dubbo源码过程中，会发现，Dubbo消费端在做远程调用时，默认通过 Javassist 框架为服务接口生成动态代理类，调用javassist框架下的JavassistProxyFactory类的getProxy(Invoker invoker, Class&lt;?&gt;[] interfaces)方法，动态生成一个存放在JVM中的动态代理类。</p> <div class="ay1code"> <pre class="brush:java;">public &lt;T&gt; T getProxy(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces) {      return (T) Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker));  }</pre> </div> <p>那么，问题来了，如果我们想要一睹该动态生成的代理类内部结构是怎样的，如何才能便捷做到的？</p> <p>这就是我想介绍的一款工具，它可以帮助我们查看JDK或者javassist生成的动态代理类，当然，它的功能远不止此，还可以在生产环境进行诊断。</p> <p>Arthas 是Alibaba开源的Java诊断工具，官方在线文档地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://arthas.aliyun.com/doc/"   target="_blank" rel="nofollow">https://arthas.aliyun.com/doc/</a></p> <p>根据官网上的介绍，它还可以解决以下问题————</p> <p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p> <p>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</p> <p>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</p> <p>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</p> <p>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</p> <p>是否有一个全局视角来查看系统的运行状况？</p> <p>有什么办法可以监控到JVM的实时运行状态？</p> <p>怎么快速定位应用的热点，生成火焰图？</p> <p>怎样直接从JVM内查找某个类的实例？</p> <p>这些方案本文暂不展开，这里只展开通过该工具查看Dubbo生成的动态代理类。</p> <p>我是直接在使用dubbo-parent源码中的例子，分别启动了提供者与消费者。</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/e02fe5cef167d19a7b0cd16bf532838b.jpg"></p> <p>首先，启动提供者方法——</p> <div class="ay1code"> <pre class="brush:java;">public class Application {      public static void main(String[] args) throws Exception {              startWithBootstrap();         }      private static boolean isClassic(String[] args) {          return args.length &gt; 0 &amp;&amp; "classic".equalsIgnoreCase(args[0]);      }      private static void startWithBootstrap() {          ServiceConfig&lt;DemoServiceImpl&gt; service = new ServiceConfig&lt;&gt;();          service.setInterface(DemoService.class);          service.setRef(new DemoServiceImpl());          DubboBootstrap bootstrap = DubboBootstrap.getInstance();          RegistryConfig registryConfig = new RegistryConfig("zookeeper://127.0.0.1:2181");          registryConfig.setTimeout(20000);          ProtocolConfig protocolConfig = new ProtocolConfig();          protocolConfig.setName("dubbo");          protocolConfig.setHost("192.168.100.1");          protocolConfig.setPort(20877);          bootstrap.application(new ApplicationConfig("dubbo-demo-api-provider"))                  .registry(registryConfig)                  .service(service)                  .protocol(protocolConfig)                  .start()                  .await();      }  }  </pre> </div> <p>注意，需要配置RegistryConfig自己的zookeeper， protocolConfig.setHost("xxx.xxx.xxx.xxx")设置成你本地内网的ip即可；</p> <p>DemoServiceImpl类详情——</p> <div class="ay1code"> <pre class="brush:java;">public class DemoServiceImpl implements DemoService {      private static final Logger logger = LoggerFactory.getLogger(DemoServiceImpl.class);        @Override      public String sayHello(String name) {          logger.info("Hello " + name + ", request from consumer: " + RpcContext.getContext().getRemoteAddress());          return "Hello " + name + ", response from provider: " + RpcContext.getContext().getLocalAddress();      }        public CompletableFuture&lt;String&gt; sayHelloAsync(String name) {          return null;    }  </pre> </div> <p>接着，启动消费者，这里可以设置一个休眠时间，这样就可以一直维持消费者运行在内存当中——</p> <div class="ay1code"> <pre class="brush:java;">public class Application {      public static void main(String[] args) {              runWithRefer();      }      private static void runWithRefer() {          RegistryConfig registryConfig = new RegistryConfig("zookeeper://127.0.0.1:2181");          registryConfig.setTimeout(30000);          ProtocolConfig protocolConfig = new ProtocolConfig();          protocolConfig.setName("dubbo");          protocolConfig.setHost("192.168.200.1");          protocolConfig.setPort(20899);          ReferenceConfig&lt;DemoService&gt; reference = new ReferenceConfig&lt;&gt;();          reference.setApplication(new ApplicationConfig("dubbo-demo-api-consumer"));          reference.setRegistry(registryConfig);          reference.setInterface(DemoService.class);          DemoService service = reference.get();          String message = service.sayHello("dubbo");          System.out.println("打印了5555555"+message);          try {              Thread.sleep(100000000);          } catch (InterruptedException e) {              e.printStackTrace();          }  }  </pre> </div> <p>当Dubbo的服务提供者与消费者都正常运行时，说明此时JVM虚拟机内存里已经存在动态生成的代理类，这时，我们就可以开始通过arthas-boot.jar工具进行查看了。</p> <p>首先，将arthas-boot.jar工具下载到你本地，我的是Windows，随便放到一个目录当中，例如——</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/9f27f234f65168cc3b60e683c23d9252.jpg"></p> <p>接着，直接在运行着Dubbo消费端进程的IDEA上打开Terminal——</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/717516dd54851ea6b75c89eebd2d19e4.jpg"></p> <p>然后，输入 java -jar C:\Users\92493\Downloads\12229238_g\arthas-boot.jar ，arthas正常运行成功话，将列出当前JVM上运行的进程——</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/2e9f791797287221572fbdeabe598e45.jpg"></p> <p>可以看到我们刚刚启动的provider进程与consumer进程，这时，只需要输入对应进程前面的编号【5】，就可以将Arthas 关联到启动类为 org.apache.dubbo.demo.consumer.Application的 Java 进程上了——</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/f91ea77732546e16025b8a6b6bfb979b.jpg"></p> <p>到这一步，我们就可以通过指令 sc *.proxy *模糊查询带有proxy标志的类名了，动态代理生成的类一般都是以Proxy标志——</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/4dc078c2fb3705b5cdf0a1a75c4622a4.jpg"></p> <p>其中，这里的org.apache.dubbo.common.bytecode.proxy0就是消费者生成的动态代理类，我们可以直接反编译去查看它内部结构——</p> <p>[arthas@57676]$ jad org.apache.dubbo.common.bytecode.proxy0</p> <p>控制台就会打印出该动态代理类的内部结构——</p> <div class="ay1code"> <pre class="brush:java;">/*   * Decompiled with CFR.   *    * Could not load the following classes:   * com.alibaba.dubbo.rpc.service.EchoService   * org.apache.dubbo.common.bytecode.ClassGenerator$DC   * org.apache.dubbo.demo.DemoService   * org.apache.dubbo.rpc.service.Destroyable     */     package org.apache.dubbo.common.bytecode;  import com.alibaba.dubbo.rpc.service.EchoService;  import java.lang.reflect.InvocationHandler;  import java.lang.reflect.Method;  import java.util.concurrent.CompletableFuture;  import org.apache.dubbo.common.bytecode.ClassGenerator;  import org.apache.dubbo.demo.DemoService;  import org.apache.dubbo.rpc.service.Destroyable;  public class proxy0 implements ClassGenerator.DC,Destroyable,EchoService,DemoService {  public static Method[] methods;  private InvocationHandler handler;  public String sayHello(String string) {      Object[] objectArray = new Object[]{string};      Object object = this.handler.invoke(this, methods[0], objectArray);      return (String)object;  }  public CompletableFuture sayHelloAsync(String string) {      Object[] objectArray = new Object[]{string};      Object object = this.handler.invoke(this, methods[1], objectArray);      return (CompletableFuture)object;  }  public Object $echo(Object object) {      Object[] objectArray = new Object[]{object};      Object object2 = this.handler.invoke(this, methods[2], objectArray);      return object2;  }  public void $destroy() {      Object[] objectArray = new Object[]{};      Object object = this.handler.invoke(this, methods[3], objectArray);  }  public proxy0() {  }  public proxy0(InvocationHandler invocationHandler) {      this.handler = invocationHandler;    }  }  </pre> </div> <p>在Dubbo案例当中，当我们执行 String message = service.sayHello("dubbo")去调用远程接口时，其实是调用了动态代理生成的方法——</p> <div class="ay1code"> <pre class="brush:java;">public String sayHello(String string) {      Object[] objectArray = new Object[]{string};      Object object = this.handler.invoke(this, methods[0], objectArray);      return (String)object;  }  </pre> </div> <p>举一反三，这个Arthas工具类可以在线上生产环境查看一些我们新部署的代码，看是否是新改动的。</p> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1242.htm">机器学习笔记：Python底层实现逻辑回归</a></p>
                                                        <p>下一个：<a href="/html/category/article-1244.htm">如果我们将包含NULL值的列名作为CONCAT()函数的参数之一传递，MySQL将返回什么？</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1312.htm" title="有关动态规划的相关优化思想_在线工具">有关动态规划的相关优化思想_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-1308.htm" title="HTML 5验证有用吗">HTML 5验证有用吗</a></li>
                        <li class="py-2"><a href="/html/category/article-1934.htm" title="朴素贝叶斯算法详解">朴素贝叶斯算法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-2247.htm" title="Vue刷新当前页面几种方式">Vue刷新当前页面几种方式</a></li>
                        <li class="py-2"><a href="/html/category/article-2248.htm" title="vue 详情页返回列表，过滤查询条件保留">vue 详情页返回列表，过滤查询条件保留</a></li>
                        <li class="py-2"><a href="/html/category/article-1962.htm" title="记录detector2使用中的PyYAML报错">记录detector2使用中的PyYAML报错</a></li>
                        <li class="py-2"><a href="/html/category/article-1307.htm" title="在JavaScript中实现优先级排序">在JavaScript中实现优先级排序</a></li>
                        <li class="py-2"><a href="/html/category/article-4075.htm" title="Java中的公平锁和非公平锁实现详解">Java中的公平锁和非公平锁实现详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1638.htm" title="python之33个关键字详解_Python之33个关键字是哪些">python之33个关键字详解_Python之33个关键字是哪些</a></li>
                        <li class="py-2"><a href="/html/category/article-4076.htm" title="mysql将一张表的数据批量插入到另外一张表">mysql将一张表的数据批量插入到另外一张表</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>