<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-2538.htm" />
    <title>LSH-局部敏感哈希 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>LSH-局部敏感哈希</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<p>假设通过用户 - 物品相似度进行个性化推荐</p> <p>用户和物品的 Embedding 都在一个<span class="math inline">\(k\)</span> 维的 Embedding 空间中，物品总数为<span class="math inline">\(n\)</span>，计算一个用户和所有物品向量相似度的时间复杂度是$ O(k*n)$</p> <h2 id="直觉的解决方案">直觉的解决方案</h2> <ul> <li>基于聚类</li> <li>基于索引</li> </ul> <h3 id="基于聚类的思想"><strong>基于聚类的思想</strong></h3> <p>优点：</p> <p>离线计算好每个 Embedding 向量的类别，在线上我们只需要在同一个类别内的 Embedding 向量中搜索就可以。</p> <p>缺点：</p> <ul> <li> <p>存在着一些边界情况，比如，聚类边缘的点的最近邻往往会包括相邻聚类的点，如果我们只在类别内搜索，就会遗漏这些近似点</p> </li> <li> <p>中心点的数量 k 也不那么好确定，k 选得太大，离线迭代的过程就会非常慢，k 选得太小，在线搜索的范围还是很大</p> </li> </ul> <h3 id="基于索引"><strong>基于索引</strong></h3> <p>Kd-tree（K-dimension tree）</p> <p>首先，构建索引，然后用二叉树搜索</p> <p>比如，希望找到点 q 的 m 个邻接点，我们就可以先搜索它相邻子树下的点，如果数量不够，我们可以向上回退一个层级，搜索它父片区下的其他点，直到数量凑够 m 个为止</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b4068652e67748eb3e9e0574ef6a7454.jpg" alt="LSH-局部敏感哈希"></p> <p>缺点：</p> <ul> <li>无法完全解决边缘点最近邻的问题。对于点 q 来说，它的邻接片区是右上角的片区，但是它的最近邻点却是深蓝色切分线下方的那个点。</li> </ul> <h2 id="局部敏感哈希">局部敏感哈希</h2> <h3 id="基本原理">基本原理</h3> <p>局部敏感哈希的基本思想是希望让相邻的点落入同一个“桶”，这样在进行最近邻搜索时，我们仅需要在一个桶内，或相邻几个桶内的元素中进行搜索即可。如果保持每个桶中的元素个数在一个常数附近，我们就可以把最近邻搜索的时间复杂度降低到常数级别。</p> <p>把二维空间中的点通过不同角度映射到 a、b、c 这三个一维空间时，可以看到原本相近的点，在一维空间中都保持着相近的距离。而原本远离的绿色点和红色点在一维空间 a 中处于接近的位置，却在空间 b 中处于远离的位置。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/f60aedaa55c0dd2dc3309ddf4571fd20.jpg" alt="LSH-局部敏感哈希"></p> <p><strong>欧式空间中，将高维空间的点映射到低维空间，原本接近的点在低维空间中肯定依然接近，但原本远离的点则有一定概率变成接近的点</strong></p> <p>内积相似度是经常使用的相似度度量方法，还有曼哈顿距离，切比雪夫距离，汉明距离 等。假如 用内积操作来构建局部敏感哈希桶</p> <p>假设<span class="math inline">\(v\)</span> 是高维空间中的 $k $ 维 Embedding 向量，$x $ 是随机生成的<span class="math inline">\(k\)</span> 维映射向量。那我们利用内积操作可以将 $ v $ 映射到一维空间，得到数值$ h(v)=v⋅x$。</p> <p>使用哈希函数<span class="math inline">\(h(v)\)</span> 进行分桶，公式为：$h^{x,b}(v)= ⌊\frac{x⋅v+b}{w}⌋ $ 。其中，<span class="math inline">\(⌊⌋\)</span> 是向下取整操作，<span class="math inline">\(w\)</span> 是分桶宽度，<span class="math inline">\(b\)</span> 是<span class="math inline">\(0\)</span> 到<span class="math inline">\(w\)</span> 间的一个均匀分布随机变量，避免分桶边界固化。</p> <blockquote> <p>防止相邻的点每次都落在不同的桶</p> <p>如果总是固定边界，很容易让边界两边非常接近的点总是被分到两个桶里。这是我们不想看到的。 所以随机调整b，生成多个hash函数，并且采用或的方式组合，就可以一定程度避免这些边界点的问题。</p> </blockquote> <p>采用 m 个哈希函数同时进行分桶。如果两个点同时掉进了 m 个桶，那它们是相似点的概率将大大增加。</p> <p>用几个hash函数？怎么组合多个hash函数？</p> <h3 id="多桶策略">多桶策略</h3> <p>关于怎么组合多个hash函数，没有固定做法，可以用不同的组合策略.</p> <ul> <li> <p>点数越多，我们越应该增加每个分桶函数中桶的个数；相反，点数越少，我们越应该减少桶的个数；</p> </li> <li> <p>Embedding 向量的维度越大，我们越应该增加哈希函数的数量，尽量采用且的方式作为多桶策略；相反，Embedding 向量维度越小，我们越应该减少哈希函数的数量，多采用或的方式作为分桶策略。</p> </li> </ul> <blockquote> <p>一些经验值设定</p> <p>每个桶取多少点跟线上想寻找top N的规模有关系。比如召回层想召回1000个物品，那么N就是1000，那么桶内点数的规模就维持在1000-5000的级别是比较合适的</p> <p>Embedding在实践中超过100维后，增加维度的作用就没那么明显了，通常取10-50维就足够了</p> <p>hash函数数量的初始判断，有个经验公式：Embedding维数开4次方。后续，调参按照2的倍数进行调整，例如：2，4，8，16</p> </blockquote> <h3 id="局部敏感哈希实践">局部敏感哈希实践</h3> <p>基于spark BucketedRandomProjectionLSH</p> <pre><code class="language-python">def embeddingLSH(spark:SparkSession, movieEmbMap:Map[String, Array[Float]]): Unit ={   //将电影embedding数据转换成dense Vector的形式，便于之后处理   val movieEmbSeq = movieEmbMap.toSeq.map(item =&gt; (item._1, Vectors.dense(item._2.map(f =&gt; f.toDouble))))   val movieEmbDF = spark.createDataFrame(movieEmbSeq).toDF("movieId", "emb")     //利用Spark MLlib创建LSH分桶模型   val bucketProjectionLSH = new BucketedRandomProjectionLSH()     .setBucketLength(0.1)     .setNumHashTables(3)     .setInputCol("emb")     .setOutputCol("bucketId")   //训练LSH分桶模型   val bucketModel = bucketProjectionLSH.fit(movieEmbDF)   //进行分桶   val embBucketResult = bucketModel.transform(movieEmbDF)      //打印分桶结果   println("movieId, emb, bucketId schema:")   embBucketResult.printSchema()   println("movieId, emb, bucketId data result:")   embBucketResult.show(10, truncate = false)      //尝试对一个示例Embedding查找最近邻   println("Approximately searching for 5 nearest neighbors of the sample embedding:")   val sampleEmb = Vectors.dense(0.795,0.583,1.120,0.850,0.174,-0.839,-0.0633,0.249,0.673,-0.237)   bucketModel.approxNearestNeighbors(movieEmbDF, sampleEmb, 5).show(truncate = false) }</code></pre> <p><strong>refenences:</strong></p> <p>【1】王喆. 深度学习推荐系统</p> <p>【2】<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/facebookresearch/faiss"  target="_blank" rel="nofollow">Facebook 最近邻搜索库 FAISS</a></p> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-2537.htm">基于全志A40i开发板Linux-RT内核应用开发教程</a></p>
                                                        <p>下一个：<a href="/html/category/article-2831.htm">kerberos kafka 问题解决</a></p>
                                                    </div>

                                                <div class="panel panel-default mt-5">
                            <div class="panel-heading">
                                <h3 class="m-0">推荐文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0">
                                                                        <li class="py-2"><a href="/html/category/article-1303.htm">通过make生成执行文件的过程详解_在线工具</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1293.htm">基于Spring接口，集成Caffeine+Redis两级缓存</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1265.htm">Linux网络服务之NFS共享服务</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1249.htm">Java修饰符abstract与static及final的精华总结_java</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1226.htm">Git基础配置Git用户签名的方式详解</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1217.htm">go微服务框架Kratos简单使用总结</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1162.htm">Python实用技法第11篇：找出序列中出现次数最多的元素</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1144.htm">python初始化方法</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1128.htm">kafka启动后一段时间自动退出的解决方案</a></li>
                                                                        <li class="py-2"><a href="/html/category/article-1110.htm">Java 8 特性 Stream API 详细操作教程</a></li>
                                                                    </ul>
                            </div>
                        </div>
                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1316.htm" title="vscode指定扩展安装位置">vscode指定扩展安装位置</a></li>
                        <li class="py-2"><a href="/html/category/article-1302.htm" title="java高级用法之:在JNA中使用类型映射">java高级用法之:在JNA中使用类型映射</a></li>
                        <li class="py-2"><a href="/html/category/article-1297.htm" title="vue2设置保存自动执行run lint配置步骤">vue2设置保存自动执行run lint配置步骤</a></li>
                        <li class="py-2"><a href="/html/category/article-1962.htm" title="记录detector2使用中的PyYAML报错">记录detector2使用中的PyYAML报错</a></li>
                        <li class="py-2"><a href="/html/category/article-1303.htm" title="通过make生成执行文件的过程详解_在线工具">通过make生成执行文件的过程详解_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2248.htm" title="vue 详情页返回列表，过滤查询条件保留">vue 详情页返回列表，过滤查询条件保留</a></li>
                        <li class="py-2"><a href="/html/category/article-1307.htm" title="在JavaScript中实现优先级排序">在JavaScript中实现优先级排序</a></li>
                        <li class="py-2"><a href="/html/category/article-1315.htm" title="关于对称算法中数据的填充模式">关于对称算法中数据的填充模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1299.htm" title="linux信号量semaphore">linux信号量semaphore</a></li>
                        <li class="py-2"><a href="/html/category/article-1920.htm" title="我们如何在Java中实现自定义HashSet">我们如何在Java中实现自定义HashSet</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>