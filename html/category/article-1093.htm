<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1093.htm" />
    <title>C++数据结构之堆详解_C 语言_ - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>C++数据结构之堆详解_C 语言_</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> <a href="#title-0" title="有限数组形式">有限数组形式</a></li> <li><i class="be be-arrowright"></i> <a href="#title-1" title="动态数组形式">动态数组形式</a></li> <li><i class="be be-arrowright"></i> <a href="#title-2" title="向下调整结点">向下调整结点</a></li> <li><i class="be be-arrowright"></i> <a href="#title-3" title="建立堆">建立堆</a></li> <li><i class="be be-arrowright"></i> <a href="#title-4" title="初始化">初始化</a></li> <li><i class="be be-arrowright"></i> <a href="#title-5" title="打印堆">打印堆</a></li> <li><i class="be be-arrowright"></i> <a href="#title-6" title="main函数">main函数</a></li> <li><i class="be be-arrowright"></i> <a href="#title-7" title="结果">结果</a></li> </ul><span class="log-zd"><span class="log-close"><a title="隐藏目录"><i class="be be-cross"></i><strong>目录</strong></a></span></span></div>  			</div> <div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">堆的概念</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_0_0" rel="nofollow">提示：完全二叉树</a></li> </ul> <li><a href="#_label1" rel="nofollow">堆的性质</a></li> <ul class="second_class_ul"></ul> <li><a href="#_label2" rel="nofollow">最大堆最小堆</a></li> <ul class="second_class_ul"></ul> <li><a href="#_label3" rel="nofollow">代码</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_3_1" rel="nofollow">定义</a></li> <ul class="third_class_ul"> <li><a href="#_label3_3_1_0" rel="nofollow">有限数组形式</a></li> <li><a href="#_label3_3_1_1" rel="nofollow">动态数组形式</a></li> </ul> <li><a href="#_lab2_3_2" rel="nofollow">操作</a></li> <ul class="third_class_ul"> <li><a href="#_label3_3_2_2" rel="nofollow">向下调整结点</a></li> <li><a href="#_label3_3_2_3" rel="nofollow">建立堆</a></li> <li><a href="#_label3_3_2_4" rel="nofollow">初始化</a></li> <li><a href="#_label3_3_2_5" rel="nofollow">打印堆</a></li> </ul> <li><a href="#_lab2_3_3" rel="nofollow">测试</a></li> <ul class="third_class_ul"> <li><a href="#_label3_3_3_6" rel="nofollow">main函数</a></li> <li><a href="#_label3_3_3_7" rel="nofollow">结果</a></li> </ul> <li><a href="#_lab2_3_4" rel="nofollow">完整代码</a></li> <ul class="third_class_ul"></ul> </ul> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>堆的概念</h2> <p>堆（heap）是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象，即是一种顺序储存结构的完全二叉树。</p> <p class="maodian"><a name="_lab2_0_0" rel="nofollow"></a></p> <h3>提示：完全二叉树</h3> <p>完全二叉树：对一棵深度为k、有n个结点二叉树编号后，各节点的编号与深度为k的满二叉树相同位置的结点的编号相同，这颗二叉树就被称为完全二叉树。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/cairbin/p/16122303.html#fn2"   target="_blank" rel="nofollow">[2]</a></p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>堆的性质</h2> <ul> <li>堆中某个结点的值总是不大于或不小于其父结点的值</li> <li>堆总是一棵完全二叉树</li> <li>除了根结点和最后一个左子结点可以没有兄弟结点，其他结点<strong>必须</strong>有兄弟结点</li> </ul> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>最大堆最小堆</h2> <ul> <li> <p>最大堆：根结点的键值是所有堆结点键值中最大者，且每个结点的值都比其孩子的值大。</p> </li> <li> <p>最小堆：根结点的键值是所有堆结点键值中最小者，且每个结点的值都比其孩子的值小。</p> </li> </ul> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>代码</h2> <p class="maodian"><a name="_lab2_3_1" rel="nofollow"></a></p> <h3>定义</h3> <p class="maodian"><a name="_label3_3_1_0" rel="nofollow"></a></p> <span class="directory"></span><h4 id="title-0">有限数组形式</h4> <div class="ay1code"> <pre class="brush:cpp;">int Heap[1024];    //顺序结构的二叉树</pre> </div> <p>若某结点编号为i，且存在左儿子和右儿子，则他们分别对应</p> <div class="ay1code"> <pre class="brush:cpp;">Heap[i*2+1];      //左儿子  Heap[i*2+2];      //右儿子</pre> </div> <p>其父节点</p> <div class="ay1code"> <pre class="brush:cpp;">Heap[i/2];		//i的父节点</pre> </div> <p class="maodian"><a name="_label3_3_1_1" rel="nofollow"></a></p> <span class="directory"></span><h4 id="title-1">动态数组形式</h4> <p>在项目开发中，经常以动态数组形式出现，在本文主要对这种形式进行介绍</p> <div class="ay1code"> <pre class="brush:cpp;">//默认容量  #define DEFAULT_CAPCITY 128    typedef struct _Heap  {  	int *arr;		//储存元素的动态数组  	int size;		//元素个数  	int capacity;	//当前存储的容量	  }Heap;</pre> </div> <p class="maodian"><a name="_lab2_3_2" rel="nofollow"></a></p> <h3>操作</h3> <p>只使用InitHeap()函数进行初始化即可，AdjustDown()与BuildHeap()仅为堆建立时的内部调用</p> <p class="maodian"><a name="_label3_3_2_2" rel="nofollow"></a></p> <span class="directory"></span><h4 id="title-2">向下调整结点</h4> <ul> <li>以创建最大堆为例</li> <li>将“判断最大子结点是否大于当前父结点”处的&gt;=改为&lt;=即可创建最小堆</li> </ul> <div class="ay1code"> <pre class="brush:cpp;">//向下调整，将当前结点与其子结点调整为最大堆  //用static修饰禁止外部调用  static void AdjustDown(Heap&amp; heap, int index)  {  	int cur = heap.arr[index];	//当前待调整结点  	int parent, child;    	/*  		判断是否存在子结点大于当前结点。  		若不存在，堆是平衡的，则不调整；  		若存在，则与最大子结点与之交换，交换后该子节点若还有子结点，则以此方法继续调整。  	*/  	for (parent = index; (parent * 2 + 1) &lt; heap.size; parent = child)  	{  		child = parent * 2 + 1;	//左子结点    		//取两个子结点中最大节点,(child+1)&lt;heap.size防止越界  		if (((child + 1) &lt; heap.size &amp;&amp; (heap.arr[child] &lt; heap.arr[child + 1])))  			child++;    		//判断最大子结点是否大于当前父结点  		if (cur &gt;= heap.arr[child])	//将此处的&gt;=改成&lt;=可构建最小堆  		{  			//不大于，不需要调整  			break;  		}  		else  		{  			//大于，则交换  			heap.arr[parent] = heap.arr[child];  			heap.arr[child] = cur;  		}    	}  }</pre> </div> <p class="maodian"><a name="_label3_3_2_3" rel="nofollow"></a></p> <span class="directory"></span><h4 id="title-3">建立堆</h4> <div class="ay1code"> <pre class="brush:cpp;">//建立堆，用static修饰禁止外部调用  static void BuildHeap(Heap&amp; heap)  {  	int i;  	//从倒数第二层开始调整（若只有一层则从该层开始）  	for (i = heap.size / 2 - 1; i &gt;= 0; i--)  	{  		AdjustDown(heap, i);  	}  }</pre> </div> <p class="maodian"><a name="_label3_3_2_4" rel="nofollow"></a></p> <span class="directory"></span><h4 id="title-4">初始化</h4> <div class="ay1code"> <pre class="brush:cpp;">//初始化堆  //参数：被初始化的堆，存放初始数据的数组， 数组大小  bool InitHeap(Heap &amp;heap, int *orginal, int size)  {  	//若容量大于size，则使用默认量，否则为size  	int capacity = DEFAULT_CAPCITY&gt;size?DEFAULT_CAPCITY:size;  	  	heap.arr = new int[capacity];	//分配内存，类型根据实际需要可修改  	if(!heap.arr) return false;		//内存分配失败则返回False  	  	heap.capacity = capacity;		//容量  	heap.size = 0;					//元素个数置为0  	  	//若存在原始数组则构建堆  	if(size&gt;0)  	{  		/*  		内存拷贝，将orginal的元素拷贝到堆数组arr中  		size*sizeof(int)为元素所占内存空间大小  		*/  		memcpy(heap.arr,orginal, size*sizeof(int));  		heap.size = size;	//调整大小  		BuildHeap(heap);	//建堆  	}  	  	return true;  }</pre> </div> <p class="maodian"><a name="_label3_3_2_5" rel="nofollow"></a></p> <span class="directory"></span><h4 id="title-5">打印堆</h4> <ul> <li>实际上是一个层序遍历<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/cairbin/p/16122303.html#fn4"   target="_blank" rel="nofollow">[4]</a> </li> </ul> <div class="ay1code"> <pre class="brush:cpp;">//以树状的形式打印堆  void PrintHeapAsTreeStyle(Heap hp)  {  	queue&lt;int&gt; que;  	int r = 0;  	que.push(r);  	queue&lt;int&gt; temp;    	while (!que.empty())  	{  		r = que.front();  		que.pop();    		if (r * 2 + 1 &lt; hp.size) temp.push(r * 2 + 1);  		if (r * 2 + 2 &lt; hp.size) temp.push(r * 2 + 2);    		if (que.empty())  		{  			cout &lt;&lt; hp.arr[r] &lt;&lt; endl;  			que = temp;  			temp = queue&lt;int&gt;();  		}  		else  			cout &lt;&lt; hp.arr[r] &lt;&lt; " ";    	}  }</pre> </div> <p class="maodian"><a name="_lab2_3_3" rel="nofollow"></a></p> <h3>测试</h3> <p class="maodian"><a name="_label3_3_3_6" rel="nofollow"></a></p> <span class="directory"></span><h4 id="title-6">main函数</h4> <div class="ay1code"> <pre class="brush:cpp;">int main()  {  	Heap hp;  	int vals[] = { 1,2,3,87,93,82,92,86,95 };    	if (!InitHeap(hp, vals, sizeof(vals) / sizeof(vals[0])))  	{  		fprintf(stderr, "初始化堆失败！\n");  		exit(-1);  	}    	PrintHeapAsTreeStyle(hp);    	return 0;  }</pre> </div> <p class="maodian"><a name="_label3_3_3_7" rel="nofollow"></a></p> <span class="directory"></span><h4 id="title-7">结果</h4> <div class="ay1code"> <pre class="brush:plain;">95  93 92  87 1 82 3  86 2  </pre> </div> <p class="maodian"><a name="_lab2_3_4" rel="nofollow"></a></p> <h3>完整代码</h3> <div class="ay1code"> <pre class="brush:cpp;">#include &lt;iostream&gt;  #include &lt;queue&gt;    using namespace std;    //默认容量  #define DEFAULT_CAPCITY 128  typedef struct _Heap {  	int* arr;  	int size;  	int capacity;  }Heap;    //向下调整，将当前结点与其子结点调整为最大堆  static void AdjustDown(Heap&amp; heap, int index)  {  	int cur = heap.arr[index];	//当前待调整结点  	int parent, child;    	/*  		判断是否存在子结点大于当前结点。  		若不存在，堆是平衡的，则不调整；  		若存在，则与最大子结点与之交换，交换后该子节点若还有子结点，则以此方法继续调整。  	*/  	for (parent = index; (parent * 2 + 1) &lt; heap.size; parent = child)  	{  		child = parent * 2 + 1;	//左子结点    		//取两个子结点中最大节点,(child+1)&lt;heap.size防止越界  		if (((child + 1) &lt; heap.size &amp;&amp; (heap.arr[child] &lt; heap.arr[child + 1])))  			child++;    		//判断最大子结点是否大于当前父结点  		if (cur &gt;= heap.arr[child])	//将此处的&gt;=改成&lt;=可构建最小堆  		{  			//不大于，不需要调整  			break;  		}  		else  		{  			//大于，则交换  			heap.arr[parent] = heap.arr[child];  			heap.arr[child] = cur;  		}    	}      }    //建立堆，用static修饰禁止外部调用  static void BuildHeap(Heap&amp; heap)  {  	int i;  	//从倒数第二层开始调整（若只有一层则从该层开始）  	for (i = heap.size / 2 - 1; i &gt;= 0; i--)  	{  		AdjustDown(heap, i);  	}  }    //初始化堆  //参数：被初始化的堆，存放初始数据的数组， 数组大小  bool InitHeap(Heap&amp; heap, int* orginal, int size)  {  	//若容量大于size，则使用默认量，否则为size  	int capacity = DEFAULT_CAPCITY &gt; size ? DEFAULT_CAPCITY : size;    	heap.arr = new int[capacity];	//分配内存，类型根据实际需要可修改  	if (!heap.arr) return false;		//内存分配失败则返回False    	heap.capacity = capacity;		//容量  	heap.size = 0;					//元素个数置为0    	//若存在原始数组则构建堆  	if (size &gt; 0)  	{  		/*  		内存拷贝，将orginal的元素拷贝到堆数组arr中  		size*sizeof(int)为元素所占内存空间大小  		*/  		memcpy(heap.arr, orginal, size * sizeof(int));  		heap.size = size;	//调整大小  		BuildHeap(heap);	//建堆  	}    	return true;  }    //以树状的形式打印堆  void PrintHeapAsTreeStyle(Heap hp)  {  	queue&lt;int&gt; que;  	int r = 0;  	que.push(r);  	queue&lt;int&gt; temp;    	while (!que.empty())  	{  		r = que.front();  		que.pop();    		if (r * 2 + 1 &lt; hp.size) temp.push(r * 2 + 1);  		if (r * 2 + 2 &lt; hp.size) temp.push(r * 2 + 2);    		if (que.empty())  		{  			cout &lt;&lt; hp.arr[r] &lt;&lt; endl;  			que = temp;  			temp = queue&lt;int&gt;();  		}  		else  			cout &lt;&lt; hp.arr[r] &lt;&lt; " ";    	}    }    int main()  {  	Heap hp;  	int vals[] = { 1,2,3,87,93,82,92,86,95 };    	if (!InitHeap(hp, vals, sizeof(vals) / sizeof(vals[0])))  	{  		fprintf(stderr, "初始化堆失败！\n");  		exit(-1);  	}    	PrintHeapAsTreeStyle(hp);    	return 0;  }  </pre> </div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1092.htm">PHP从HTML转义详解</a></p>
                                                        <p>下一个：<a href="/html/category/article-1094.htm">Echarts在vue中的基本使用以及常用配置</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1919.htm" title="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式">React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1313.htm" title="二叉树与堆">二叉树与堆</a></li>
                        <li class="py-2"><a href="/html/category/article-1294.htm" title="OpenFeign、Feign以及Ribbon关系介绍">OpenFeign、Feign以及Ribbon关系介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-1302.htm" title="java高级用法之:在JNA中使用类型映射">java高级用法之:在JNA中使用类型映射</a></li>
                        <li class="py-2"><a href="/html/category/article-1293.htm" title="基于Spring接口，集成Caffeine+Redis两级缓存">基于Spring接口，集成Caffeine+Redis两级缓存</a></li>
                        <li class="py-2"><a href="/html/category/article-1285.htm" title="C语言栈与队列面试题详解_C 语言">C语言栈与队列面试题详解_C 语言</a></li>
                        <li class="py-2"><a href="/html/category/article-1292.htm" title="Flutter实现心动的动画特效_Android">Flutter实现心动的动画特效_Android</a></li>
                        <li class="py-2"><a href="/html/category/article-1330.htm" title="avframe转byte数组_Spring Boot图片文件转Base64">avframe转byte数组_Spring Boot图片文件转Base64</a></li>
                        <li class="py-2"><a href="/html/category/article-1638.htm" title="python之33个关键字详解_Python之33个关键字是哪些">python之33个关键字详解_Python之33个关键字是哪些</a></li>
                        <li class="py-2"><a href="/html/category/article-1312.htm" title="有关动态规划的相关优化思想_在线工具">有关动态规划的相关优化思想_在线工具</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">42</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>