<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1183.htm" />
    <title>多线程详解 创建多线程 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>多线程详解 创建多线程</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2><a id="__1" rel="nofollow"></a>一. 进程与线程：</h2> <h3><a id="1__2" rel="nofollow"></a>1. 进程：</h3> <p>进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。程序运行时系统就会创建一个进程，并为它分配资源，然后把该进程放入进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。</p> <h3><a id="2__4" rel="nofollow"></a>2. 线程：</h3> <p>线程是一条执行路径，是程序执行时的最小单位，它是进程的一个执行流，<strong>是CPU调度和分派的基本单位</strong>，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，每个请求分配一个线程来处理。</p> <h3><a id="3__6" rel="nofollow"></a>3. 执行方式：</h3> <p>① 顺序执行：即程序从上往下一步一步的执行<br /> ② 并发执行：指两个或多个事件在同一个时间段内执行<br /> ③ 并行执行：指两个或多个事件在同一时刻同时执行</p> <h2><a id="__10" rel="nofollow"></a>二. 创建多线程的三种方式：</h2> <h3><a id="1_Thread_11" rel="nofollow"></a>1. 继承Thread类：</h3> <p>继承Thread类后要重写Thread类的run()方法，然后调用start()方法开启线程</p> <pre><code class="prism language-bash">public class TestThread1 extends Thread<span class="token punctuation">{<!-- --></span>     public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         EatThread eatThread<span class="token operator">=</span> new EatThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         DrinkThread drinkThread<span class="token operator">=</span> new DrinkThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         eatThread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         drinkThread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  class EatThread extends Thread<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  class DrinkThread extends Thread<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始喝酒?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束喝酒?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>此时的运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/d2d7a5ecf5e40bd9cee8da4a9dc98d96.jpg" alt="多线程详解 创建多线程"><br /> 当把主函数（即主线程）改为run()方法开启线程：</p> <pre><code class="prism language-bash">public class TestThread1 extends Thread<span class="token punctuation">{<!-- --></span>     public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         EatThread eatThread<span class="token operator">=</span> new EatThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         DrinkThread drinkThread<span class="token operator">=</span> new DrinkThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         eatThread.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         drinkThread.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>此时的运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/e0fcfe814893926a06c75f900470d057.jpg" alt="多线程详解 创建多线程"><br /> 造成区别的原因时：当使用start()方法开启线程时，各线程是并发执行的，当使用run()方法开启线程时，各线程是顺序执行的。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/c1299022aafd1d795354f12c4d78146f.jpg" alt="多线程详解 创建多线程"></p> <h3><a id="2_Runnable_68" rel="nofollow"></a>2. 实现Runnable接口：</h3> <p>与继承Thread类方法类似，实现Runnable接口后要重写run()方法，然后使用Thread类来包装调用start()方法开启线程</p> <pre><code class="prism language-bash">public class TestThread2 implements Runnable<span class="token punctuation">{<!-- --></span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         System.out.println<span class="token punctuation">(</span><span class="token string">"开始吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         try<span class="token punctuation">{<!-- --></span>             Thread.sleep<span class="token punctuation">(</span>5000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"结束吃饭?...\t"</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         TestThread2 t1<span class="token operator">=</span> new TestThread2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Thread thread<span class="token operator">=</span> new Thread<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>  //对同一对象进行多线程从操作         thread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>运行结果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/efb9a4ce31cb69c1b2ef9e078b768167.jpg" alt="多线程详解 创建多线程"></p> <pre><code class="prism language-handlebars"><span class="token variable">注意：</span><span class="token variable">new</span><span class="token variable">Thread</span><span class="token punctuation">(</span><span class="token variable">t1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">和</span><span class="token variable">Thread</span><span class="token variable">thread</span><span class="token punctuation">=</span><span class="token variable">new</span><span class="token variable">Thread</span><span class="token punctuation">(</span><span class="token variable">t1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">thread</span><span class="token punctuation">.</span><span class="token variable">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">这两种写法效果是一样的</span><span class="token variable">第一种方法继承Thread类，Thread类也实现了Runnable接口</span><span class="token variable">第二种方法实现Runnable接口，类似创建一个代理工具类</span><span class="token variable">推荐使用实现Runnable接口的方法实现多线程，可以避免Java单线程的限制</span><span class="token variable">线程开启不一定立即执行，由CPU调度执行</span></code></pre> <h3><a id="3_Callable_110" rel="nofollow"></a>3. 实现Callable接口：</h3> <p>① 实现Callable接口，需要返回值类型<br /> ② 重写call()方法，需要抛出异常<br /> ③ 创建目标对象 : TestThread3 testThread3 = new TestThread3()<br /> ④ 创建执行服务 : ExecutorService ser = Executors.newFixedThreadPool(2)<br /> ⑤ 提交执行 : Future r1 = ser.submit(testThread3)<br /> ⑥ 获取结果 : boolean rst1 = r1.get();<br /> ⑦ 关闭服务 : ser.shutdownNow();</p> <pre><code class="prism language-bash">public class TestThread3 implements Callable<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span>  //①实现Callable接口，需要返回值类型     private String name<span class="token punctuation">;</span>      public TestThread3<span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         this.name<span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>     @Override     public Boolean call<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{<!-- --></span>  //②重写call<span class="token punctuation">(</span><span class="token punctuation">)</span>方法，需要抛出异常         if<span class="token punctuation">(</span>name.equals<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">))</span><span class="token punctuation">{<!-- --></span>             System.out.println<span class="token punctuation">(</span><span class="token string">"欢迎"</span>+name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws ExecutionException, InterruptedException<span class="token punctuation">{<!-- --></span>         //③创建目标对象         TestThread3 t1<span class="token operator">=</span> new TestThread3<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         TestThread3 t2<span class="token operator">=</span> new TestThread3<span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          //④创建执行服务         ExecutorService ser<span class="token operator">=</span> Executors.newFixedThreadPool<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑤提交执行         Future<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span> r1<span class="token operator">=</span> ser.submit<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>         Future<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span> r2<span class="token operator">=</span> ser.submit<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑥获取结果         boolean rst1<span class="token operator">=</span> r1.get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         boolean rst2<span class="token operator">=</span> r2.get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System.out.println<span class="token punctuation">(</span>rst1<span class="token punctuation">)</span><span class="token punctuation">;</span>         System.out.println<span class="token punctuation">(</span>rst2<span class="token punctuation">)</span><span class="token punctuation">;</span>          //⑦关闭服务         ser.shutdownNow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>运行结果：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/747425e673d4f262be469697d474a08a.jpg" alt="多线程详解 创建多线程"></p> <h2><a id="__160" rel="nofollow"></a>三. 多线程实例——龟兔赛跑</h2> <pre><code class="prism language-bash">public class Race implements Runnable<span class="token punctuation">{<!-- --></span>     private static String winner<span class="token punctuation">;</span>     @Override     public void run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span> 1<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span> 100<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             // 模拟兔子休息             if<span class="token punctuation">(</span>Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"兔子"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> i%10<span class="token operator">==</span>0<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 try<span class="token punctuation">{<!-- --></span>                     Thread.sleep<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch<span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                     e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>              boolean flag<span class="token operator">=</span> isGameOver<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>             // 如果比赛结束，终止程序<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>             // Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>获取当前线程             // Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>获取当前线程名字             System.out.print<span class="token punctuation">(</span>Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"--&gt;跑了"</span>+i+<span class="token string">"步"</span>+<span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             if<span class="token punctuation">(</span>i%5<span class="token operator">==</span>0<span class="token punctuation">)</span>                 System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>     // 判断是否有胜利者     public boolean isGameOver<span class="token punctuation">(</span>int step<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>winner<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>else<span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">&gt;=</span>100<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 winner<span class="token operator">=</span> Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 System.out.println<span class="token punctuation">(</span><span class="token string">"winner is "</span>+winner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         Race race<span class="token operator">=</span> new Race<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>race,<span class="token string">"兔子"</span><span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         new Thread<span class="token punctuation">(</span>race,<span class="token string">"乌龟"</span><span class="token punctuation">)</span>.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>结果：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220722/b3c242e1a23467509c5b436382f0b95e.jpg" alt="多线程详解 创建多线程"><br /> 参考:<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/vbirdbest/article/details/81282163"  rel="nofollow">https://blog.csdn.net/vbirdbest/article/details/81282163</a>.</p> </div> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1182.htm">前台请求后台用@RequestBody接收数据</a></p>
                                                        <p>下一个：<a href="/html/category/article-1184.htm">记一次线上websocket返回400问题排查</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1339.htm" title="分享MySQL生产库内存异常增高的排查过程_Mysql_">分享MySQL生产库内存异常增高的排查过程_Mysql_</a></li>
                        <li class="py-2"><a href="/html/category/article-1314.htm" title="vue&#8211;vuex 中 Modules 详解">vue&#8211;vuex 中 Modules 详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1287.htm" title="Spingboot Resttemplate连接池配置">Spingboot Resttemplate连接池配置</a></li>
                        <li class="py-2"><a href="/html/category/article-1291.htm" title="Springcloud通过maven打包包含公共common模块的项目">Springcloud通过maven打包包含公共common模块的项目</a></li>
                        <li class="py-2"><a href="/html/category/article-1295.htm" title="带你快速认识NamenodeHA和Yarn HA,为搭建HadoopHA集群打下基础!">带你快速认识NamenodeHA和Yarn HA,为搭建HadoopHA集群打下基础!</a></li>
                        <li class="py-2"><a href="/html/category/article-1305.htm" title="Kafka delivery保证(kafka消息投递保证)">Kafka delivery保证(kafka消息投递保证)</a></li>
                        <li class="py-2"><a href="/html/category/article-1285.htm" title="C语言栈与队列面试题详解_C 语言">C语言栈与队列面试题详解_C 语言</a></li>
                        <li class="py-2"><a href="/html/category/article-1318.htm" title="vue项目中,如何实现excel的导入导出excel导入功能-组件封装">vue项目中,如何实现excel的导入导出excel导入功能-组件封装</a></li>
                        <li class="py-2"><a href="/html/category/article-1320.htm" title="46.java编程思想——传递和返回对象 只读类">46.java编程思想——传递和返回对象 只读类</a></li>
                        <li class="py-2"><a href="/html/category/article-1296.htm" title="Android 12(S) 图像显示系统 &#8211; SurfaceFlinger 之 VSync &#8211; 中篇（十七）">Android 12(S) 图像显示系统 &#8211; SurfaceFlinger 之 VSync &#8211; 中篇（十七）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>