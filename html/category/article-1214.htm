<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1214.htm" />
    <title>Go 语言入门之net/url 包_Golang - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>Go 语言入门之net/url 包_Golang</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">引言</a></li> <li><a href="#_label1" rel="nofollow">URL 格式</a></li> <li><a href="#_label2" rel="nofollow">Go url 包函数使用格式</a></li> <li><a href="#_label3" rel="nofollow">如何使用 URL 包</a></li> <li><a href="#_label4" rel="nofollow">在 Golang 中对查询字符串进行 URL 编码</a></li> <li><a href="#_label5" rel="nofollow">在 Golang 中对多个查询参数进行 URL 编码</a></li> <li><a href="#_label6" rel="nofollow">在 Golang 中对路径段进行 URL 编码</a></li> <li><a href="#_label7" rel="nofollow">通过对各个部分进行编码来构建完整的 URL</a></li> <li><a href="#_label8" rel="nofollow">在 Golang 中解析 URL</a></li> <li><a href="#_label9" rel="nofollow">处理相对路径</a></li> <li><a href="#_label10" rel="nofollow">解析空格</a></li> <li><a href="#_label11" rel="nofollow">判断绝对地址</a></li> <li><a href="#_label12" rel="nofollow">解析端口</a></li> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>引言</h2> <p>在 Golang 中，将 URL 打包用于从服务器获取数据非常重要。只需了解您是否正在处理任何应用程序并且您想从任何外部位置或服务器获取此应用程序的数据，都需要我们可以使用 URL。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>URL 格式</h2> <p>URL 包含各种参数：例如 端口、URL 中的搜索字符串等。 URL 可以包含各种方法，允许它处理 URL 属性和进行修改，例如，如果我们有一个类似的 URL <code>www.exmple.com:3000</code> ，3000 是 URL 的端口，借助 <code>net/url</code> 中的封装函数我们可以访问端口号，同理，还可以检查 URL 格式是否有效。</p> <p><strong>先来看一下常见 URL 的格式：</strong></p> <blockquote> <p>&lt;schema&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;:&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</p> </blockquote> <ul> <li> <code>scheme</code> : 方案是如何访问指定资源的主要标识符，他会告诉负责解析 <code>URL</code> 应用程序应该使用什么协议；</li> <li> <code>user</code> ：用户名；</li> <li> <code>password</code> ：密码；</li> <li> <code>host</code> : 主机组件标识了因特网上能够访问资源的宿主机器，可以有主机名或者是 <code>IP</code> 地址来表示；</li> <li> <code>port</code> : 端口标识了服务器正在监听的网络端口。默认端口号是 80；</li> <li> <code>path</code> : <code>URL</code> 的路径组件说明了资源位于服务器的什么地方；</li> <li> <code>params</code> : <code>URL</code> 中通过协议参数来访问资源，比名值对列表，分号分割来进行访问；</li> <li> <code>query</code> : 字符串是通过提问问题或进行查询来缩小请求资源类的范围；</li> <li> <code>frag</code> : 为了引用部分资源或资源的一个片段，比如 <code>URL</code> 指定 <code>HTML</code> 文档中一个图片或一个小节；</li> </ul> <p><code>HTTP</code> 通常只处理整个对象，而不是对象的片段，客户端不能将片段传送给服务器。浏览器从服务器获取整个资源之后，会根据片段来显示你感兴趣的片段部分。</p> <p><strong>对应 Go 中 URL 的结构体：</strong></p> <div class="ay1code"> <pre class="brush:go;">type URL struct {      Scheme      string      Opaque      string    // encoded opaque data      User        *Userinfo // username and password information      Host        string    // host or host:port      Path        string    // path (relative paths may omit leading slash)      RawPath     string    // encoded path hint (see EscapedPath method)      ForceQuery  bool      // append a query ('?') even if RawQuery is empty      RawQuery    string    // encoded query values, without '?'      Fragment    string    // fragment for references, without '#'      RawFragment string    // encoded fragment hint (see EscapedFragment method)  }</pre> </div> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>Go url 包函数使用格式</h2> <p>Go 的 <code>net/url</code> 提供了众多处理 URL 的内置函数，<strong>这些函数的使用格式如下：</strong></p> <blockquote> <p>URL, error := url.inbuilt-function-name("url")</p> </blockquote> <ul> <li> <strong>URL：</strong>这包含 URL 名称和 URL 的一些基本细节。我们可以给它起任何名字。它就像任何变量一样。</li> <li> <strong>error: </strong>这是 error 部分，以防 URL 错误或出现任何异常，在这种情况下 URL 将返回错误，并且该 error 将在 error 部分中捕获。</li> <li> <strong>inbuilt-function-name：</strong>正如我们所讨论的，URL 包中有许多函数可以处理 URL，例如 <code>Parse</code>、<code>Path</code>、<code>Rawpath</code>、<code>string()</code> 所有这些函数我们可以用于不同的目的。</li> </ul> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>如何使用 URL 包</h2> <p>在了解 <code>url</code> 包的工作原理之前我们需要了解基本的使用。当我们点击任何 <code>url</code> 时，它可以包含许多属性，比如它可以有一些端口、它可以有一些搜索、它可以有一些路径等，所以我们使用 URL 来操作和处理所有这些东西。让我们了解一下 go 语言中 <code>URL</code> 包 的工作原理。</p> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "log"  "net/url"  )  func TestURL() {  URL, err := url.Parse("https://www.baidu.com/s?wd=golang")  fmt.Println("Url before modification is", URL)  if err != nil {  log.Fatal("An error occurs while handling url", err)  }  URL.Scheme = "https"  URL.Host = "bing.com"  query := URL.Query()  query.Set("q", "go")  URL.RawQuery = query.Encode()  fmt.Println("The url after modification is", URL)  }  func main() {  TestURL()  }</pre> </div> <p><strong>运行结果：</strong></p> <blockquote> <p>$ go run main.go<br />Url before modification is https://www.baidu.com/s?wd=golang<br />The url after modification is https://bing.com/s?q=go&amp;wd=golang</p> </blockquote> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>在 Golang 中对查询字符串进行 URL 编码</h2> <p>Go 的 <code>net/url</code> 包包含一个名为 <code>QueryEscape</code> 的内置方法，用于对字符串进行转义/编码，以便可以安全地将其放置在 URL 查询中。以下示例演示了如何在 Golang 中对查询字符串进行编码:</p> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "net/url"  )  func main() {  query := "Hello World"  fmt.Println(url.QueryEscape(query))  }</pre> </div> <p><strong>运行结果：</strong></p> <blockquote> <p>$ go run main.go<br />Hello+World</p> </blockquote> <p class="maodian"><a name="_label5" rel="nofollow"></a></p> <h2>在 Golang 中对多个查询参数进行 URL 编码</h2> <p>如果您想一次编码多个查询参数，那么您可以创建一个 <code>url.Values</code> 结构，其中包含查询参数到值的映射，并使用 <code>url.Values.Encode()</code> 方法对所有查询参数进行编码。</p> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "net/url"  )  func main() {  params := url.Values{}  params.Add("name", "@Wade")  params.Add("phone", "+111111111111")  fmt.Println(params.Encode())  }</pre> </div> <p><strong>运行代码：</strong></p> <blockquote> <p>$ go run main.go<br />name=%40Wade&amp;phone=%2B111111111111</p> </blockquote> <p class="maodian"><a name="_label6" rel="nofollow"></a></p> <h2>在 Golang 中对路径段进行 URL 编码</h2> <p>就像 <code>QueryEscape</code> 一样，Go 中的 <code>net/url</code> 包有另一个名为 <code>PathEscape()</code> 的函数来对字符串进行编码，以便它可以安全地放置在 URL 的路径段中:</p> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "net/url"  )  func main() {  path := "path with?reserved+characters"  fmt.Println(url.PathEscape(path))  }</pre> </div> <p><strong>运行结果：</strong></p> <blockquote> <p>$ go run main.go<br />path%20with%3Freserved+characters</p> </blockquote> <p class="maodian"><a name="_label7" rel="nofollow"></a></p> <h2>通过对各个部分进行编码来构建完整的 URL</h2> <p>最后，我们来看一个完整的 Golang 中 URL 解析和 URL 编码的例子：</p> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "net/url"  )  func main() {  // Let's start with a base url  baseUrl, err := url.Parse("http://www.bing.com")  if err != nil {  fmt.Println("Malformed URL: ", err.Error())  return  }  // Add a Path Segment (Path segment is automatically escaped)  baseUrl.Path += "path with?reserved characters"  // Prepare Query Parameters  params := url.Values{}  params.Add("q", "Hello World")  params.Add("u", "@wade")  // Add Query Parameters to the URL  baseUrl.RawQuery = params.Encode() // Escape Query Parameters  fmt.Printf("Encoded URL is %q\n", baseUrl.String())  }</pre> </div> <p><strong>运行代码：</strong></p> <blockquote> <p>$ go run main.go<br />Encoded URL is "http://www.bing.com/path%20with%3Freserved%20characters?q=Hello+World&amp;u=%40wade"</p> </blockquote> <p class="maodian"><a name="_label8" rel="nofollow"></a></p> <h2>在 Golang 中解析 URL</h2> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "log"  "net/url"  )  func TestURL() {  URL, err := url.Parse("http://bing.com/good%2bad")  fmt.Println("Url before modification is", URL)  if err != nil {  log.Fatal("An error occurs while handling url", err)  }  fmt.Println("The URL path is", URL.Path)  fmt.Println("The URL raw path is", URL.RawPath)  fmt.Println("The URL is ", URL.String())  }  func main() {  TestURL()  }</pre> </div> <p><strong>运行代码：</strong></p> <blockquote> <p>$ go run main.go<br />Url before modification is http://bing.com/good%2bad<br />The URL path is /good+ad<br />The URL raw path is /good%2bad<br />The URL is http://bing.com/good%2bad</p> </blockquote> <p class="maodian"><a name="_label9" rel="nofollow"></a></p> <h2>处理相对路径</h2> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "log"  "net/url"  )  func ExampleURL() {  URL, error := url.Parse("../../..//search?q=php")  fmt.Println("Url before modification is", URL)  if error != nil {  log.Fatal("An error occurs while handling url", error)  }  baseURL, err := url.Parse("http://example.com/directory/")  if err != nil {  log.Fatal("An error occurs while handling url", err)  }  fmt.Println(baseURL.ResolveReference(URL))  }  func main() {  ExampleURL()  }</pre> </div> <blockquote> <p>$ go run main.go<br />Url before modification is ../../..//search?q=php<br />http://example.com/search?q=php</p> </blockquote> <p class="maodian"><a name="_label10" rel="nofollow"></a></p> <h2>解析空格</h2> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "log"  "net/url"  )  func ExampleURL() {  URL, error := url.Parse("http://example.com/Here path with space")  if error != nil {  log.Fatal("An error occurs while handling url", error)  }  fmt.Println("The Url is", URL)  }  func main() {  ExampleURL()  }</pre> </div> <p><strong>运行结果：</strong></p> <blockquote> <p>$ go run main.go<br />The Url is http://example.com/Here%20path%20with%20space</p> </blockquote> <p class="maodian"><a name="_label11" rel="nofollow"></a></p> <h2>判断绝对地址</h2> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "net/url"  )  func main() {  u := url.URL{Host: "example.com", Path: "foo"}  fmt.Println("The Url is", u.IsAbs())  u.Scheme = "http"  fmt.Println("The Url is", u.IsAbs())  }</pre> </div> <blockquote> <p>$ go run main.go<br />The Url is false<br />The Url is true</p> </blockquote> <p class="maodian"><a name="_label12" rel="nofollow"></a></p> <h2>解析端口</h2> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "log"  "net/url"  )  func ExampleURL() {  URL1, error := url.Parse("https://example.org")  fmt.Println("URL1 before modification is", URL1)  if error != nil {  log.Fatal("An error occurs while handling url", error)  }  URL2, err := url.Parse("https://example.org:8080")  if err != nil {  log.Fatal("An error occurs while handling url", URL2)  }  fmt.Println("URL2 before modification is", URL2)  fmt.Println("URL2 Port number is", URL2.Port())  }  func main() {  ExampleURL()  }</pre> </div> <blockquote> <p>$ go run main.go<br />URL1 before modification is https://example.org<br />URL2 before modification is https://example.org:8080<br />URL2 Port number is 8080</p> </blockquote> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1213.htm">python2.7 之无解的yaml版本问题</a></p>
                                                        <p>下一个：<a href="/html/category/article-1215.htm">Java String.equals()与==。</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1295.htm" title="带你快速认识NamenodeHA和Yarn HA,为搭建HadoopHA集群打下基础!">带你快速认识NamenodeHA和Yarn HA,为搭建HadoopHA集群打下基础!</a></li>
                        <li class="py-2"><a href="/html/category/article-1317.htm" title="JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported">JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported</a></li>
                        <li class="py-2"><a href="/html/category/article-1291.htm" title="Springcloud通过maven打包包含公共common模块的项目">Springcloud通过maven打包包含公共common模块的项目</a></li>
                        <li class="py-2"><a href="/html/category/article-1920.htm" title="我们如何在Java中实现自定义HashSet">我们如何在Java中实现自定义HashSet</a></li>
                        <li class="py-2"><a href="/html/category/article-1309.htm" title="sqlserver 中使用sqlcmd 执行几百M的.sql文件">sqlserver 中使用sqlcmd 执行几百M的.sql文件</a></li>
                        <li class="py-2"><a href="/html/category/article-1299.htm" title="linux信号量semaphore">linux信号量semaphore</a></li>
                        <li class="py-2"><a href="/html/category/article-1934.htm" title="朴素贝叶斯算法详解">朴素贝叶斯算法详解</a></li>
                        <li class="py-2"><a href="/html/category/article-1285.htm" title="C语言栈与队列面试题详解_C 语言">C语言栈与队列面试题详解_C 语言</a></li>
                        <li class="py-2"><a href="/html/category/article-1286.htm" title="优雅处理API统一返回">优雅处理API统一返回</a></li>
                        <li class="py-2"><a href="/html/category/article-1308.htm" title="HTML 5验证有用吗">HTML 5验证有用吗</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">46</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>