<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://myanmaraddress.github.io/html/category/article-1220.htm" />
    <title>request和response——请求响应对象 - Myanmar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/myanmaraddress/favicon.ico" type="image/x-icon"/>
    <link href="/assets/addons/xcblog/css/myanmaraddress/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!--theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/style.css" rel="stylesheet" type="text/css" media="all">
    <!--//theme-style-->
    <link href="/assets/addons/xcblog/css/myanmaraddress/popuo-box.css" rel="stylesheet" type="text/css" media="all" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- script -->
    <script src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/move-top.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/easing.js"></script>
    <link type="text/css" rel="stylesheet" href="/assets/addons/xcblog/css/myanmaraddress/jquery.mmenu.all.css" />
    <script type="text/javascript">
    $(window).load(function() {
        $('div.description').each(function() {
            $(this).css('display', 'block');
        });

        $('div.content-top-grid').hover(function() {
            $(this).children('.description').stop().fadeTo(500, 1);
        }, function() {
            $(this).children('.description').stop().fadeTo(500, 0);
        });

    });
    </script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/myanmaraddress/jquery.mmenu.js"></script>
    <script type="text/javascript">
    //	The menu on the left
    $(function() {
        $('nav#menu-left').mmenu();
    });
    </script>
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?e4890e777e20237a4f5a0c3a6a01049c";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!--header-->
    <div class="header">
        <a class="navicon" href="#menu-left"> </a>
        <div class="container">
            <div class="header-matter">
                <h1>request和response——请求响应对象</h1>
                <p>
                    <a href="/">首页</a> / <a href="/html/category/">文章分类</a> / 正文
                </p>
            </div>
        </div>
                <nav id="menu-left">
            <ul>
                                <li><a href="/">首页</a></li>
                                <li><a href="/html/category/">文章分类</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav>
        <script type="text/javascript">
        jQuery(document).ready(function($) {
            $(".scroll").click(function(event) {
                event.preventDefault();
                $('html,body').animate({ scrollTop: $(this.hash).offset().top }, 1000);
            });
        });
        </script>
    </div>
    <div class="clearfix"> </div>
    <!--//header-->
    <!--content-->
    <div class="content">
        <!--our-news-->
        <div class="our-news" id="news">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="news">
                              				  				  				<h1 id="请求对象request">请求对象——request</h1> <h2 id="获取get请求的值">获取get请求的值</h2> <blockquote> <p>一次请求，返回一个响应。<br /> 地址栏：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://127.0.0.1:8000/day3/get_request?lan=python"  target="_blank" rel="nofollow">http://127.0.0.1:8000/day3/get_request?lan=python</a><br /> 问号：代表请求参数</p> </blockquote> <blockquote> <p>需求：拿到请求参数</p> </blockquote> <h3 id="传入单个值">传入单个值</h3> <pre><code class="language-python"># views.py def get_request(request):     return HttpResponse('getrequest') # urls.py path('getrequest',get_request),</code></pre> <p>想要拿到地址栏中的参数<br /><code>print(request.GET)</code><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/edce18ec10e3a70c3f7b50b558ff8f91.jpg" alt="request和response——请求响应对象"><br /> 发现打印出来的是字典，所以——<br /><code>print(request.GET.get('lan'))</code><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/21bddde9a8508d6c45afc1191bba4e3a.jpg" alt="request和response——请求响应对象"></p> <blockquote> <p><strong>【知识点】</strong><br /> 打印字典中的值，有两种办法：<br /> 1，print(request.GET.get('lan'))——（一般用这个）假设key不存在，返回空值None<br /> 2，print(request.GET['lan'])——key不存在，会抛出异常</p> </blockquote> <h3 id="传入多个值">传入多个值</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/1490fd63ff08d47e3e4d30082deca62f.jpg" alt="request和response——请求响应对象"><br /><code>print(request.GET.getlist('lan'))</code><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e65701e970c5c59bfe5314329b2e6eca.jpg" alt="request和response——请求响应对象"></p> <h3 id="获取路由地址">获取路由地址</h3> <p>如何来到get_request函数的（这个视图函数）<br /><code>print(request.path_info)</code><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7e3ab109f55aa7ba185a7fe482c209f1.jpg" alt="request和response——请求响应对象"></p> <h3 id="获取请求方式getpost">获取请求方式(get/post)</h3> <p><code>print(request.method)</code><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b4e073a471958ed8d65761502731ec16.jpg" alt="request和response——请求响应对象"></p> <blockquote> <p><strong>【知识点】</strong><br /> Django中地址栏默认是get请求，如果要发送post请求，需要把中间件的（选中的）注释掉<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/fea2c2a5b60d05c8492237511586afcf.jpg" alt="request和response——请求响应对象"></p> </blockquote> <blockquote> <p><strong>【知识点】</strong><br /> post请求，往表单中传入数据（用的postman）<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a54c50ce8c95d845bbe52a6fdcf884c0.jpg" alt="request和response——请求响应对象"></p> </blockquote> <h2 id="获取post请求的值">获取post请求的值</h2> <h3 id="获取value">获取value</h3> <p>假设表单中的值是这样的：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/89c6dd2c61fe96c05df6cf22fd66f0d2.jpg" alt="request和response——请求响应对象"><br /> 先看看request.POST打印出什么<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/382c934c4259fca399b8f5ffffe2e5e3.jpg" alt="request和response——请求响应对象"><br /> 拿到request.POST.get('b_title')<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b3b5a114b2ec77a0fc64db37a9367d7d.jpg" alt="request和response——请求响应对象"></p> <h3 id="表单上传">表单上传</h3> <p><code>print(request.FILES)</code><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/294fed407d8d3dc7060447b38ade7cca.jpg" alt="request和response——请求响应对象"><br /> (files里面对应的是文件对象）</p> <h2 id="根据请求方式选择路由">根据请求方式选择路由</h2> <pre><code>path('testgetpost', test_get_post), # 根据不同的请求方式做不同的处理 def test_get_post(request):     if request.method == 'GET':         return HttpResponse('get请求')     elif request.method == 'POST':         # li = [1,2]         # print(li[2])         return HttpResponse('post请求')     else:         return HttpResponse(request.method)</code></pre> <h1 id="响应对象response">响应对象——response</h1> <h2 id="常见的状态码">常见的状态码</h2> <blockquote> <p>200（响应成功）<br /> 500（python代码有问题）<br /> 404(资源找不到)<br /> 405（请求不被允许）<br /> 301 302 （重定向，浏览器的行为）</p> </blockquote> <h2 id="给定响应头">给定响应头</h2> <h3 id="默认返回的头信息">默认返回的头信息</h3> <pre><code> path('test_response_header',test_response_header), def test_response_header(request):     ret = HttpResponse('test_response_header')     return ret</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d5648a943c90f0e9d35f3ee371814e03.jpg" alt="request和response——请求响应对象"></p> <h3 id="自定义头信息">自定义头信息</h3> <pre><code> path('test_response_header',test_response_header), def test_response_header(request):     # content-type是html类型     ret = HttpResponse('test_response_header')     # 自定义头信息     ret['msg'] = 'success'     ret['code'] = 'ok'     return ret</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b16df0e8b62bfbf9a62b9414dc170ff7.jpg" alt="request和response——请求响应对象"></p> <h2 id="其他响应对象">其他响应对象</h2> <blockquote> <p>json 数据格式 解决前后端数据不认识的问题 {'key':value}<br /> 前后不分离项目 ：前后端全部编写，会经常使用HttpResponse对象<br /> 前后分离项目时使用: 会经常使用JsonResponse对象</p> </blockquote> <h3 id="json-数据格式">json 数据格式</h3> <p>用途：一般做前后分离项目时使用</p> <pre><code>path('test_json_response', test_json_response), def test_json_response(request):     # content-type是json类型     return JsonResponse(request.GET)</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a448942a20a2025328e32ead59ee6cab.jpg" alt="request和response——请求响应对象"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/bb52fca78994d1aa5a70f90d8902ade9.jpg" alt="request和response——请求响应对象"></p> <h3 id="文件处理">文件处理</h3> <pre><code>path('test_file_response',test_file_response),  def test_file_response(request):     return FileResponse(open('manage.py','rb'))</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/ea961e8ae99f0f12ee260ae4bad2536d.jpg" alt="request和response——请求响应对象"></p> <h3 id="return-jsonresponse和return-fileresponse的区别">return JsonResponse和return FileResponse的区别</h3> <blockquote> <p>return JsonResponse和return：返回值类型是Json<br /> return FileResponse：返回值类型是文件的类型</p> </blockquote> 			                        </div>

                        <div class="col-md-12 mt-5">
                                                        <p>上一个：<a href="/html/category/article-1219.htm">springboot启动注解</a></p>
                                                        <p>下一个：<a href="/html/category/article-1221.htm">自定义全局异常处理机制</a></p>
                                                    </div>

                                            </div>
                    <div class="col-md-3">
                    	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-1317.htm" title="JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported">JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported</a></li>
                        <li class="py-2"><a href="/html/category/article-1290.htm" title="Jmeter监控平台搭建：JMeter+InfluxDB+Grafana">Jmeter监控平台搭建：JMeter+InfluxDB+Grafana</a></li>
                        <li class="py-2"><a href="/html/category/article-1320.htm" title="46.java编程思想——传递和返回对象 只读类">46.java编程思想——传递和返回对象 只读类</a></li>
                        <li class="py-2"><a href="/html/category/article-1307.htm" title="在JavaScript中实现优先级排序">在JavaScript中实现优先级排序</a></li>
                        <li class="py-2"><a href="/html/category/article-1293.htm" title="基于Spring接口，集成Caffeine+Redis两级缓存">基于Spring接口，集成Caffeine+Redis两级缓存</a></li>
                        <li class="py-2"><a href="/html/category/article-1919.htm" title="React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式">React Ant Design Pro + .Net5 WebApi：后端环境搭建-IdentityServer4（二）授权模式</a></li>
                        <li class="py-2"><a href="/html/category/article-1340.htm" title="请说一下你对分布式锁的理解，以及分布式锁的实现">请说一下你对分布式锁的理解，以及分布式锁的实现</a></li>
                        <li class="py-2"><a href="/html/category/article-1961.htm" title="python自动化测试工具selenium使用指南">python自动化测试工具selenium使用指南</a></li>
                        <li class="py-2"><a href="/html/category/article-1359.htm" title="python 数据加载工作">python 数据加载工作</a></li>
                        <li class="py-2"><a href="/html/category/article-1316.htm" title="vscode指定扩展安装位置">vscode指定扩展安装位置</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--//content-->
        <!--footer-->
    <div class="footer">
        <div class="container">
            <p>
                Myanmar Address 版权所有
                <br />
                Powered by WordPress
            </p>
        </div>
    </div>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>